%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: path-time-detail.pdf
%%Creator: Adobe Acrobat 9.3.2
%%For: epeius
%%CreationDate: 2018/3/6, 20:32:15
%%BoundingBox: 0 0 461 346
%%HiResBoundingBox: 0 0 460.8000 345.6001
%%CropBox: 0 0 460.8000 345.6001
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 567 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.1-c043 52.372728, 2009/01/18-15:08:04        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
   xmp:CreateDate="2017-07-20T15:34:19+02:00"
   xmp:CreatorTool="matplotlib 2.0.0, http://matplotlib.org"
   pdf:Producer="matplotlib pdf backend"
   dc:format="application/pdf"/>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Core/capture_mysetup gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -345.6 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 345.6 li
460.8 345.6 li
460.8 0 li
cp
clp
[1 0 0 1 0 0 ]ct
0 345.6 mo
460.8 345.6 li
460.8 0 li
0 0 li
0 345.6 li
false sop
/0 
<<
/Name (Black)
/0 
[/DeviceCMYK] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA /0 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /0 /CSD get_res sepcs
0 sep
f
57.6 162.432 mo
219.927 162.432 li
219.927 41.472 li
57.6 41.472 li
57.6 162.432 li
f
64.9785 162.432 mo
64.9785 165.932 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
1 lj
10 ml
[] 0 dsh
true sadj
64.9785 162.432 mo
64.9785 165.932 li
@
89.5736 162.432 mo
89.5736 165.932 li
f
89.5736 162.432 mo
89.5736 165.932 li
@
114.169 162.432 mo
114.169 165.932 li
f
114.169 162.432 mo
114.169 165.932 li
@
138.764 162.432 mo
138.764 165.932 li
f
138.764 162.432 mo
138.764 165.932 li
@
163.359 162.432 mo
163.359 165.932 li
f
163.359 162.432 mo
163.359 165.932 li
@
187.954 162.432 mo
187.954 165.932 li
f
187.954 162.432 mo
187.954 165.932 li
@
212.549 162.432 mo
212.549 165.932 li
f
212.549 162.432 mo
212.549 165.932 li
@
57.6 156.952 mo
54.1 156.952 li
f
57.6 156.952 mo
54.1 156.952 li
@
42.86 157.066 mo
42.86 157.516 42.81 157.936 42.73 158.336 cv
42.64 158.736 42.51 159.096 42.34 159.426 cv
42.17 159.766 41.94 160.026 41.64 160.216 cv
41.34 160.396 40.99 160.496 40.6 160.496 cv
40.19 160.496 39.83 160.396 39.53 160.196 cv
39.22 159.996 38.98 159.716 38.82 159.366 cv
38.65 159.026 38.53 158.656 38.45 158.256 cv
38.37 157.866 38.34 157.446 38.34 157.006 cv
38.34 156.386 38.41 155.836 38.57 155.336 cv
38.72 154.836 38.97 154.426 39.33 154.096 cv
39.69 153.776 40.12 153.606 40.64 153.606 cv
41.29 153.606 41.82 153.926 42.24 154.566 cv
42.65 155.206 42.86 156.046 42.86 157.066 cv
41.9 157.116 mo
41.9 156.066 41.78 155.266 41.56 154.706 cv
41.34 154.146 41.01 153.866 40.58 153.866 cv
40.16 153.866 39.85 154.146 39.63 154.706 cv
39.41 155.266 39.3 156.056 39.3 157.076 cv
39.3 158.106 39.41 158.896 39.63 159.436 cv
39.85 159.976 40.17 160.246 40.6 160.246 cv
41.02 160.246 41.34 159.976 41.56 159.436 cv
41.78 158.896 41.9 158.116 41.9 157.116 cv
f
44.91 159.936 mo
44.91 160.086 44.85 160.216 44.74 160.316 cv
44.63 160.416 44.5 160.466 44.35 160.466 cv
44.19 160.466 44.06 160.416 43.96 160.316 cv
43.85 160.216 43.8 160.086 43.8 159.926 cv
43.8 159.776 43.85 159.646 43.96 159.536 cv
44.07 159.426 44.2 159.366 44.36 159.366 cv
44.5 159.366 44.63 159.426 44.74 159.536 cv
44.85 159.656 44.91 159.786 44.91 159.936 cv
f
50.36 157.066 mo
50.36 157.516 50.31 157.936 50.23 158.336 cv
50.14 158.736 50.01 159.096 49.84 159.426 cv
49.67 159.766 49.44 160.026 49.14 160.216 cv
48.84 160.396 48.49 160.496 48.1 160.496 cv
47.69 160.496 47.33 160.396 47.03 160.196 cv
46.72 159.996 46.48 159.716 46.32 159.366 cv
46.15 159.026 46.03 158.656 45.95 158.256 cv
45.87 157.866 45.84 157.446 45.84 157.006 cv
45.84 156.386 45.91 155.836 46.07 155.336 cv
46.22 154.836 46.47 154.426 46.83 154.096 cv
47.19 153.776 47.62 153.606 48.14 153.606 cv
48.79 153.606 49.32 153.926 49.74 154.566 cv
50.15 155.206 50.36 156.046 50.36 157.066 cv
49.4 157.116 mo
49.4 156.066 49.28 155.266 49.06 154.706 cv
48.84 154.146 48.51 153.866 48.08 153.866 cv
47.66 153.866 47.35 154.146 47.13 154.706 cv
46.91 155.266 46.8 156.056 46.8 157.076 cv
46.8 158.106 46.91 158.896 47.13 159.436 cv
47.35 159.976 47.67 160.246 48.1 160.246 cv
48.52 160.246 48.84 159.976 49.06 159.436 cv
49.28 158.896 49.4 158.116 49.4 157.116 cv
f
57.6 133.82 mo
54.1 133.82 li
f
57.6 133.82 mo
54.1 133.82 li
@
42.86 133.934 mo
42.86 134.384 42.81 134.804 42.73 135.204 cv
42.64 135.604 42.51 135.964 42.34 136.294 cv
42.17 136.634 41.94 136.894 41.64 137.084 cv
41.34 137.264 40.99 137.364 40.6 137.364 cv
40.19 137.364 39.83 137.264 39.53 137.064 cv
39.22 136.864 38.98 136.584 38.82 136.234 cv
38.65 135.894 38.53 135.524 38.45 135.124 cv
38.37 134.734 38.34 134.314 38.34 133.874 cv
38.34 133.254 38.41 132.704 38.57 132.204 cv
38.72 131.704 38.97 131.294 39.33 130.964 cv
39.69 130.644 40.12 130.474 40.64 130.474 cv
41.29 130.474 41.82 130.794 42.24 131.434 cv
42.65 132.074 42.86 132.914 42.86 133.934 cv
41.9 133.984 mo
41.9 132.934 41.78 132.134 41.56 131.574 cv
41.34 131.014 41.01 130.734 40.58 130.734 cv
40.16 130.734 39.85 131.014 39.63 131.574 cv
39.41 132.134 39.3 132.924 39.3 133.944 cv
39.3 134.974 39.41 135.764 39.63 136.304 cv
39.85 136.844 40.17 137.114 40.6 137.114 cv
41.02 137.114 41.34 136.844 41.56 136.304 cv
41.78 135.764 41.9 134.984 41.9 133.984 cv
f
44.91 136.804 mo
44.91 136.954 44.85 137.084 44.74 137.184 cv
44.63 137.284 44.5 137.334 44.35 137.334 cv
44.19 137.334 44.06 137.284 43.96 137.184 cv
43.85 137.084 43.8 136.954 43.8 136.794 cv
43.8 136.644 43.85 136.514 43.96 136.404 cv
44.07 136.294 44.2 136.234 44.36 136.234 cv
44.5 136.234 44.63 136.294 44.74 136.404 cv
44.85 136.524 44.91 136.654 44.91 136.804 cv
f
50.34 135.864 mo
49.8 137.234 li
45.89 137.234 li
45.89 137.114 li
47.67 135.224 li
48.13 134.744 48.47 134.294 48.67 133.884 cv
48.87 133.484 48.97 133.064 48.97 132.624 cv
48.97 132.184 48.84 131.834 48.6 131.584 cv
48.35 131.344 48.01 131.214 47.58 131.214 cv
47.22 131.214 46.93 131.314 46.72 131.494 cv
46.51 131.684 46.31 132.024 46.11 132.514 cv
45.9 132.464 li
46.01 131.844 46.24 131.364 46.58 131.004 cv
46.92 130.654 47.39 130.474 47.98 130.474 cv
48.53 130.474 48.98 130.644 49.32 130.974 cv
49.66 131.314 49.83 131.734 49.83 132.234 cv
49.83 132.994 49.4 133.814 48.55 134.714 cv
46.9 136.474 li
49.24 136.474 li
49.46 136.474 49.63 136.434 49.76 136.344 cv
49.89 136.264 50.04 136.084 50.2 135.804 cv
50.34 135.864 li
f
57.6 110.689 mo
54.1 110.689 li
f
57.6 110.689 mo
54.1 110.689 li
@
42.86 110.803 mo
42.86 111.253 42.81 111.673 42.73 112.073 cv
42.64 112.473 42.51 112.833 42.34 113.163 cv
42.17 113.503 41.94 113.763 41.64 113.953 cv
41.34 114.133 40.99 114.233 40.6 114.233 cv
40.19 114.233 39.83 114.133 39.53 113.933 cv
39.22 113.733 38.98 113.453 38.82 113.103 cv
38.65 112.763 38.53 112.393 38.45 111.993 cv
38.37 111.603 38.34 111.183 38.34 110.743 cv
38.34 110.123 38.41 109.573 38.57 109.073 cv
38.72 108.573 38.97 108.163 39.33 107.833 cv
39.69 107.513 40.12 107.343 40.64 107.343 cv
41.29 107.343 41.82 107.663 42.24 108.303 cv
42.65 108.943 42.86 109.783 42.86 110.803 cv
41.9 110.853 mo
41.9 109.803 41.78 109.003 41.56 108.443 cv
41.34 107.883 41.01 107.603 40.58 107.603 cv
40.16 107.603 39.85 107.883 39.63 108.443 cv
39.41 109.003 39.3 109.793 39.3 110.813 cv
39.3 111.843 39.41 112.633 39.63 113.173 cv
39.85 113.713 40.17 113.983 40.6 113.983 cv
41.02 113.983 41.34 113.713 41.56 113.173 cv
41.78 112.633 41.9 111.853 41.9 110.853 cv
f
44.91 113.673 mo
44.91 113.823 44.85 113.953 44.74 114.053 cv
44.63 114.153 44.5 114.203 44.35 114.203 cv
44.19 114.203 44.06 114.153 43.96 114.053 cv
43.85 113.953 43.8 113.823 43.8 113.663 cv
43.8 113.513 43.85 113.383 43.96 113.273 cv
44.07 113.163 44.2 113.103 44.36 113.103 cv
44.5 113.103 44.63 113.163 44.74 113.273 cv
44.85 113.393 44.91 113.523 44.91 113.673 cv
f
50.33 112.433 mo
49.3 112.433 li
49.3 114.103 li
48.52 114.103 li
48.52 112.433 li
45.72 112.433 li
45.72 111.793 li
48.86 107.343 li
49.3 107.343 li
49.3 111.793 li
50.33 111.793 li
50.33 112.433 li
48.52 111.793 mo
48.52 108.363 li
46.12 111.793 li
48.52 111.793 li
f
57.6 87.5571 mo
54.1 87.5571 li
f
57.6 87.5571 mo
54.1 87.5571 li
@
42.86 87.6711 mo
42.86 88.1211 42.81 88.5411 42.73 88.9411 cv
42.64 89.3411 42.51 89.7011 42.34 90.0311 cv
42.17 90.3711 41.94 90.6311 41.64 90.8211 cv
41.34 91.0011 40.99 91.1011 40.6 91.1011 cv
40.19 91.1011 39.83 91.0011 39.53 90.8011 cv
39.22 90.6011 38.98 90.3211 38.82 89.9711 cv
38.65 89.6311 38.53 89.2611 38.45 88.8611 cv
38.37 88.4711 38.34 88.0511 38.34 87.6111 cv
38.34 86.9911 38.41 86.4411 38.57 85.9411 cv
38.72 85.4411 38.97 85.0311 39.33 84.7011 cv
39.69 84.3811 40.12 84.2111 40.64 84.2111 cv
41.29 84.2111 41.82 84.5311 42.24 85.1711 cv
42.65 85.8111 42.86 86.6511 42.86 87.6711 cv
41.9 87.7211 mo
41.9 86.6711 41.78 85.8711 41.56 85.3111 cv
41.34 84.7511 41.01 84.4711 40.58 84.4711 cv
40.16 84.4711 39.85 84.7511 39.63 85.3111 cv
39.41 85.8711 39.3 86.6611 39.3 87.6811 cv
39.3 88.7111 39.41 89.5011 39.63 90.0411 cv
39.85 90.5811 40.17 90.8511 40.6 90.8511 cv
41.02 90.8511 41.34 90.5811 41.56 90.0411 cv
41.78 89.5011 41.9 88.7211 41.9 87.7211 cv
f
44.91 90.5411 mo
44.91 90.6911 44.85 90.8211 44.74 90.9211 cv
44.63 91.0211 44.5 91.0711 44.35 91.0711 cv
44.19 91.0711 44.06 91.0211 43.96 90.9211 cv
43.85 90.8211 43.8 90.6911 43.8 90.5311 cv
43.8 90.3811 43.85 90.2511 43.96 90.1411 cv
44.07 90.0311 44.2 89.9711 44.36 89.9711 cv
44.5 89.9711 44.63 90.0311 44.74 90.1411 cv
44.85 90.2611 44.91 90.3911 44.91 90.5411 cv
f
50.06 84.1311 mo
50.08 84.2911 li
49.29 84.4211 48.63 84.7411 48.11 85.2511 cv
47.58 85.7611 47.25 86.3911 47.12 87.1411 cv
47.5 86.8411 47.93 86.6911 48.39 86.6911 cv
48.97 86.6911 49.43 86.8811 49.77 87.2511 cv
50.11 87.6311 50.28 88.1411 50.28 88.7811 cv
50.28 89.4411 50.11 89.9711 49.77 90.3811 cv
49.37 90.8611 48.84 91.1011 48.18 91.1011 cv
47.36 91.1011 46.77 90.7711 46.41 90.1011 cv
46.09 89.5311 45.94 88.8911 45.94 88.1811 cv
45.94 87.0911 46.3 86.1711 47.03 85.4211 cv
47.44 85.0011 47.86 84.7011 48.3 84.5211 cv
48.74 84.3411 49.32 84.2111 50.06 84.1311 cv
49.38 89.0911 mo
49.38 87.8011 48.93 87.1511 48.03 87.1511 cv
47.69 87.1511 47.42 87.2411 47.2 87.4211 cv
46.98 87.6011 46.87 87.8911 46.87 88.3111 cv
46.87 89.0911 46.99 89.7111 47.23 90.1611 cv
47.47 90.6111 47.83 90.8311 48.29 90.8311 cv
48.64 90.8311 48.91 90.6811 49.1 90.3611 cv
49.28 90.0411 49.38 89.6211 49.38 89.0911 cv
f
57.6 64.4256 mo
54.1 64.4256 li
f
57.6 64.4256 mo
54.1 64.4256 li
@
42.86 64.5396 mo
42.86 64.9896 42.81 65.4096 42.73 65.8096 cv
42.64 66.2096 42.51 66.5696 42.34 66.8996 cv
42.17 67.2396 41.94 67.4996 41.64 67.6896 cv
41.34 67.8696 40.99 67.9696 40.6 67.9696 cv
40.19 67.9696 39.83 67.8696 39.53 67.6696 cv
39.22 67.4696 38.98 67.1896 38.82 66.8396 cv
38.65 66.4996 38.53 66.1296 38.45 65.7296 cv
38.37 65.3396 38.34 64.9196 38.34 64.4796 cv
38.34 63.8596 38.41 63.3096 38.57 62.8096 cv
38.72 62.3096 38.97 61.8996 39.33 61.5696 cv
39.69 61.2496 40.12 61.0796 40.64 61.0796 cv
41.29 61.0796 41.82 61.3996 42.24 62.0396 cv
42.65 62.6796 42.86 63.5196 42.86 64.5396 cv
41.9 64.5896 mo
41.9 63.5396 41.78 62.7396 41.56 62.1796 cv
41.34 61.6196 41.01 61.3396 40.58 61.3396 cv
40.16 61.3396 39.85 61.6196 39.63 62.1796 cv
39.41 62.7396 39.3 63.5296 39.3 64.5496 cv
39.3 65.5796 39.41 66.3696 39.63 66.9096 cv
39.85 67.4496 40.17 67.7196 40.6 67.7196 cv
41.02 67.7196 41.34 67.4496 41.56 66.9096 cv
41.78 66.3696 41.9 65.5896 41.9 64.5896 cv
f
44.91 67.4096 mo
44.91 67.5596 44.85 67.6896 44.74 67.7896 cv
44.63 67.8896 44.5 67.9396 44.35 67.9396 cv
44.19 67.9396 44.06 67.8896 43.96 67.7896 cv
43.85 67.6896 43.8 67.5596 43.8 67.3996 cv
43.8 67.2496 43.85 67.1196 43.96 67.0096 cv
44.07 66.8996 44.2 66.8396 44.36 66.8396 cv
44.5 66.8396 44.63 66.8996 44.74 67.0096 cv
44.85 67.1296 44.91 67.2596 44.91 67.4096 cv
f
50.05 66.2896 mo
50.05 66.8096 49.87 67.2196 49.51 67.5196 cv
49.15 67.8196 48.68 67.9696 48.08 67.9696 cv
47.52 67.9696 47.06 67.8196 46.7 67.5196 cv
46.34 67.2196 46.16 66.8296 46.16 66.3496 cv
46.16 65.9996 46.24 65.6996 46.42 65.4496 cv
46.59 65.1996 46.94 64.8896 47.46 64.5196 cv
46.96 64.1096 46.62 63.7796 46.46 63.5196 cv
46.3 63.2696 46.22 62.9796 46.22 62.6396 cv
46.22 62.1696 46.4 61.7896 46.76 61.5096 cv
47.12 61.2296 47.59 61.0796 48.16 61.0796 cv
48.64 61.0796 49.04 61.2196 49.36 61.4996 cv
49.68 61.7796 49.84 62.1096 49.84 62.5096 cv
49.84 62.8796 49.74 63.1696 49.55 63.3896 cv
49.36 63.6096 49.01 63.8596 48.5 64.1296 cv
49.1 64.5296 49.5 64.8896 49.72 65.1996 cv
49.94 65.5196 50.05 65.8796 50.05 66.2896 cv
49.15 62.5096 mo
49.15 62.1696 49.05 61.8896 48.86 61.6796 cv
48.66 61.4696 48.4 61.3596 48.06 61.3596 cv
47.72 61.3596 47.45 61.4496 47.25 61.6296 cv
47.05 61.8096 46.96 62.0496 46.96 62.3496 cv
46.96 62.6596 47.05 62.9396 47.25 63.1896 cv
47.45 63.4396 47.77 63.6896 48.21 63.9496 cv
48.55 63.7496 48.79 63.5396 48.93 63.3196 cv
49.07 63.0996 49.15 62.8296 49.15 62.5096 cv
48.31 65.1196 mo
47.72 64.7196 li
47.42 64.9596 47.22 65.1996 47.1 65.4296 cv
46.98 65.6596 46.92 65.9396 46.92 66.2596 cv
46.92 66.7196 47.03 67.0696 47.26 67.3196 cv
47.49 67.5796 47.8 67.6996 48.19 67.6996 cv
48.51 67.6996 48.78 67.5996 48.98 67.3996 cv
49.18 67.1996 49.29 66.9296 49.29 66.5996 cv
49.29 66.2996 49.21 66.0396 49.06 65.8096 cv
48.9 65.5896 48.65 65.3596 48.31 65.1196 cv
f
57.6 41.2941 mo
54.1 41.2941 li
f
57.6 41.2941 mo
54.1 41.2941 li
@
42.04 44.7081 mo
39.28 44.7081 li
39.28 44.5581 li
39.64 44.5381 39.89 44.4781 40.03 44.3581 cv
40.16 44.2381 40.23 44.0381 40.23 43.7581 cv
40.23 39.2681 li
40.23 38.9481 40.13 38.7781 39.93 38.7781 cv
39.83 38.7781 39.68 38.8181 39.48 38.8981 cv
39.21 38.9981 li
39.21 38.8581 li
41 37.9481 li
41.09 37.9781 li
41.09 43.9481 li
41.09 44.1681 41.15 44.3281 41.29 44.4181 cv
41.42 44.5181 41.67 44.5581 42.04 44.5581 cv
42.04 44.7081 li
f
44.91 44.2781 mo
44.91 44.4281 44.85 44.5581 44.74 44.6581 cv
44.63 44.7581 44.5 44.8081 44.35 44.8081 cv
44.19 44.8081 44.06 44.7581 43.96 44.6581 cv
43.85 44.5581 43.8 44.4281 43.8 44.2681 cv
43.8 44.1181 43.85 43.9881 43.96 43.8781 cv
44.07 43.7681 44.2 43.7081 44.36 43.7081 cv
44.5 43.7081 44.63 43.7681 44.74 43.8781 cv
44.85 43.9981 44.91 44.1281 44.91 44.2781 cv
f
50.36 41.4081 mo
50.36 41.8581 50.31 42.2781 50.23 42.6781 cv
50.14 43.0781 50.01 43.4381 49.84 43.7681 cv
49.67 44.1081 49.44 44.3681 49.14 44.5581 cv
48.84 44.7381 48.49 44.8381 48.1 44.8381 cv
47.69 44.8381 47.33 44.7381 47.03 44.5381 cv
46.72 44.3381 46.48 44.0581 46.32 43.7081 cv
46.15 43.3681 46.03 42.9981 45.95 42.5981 cv
45.87 42.2081 45.84 41.7881 45.84 41.3481 cv
45.84 40.7281 45.91 40.1781 46.07 39.6781 cv
46.22 39.1781 46.47 38.7681 46.83 38.4381 cv
47.19 38.1181 47.62 37.9481 48.14 37.9481 cv
48.79 37.9481 49.32 38.2681 49.74 38.9081 cv
50.15 39.5481 50.36 40.3881 50.36 41.4081 cv
49.4 41.4581 mo
49.4 40.4081 49.28 39.6081 49.06 39.0481 cv
48.84 38.4881 48.51 38.2081 48.08 38.2081 cv
47.66 38.2081 47.35 38.4881 47.13 39.0481 cv
46.91 39.6081 46.8 40.3981 46.8 41.4181 cv
46.8 42.4481 46.91 43.2381 47.13 43.7781 cv
47.35 44.3181 47.67 44.5881 48.1 44.5881 cv
48.52 44.5881 48.84 44.3181 49.06 43.7781 cv
49.28 43.2381 49.4 42.4581 49.4 41.4581 cv
f
64.3291 156.557 mo
76.6267 135.276 li
76.7069 135.137 76.8254 135.031 76.9719 134.966 cv
89.2694 129.511 li
89.4929 129.45 li
101.758 128.124 li
114.013 125.723 li
126.3 122.93 li
126.364 122.919 li
138.636 121.226 li
150.884 118.672 li
163.158 115.267 li
163.306 115.241 li
175.547 114.378 li
187.754 111.642 li
200.018 107.624 li
200.085 107.606 li
213.114 104.644 li
213.446 106.107 li
200.452 109.06 li
188.187 113.078 li
188.118 113.097 li
175.82 115.854 li
175.709 115.87 li
163.487 116.732 li
151.262 120.124 li
151.214 120.136 li
138.917 122.699 li
138.866 122.708 li
126.601 124.4 li
114.335 127.188 li
114.313 127.193 li
102.015 129.602 li
101.952 129.612 li
89.7706 130.929 li
77.8033 136.238 li
65.2527 157.957 li
63.9539 157.206 li
64.3291 156.557 li
/1 
[/DeviceCMYK] /CSA add_res
.906126 .514977 .0511788 .00137331 cmyk
f
1.5 lw
2 lc
64.9785 156.932 mo
77.276 120.404 li
89.5736 108.279 li
101.871 101.34 li
114.169 98.506 li
126.466 96.3856 li
138.764 92.5304 li
151.061 81.0032 li
163.359 73.8324 li
175.656 67.5676 li
187.954 62.6136 li
200.251 58.1993 li
212.549 55.4814 li
0 .642573 1 0 cmyk
@
64.9785 156.932 mo
77.276 115.855 li
89.5736 102.13 li
101.871 94.7279 li
114.169 91.7593 li
126.466 88.4245 li
138.764 85.4753 li
151.061 81.3309 li
163.359 79.7309 li
175.656 78.5165 li
187.954 72.1746 li
200.251 70.2277 li
212.549 68.8977 li
.831846 .112703 1 .0183108 cmyk
@
64.9785 156.932 mo
77.276 120.944 li
89.5736 113.06 li
101.871 107.739 li
114.169 103.923 li
126.466 100.8 li
138.764 97.5807 li
151.061 91.2581 li
163.359 86.4391 li
175.656 76.6082 li
187.954 70.3627 li
200.251 65.9291 li
212.549 60.0692 li
.0993362 1 1 .024445 cmyk
@
.8 lw
0 lj
57.6 162.432 mo
57.6 41.472 li
1 /0 /CSD get_res sepcs
1 sep
@
219.927 162.432 mo
219.927 41.472 li
@
57.6 162.432 mo
219.927 162.432 li
@
57.6 41.472 mo
219.927 41.472 li
@
120.343 28.602 mo
120.343 29.982 li
120.718 29.442 121.033 29.082 121.288 28.872 cv
121.543 28.677 121.828 28.572 122.143 28.572 cv
122.398 28.572 122.593 28.647 122.743 28.782 cv
122.893 28.932 122.968 29.127 122.968 29.367 cv
122.968 29.577 122.908 29.742 122.803 29.862 cv
122.698 29.982 122.563 30.042 122.383 30.042 cv
122.188 30.042 121.993 29.952 121.783 29.742 cv
121.618 29.592 121.483 29.517 121.393 29.517 cv
121.183 29.517 120.943 29.667 120.703 29.952 cv
120.463 30.252 120.343 30.507 120.343 30.747 cv
120.343 34.122 li
120.343 34.557 120.418 34.842 120.598 34.992 cv
120.763 35.142 121.108 35.232 121.618 35.247 cv
121.618 35.472 li
118.018 35.472 li
118.018 35.247 li
118.498 35.157 118.783 35.067 118.903 34.947 cv
119.023 34.842 119.083 34.602 119.083 34.212 cv
119.083 30.462 li
119.083 30.132 119.038 29.907 118.963 29.772 cv
118.888 29.637 118.753 29.562 118.573 29.562 cv
118.408 29.562 118.228 29.592 118.048 29.622 cv
118.048 29.382 li
118.678 29.187 119.413 28.917 120.268 28.572 cv
120.343 28.602 li
f
129.058 33.012 mo
129.298 33.117 li
128.698 34.782 127.648 35.607 126.163 35.607 cv
125.278 35.607 124.588 35.307 124.078 34.692 cv
123.568 34.092 123.313 33.267 123.313 32.217 cv
123.313 31.152 123.598 30.282 124.168 29.592 cv
124.738 28.917 125.488 28.572 126.418 28.572 cv
127.318 28.572 128.008 28.917 128.503 29.607 cv
128.788 30.012 128.953 30.582 129.013 31.317 cv
124.393 31.317 li
124.423 31.947 124.483 32.427 124.573 32.757 cv
124.663 33.087 124.828 33.432 125.083 33.762 cv
125.503 34.317 126.058 34.587 126.748 34.587 cv
127.228 34.587 127.648 34.467 127.978 34.227 cv
128.308 33.987 128.668 33.582 129.058 33.012 cv
124.423 30.837 mo
127.483 30.837 li
127.393 30.207 127.243 29.772 127.033 29.502 cv
126.823 29.247 126.493 29.112 126.013 29.112 cv
125.593 29.112 125.233 29.262 124.963 29.562 cv
124.678 29.862 124.498 30.282 124.423 30.837 cv
f
136.228 34.482 mo
136.228 34.902 li
135.838 35.382 135.388 35.607 134.878 35.607 cv
134.308 35.607 133.978 35.247 133.918 34.527 cv
133.903 34.527 li
133.258 35.247 132.538 35.607 131.728 35.607 cv
131.248 35.607 130.873 35.472 130.588 35.202 cv
130.288 34.932 130.153 34.557 130.153 34.062 cv
130.153 33.372 130.498 32.787 131.203 32.307 cv
131.683 31.992 132.583 31.587 133.903 31.092 cv
133.903 30.282 li
133.903 29.832 133.783 29.502 133.573 29.277 cv
133.363 29.052 133.078 28.932 132.733 28.932 cv
132.433 28.932 132.178 29.007 131.983 29.157 cv
131.773 29.307 131.683 29.472 131.683 29.667 cv
131.683 29.757 131.698 29.862 131.728 29.967 cv
131.758 30.087 131.773 30.192 131.773 30.297 cv
131.773 30.447 131.698 30.597 131.563 30.717 cv
131.428 30.852 131.263 30.912 131.083 30.912 cv
130.903 30.912 130.753 30.852 130.633 30.717 cv
130.498 30.597 130.438 30.432 130.438 30.222 cv
130.438 29.742 130.693 29.352 131.203 29.022 cv
131.668 28.722 132.238 28.572 132.928 28.572 cv
133.738 28.572 134.323 28.797 134.698 29.247 cv
134.878 29.457 134.983 29.682 135.043 29.892 cv
135.088 30.102 135.118 30.447 135.118 30.912 cv
135.118 33.777 li
135.118 34.437 135.268 34.767 135.583 34.767 cv
135.778 34.767 135.988 34.677 136.228 34.482 cv
133.903 33.567 mo
133.903 31.452 li
132.973 31.782 132.343 32.112 131.983 32.442 cv
131.638 32.757 131.473 33.147 131.473 33.597 cv
131.473 33.987 131.563 34.272 131.758 34.467 cv
131.938 34.662 132.193 34.752 132.508 34.752 cv
132.838 34.752 133.123 34.677 133.378 34.512 cv
133.588 34.362 133.723 34.227 133.798 34.092 cv
133.858 33.972 133.903 33.792 133.903 33.567 cv
f
143.623 34.842 mo
141.418 35.607 li
141.358 35.562 li
141.358 34.617 li
140.878 35.277 140.233 35.607 139.438 35.607 cv
138.598 35.607 137.938 35.322 137.428 34.722 cv
136.918 34.137 136.663 33.357 136.663 32.397 cv
136.663 31.347 136.963 30.447 137.578 29.697 cv
138.178 28.947 138.913 28.572 139.783 28.572 cv
140.323 28.572 140.848 28.797 141.358 29.217 cv
141.358 26.877 li
141.358 26.577 141.313 26.367 141.223 26.262 cv
141.133 26.172 140.938 26.112 140.668 26.112 cv
140.518 26.112 140.413 26.127 140.338 26.127 cv
140.338 25.887 li
141.238 25.647 141.973 25.437 142.543 25.227 cv
142.618 25.257 li
142.618 33.762 li
142.618 34.122 142.648 34.347 142.738 34.452 cv
142.828 34.572 143.008 34.617 143.278 34.617 cv
143.338 34.617 143.443 34.617 143.623 34.602 cv
143.623 34.842 li
141.358 33.942 mo
141.358 30.492 li
141.358 30.102 141.193 29.742 140.893 29.442 cv
140.593 29.142 140.233 28.992 139.828 28.992 cv
139.258 28.992 138.793 29.247 138.463 29.757 cv
138.118 30.267 137.953 30.957 137.953 31.797 cv
137.953 32.727 138.133 33.462 138.508 34.017 cv
138.883 34.572 139.393 34.842 140.023 34.842 cv
140.488 34.842 140.863 34.692 141.133 34.362 cv
141.283 34.197 141.358 34.062 141.358 33.942 cv
f
149.878 33.012 mo
150.118 33.117 li
149.518 34.782 148.468 35.607 146.983 35.607 cv
146.098 35.607 145.408 35.307 144.898 34.692 cv
144.388 34.092 144.133 33.267 144.133 32.217 cv
144.133 31.152 144.418 30.282 144.988 29.592 cv
145.558 28.917 146.308 28.572 147.238 28.572 cv
148.138 28.572 148.828 28.917 149.323 29.607 cv
149.608 30.012 149.773 30.582 149.833 31.317 cv
145.213 31.317 li
145.243 31.947 145.303 32.427 145.393 32.757 cv
145.483 33.087 145.648 33.432 145.903 33.762 cv
146.323 34.317 146.878 34.587 147.568 34.587 cv
148.048 34.587 148.468 34.467 148.798 34.227 cv
149.128 33.987 149.488 33.582 149.878 33.012 cv
145.243 30.837 mo
148.303 30.837 li
148.213 30.207 148.063 29.772 147.853 29.502 cv
147.643 29.247 147.313 29.112 146.833 29.112 cv
146.413 29.112 146.053 29.262 145.783 29.562 cv
145.498 29.862 145.318 30.282 145.243 30.837 cv
f
154.273 35.472 mo
150.733 35.472 li
150.733 35.247 li
151.198 35.217 151.513 35.112 151.663 34.962 cv
151.813 34.812 151.888 34.512 151.888 34.092 cv
151.888 27.057 li
151.888 26.697 151.843 26.457 151.753 26.307 cv
151.663 26.172 151.498 26.097 151.258 26.097 cv
151.048 26.097 150.853 26.112 150.703 26.127 cv
150.703 25.887 li
151.648 25.662 152.443 25.437 153.073 25.227 cv
153.148 25.287 li
153.148 34.167 li
153.148 34.587 153.208 34.872 153.358 35.007 cv
153.493 35.142 153.793 35.217 154.273 35.247 cv
154.273 35.472 li
f
154.903 28.722 mo
156.133 28.722 li
156.133 28.122 156.178 27.657 156.253 27.327 cv
156.313 26.997 156.448 26.652 156.658 26.307 cv
157.078 25.587 157.783 25.227 158.773 25.227 cv
159.223 25.227 159.583 25.317 159.883 25.497 cv
160.183 25.677 160.333 25.887 160.333 26.157 cv
160.333 26.337 160.273 26.472 160.153 26.592 cv
160.033 26.712 159.883 26.772 159.703 26.772 cv
159.463 26.772 159.238 26.592 159.028 26.232 cv
158.788 25.842 158.518 25.647 158.233 25.647 cv
157.663 25.647 157.393 26.097 157.393 26.982 cv
157.393 28.722 li
159.223 28.722 li
159.223 29.202 li
157.393 29.202 li
157.393 33.912 li
157.393 34.482 157.468 34.842 157.633 34.992 cv
157.783 35.142 158.173 35.232 158.788 35.247 cv
158.788 35.472 li
154.888 35.472 li
154.888 35.247 li
155.428 35.217 155.758 35.127 155.908 34.977 cv
156.058 34.827 156.133 34.467 156.133 33.912 cv
156.133 29.202 li
154.903 29.202 li
154.903 28.722 li
f
gsave
212.927 156.932 mo
157.615 156.932 li
157.025 156.93 156.677 156.788 156.468 156.578 cv
156.259 156.369 156.117 156.022 156.115 155.432 cv
156.115 118.778 li
163.487 116.732 li
175.709 115.87 li
175.82 115.854 li
188.118 113.097 li
188.187 113.078 li
200.452 109.06 li
213.446 106.107 li
213.114 104.644 li
200.085 107.606 li
200.018 107.624 li
187.754 111.642 li
175.547 114.378 li
163.306 115.241 li
163.158 115.267 li
156.115 117.221 li
156.115 99.7445 li
156.117 99.1546 156.259 98.8072 156.468 98.5981 cv
156.677 98.3886 157.025 98.2463 157.615 98.2445 cv
212.927 98.2445 li
213.517 98.2463 213.865 98.3886 214.074 98.5981 cv
214.283 98.8072 214.425 99.1546 214.427 99.7445 cv
214.427 155.432 li
214.425 156.022 214.283 156.369 214.074 156.578 cv
213.865 156.788 213.517 156.93 212.927 156.932 cv
clp
156.115 98.2445 mo
214.427 98.2445 li
214.427 156.932 li
156.115 156.932 li
cp
/1 
<<
/Name (Black)
/CSA /1 get_csa_by_name
/MappedCSA /1 /CSA get_res
/TintMethod /Subtractive
/TintProc null
/NComponents 4 
/Components [ 0 0 0 1 ] 
>>
/CSD add_res
1 /1 /CSD get_res sepcs
0 sep
f
grestore
156.115 118.778 mo
156.115 117.221 li
163.158 115.267 li
163.306 115.241 li
175.547 114.378 li
187.754 111.642 li
200.018 107.624 li
200.085 107.606 li
213.114 104.644 li
213.446 106.107 li
200.452 109.06 li
188.187 113.078 li
188.118 113.097 li
175.82 115.854 li
175.709 115.87 li
163.487 116.732 li
156.115 118.778 li
.180392 .101961 .0117647 0 cmyk
f
212.938 157.932 mo
212.934 157.932 212.931 157.932 212.927 157.932 cv
157.615 157.932 li
157.611 157.932 157.608 157.932 157.604 157.932 cv
156.865 157.932 156.217 157.741 155.761 157.286 cv
155.304 156.828 155.113 156.175 155.115 155.432 cv
155.115 119.055 li
156.115 118.778 li
156.115 155.432 li
156.117 156.022 156.259 156.369 156.468 156.578 cv
156.677 156.788 157.025 156.93 157.615 156.932 cv
157.615 156.932 li
212.927 156.932 li
213.517 156.93 213.865 156.788 214.074 156.578 cv
214.283 156.369 214.425 156.022 214.427 155.432 cv
214.427 99.7445 li
214.425 99.1546 214.283 98.8072 214.074 98.5981 cv
213.865 98.3886 213.517 98.2463 212.927 98.2445 cv
157.615 98.2445 li
157.025 98.2463 156.677 98.3886 156.468 98.5981 cv
156.259 98.8072 156.117 99.1546 156.115 99.7445 cv
156.115 117.221 li
155.115 117.498 li
155.115 99.7445 li
155.113 99.001 155.304 98.3485 155.761 97.8909 cv
156.217 97.4358 156.865 97.2445 157.605 97.2445 cv
157.608 97.2445 157.611 97.2445 157.615 97.2445 cv
212.927 97.2445 li
212.931 97.2445 212.934 97.2445 212.937 97.2445 cv
213.677 97.2445 214.325 97.4358 214.781 97.8909 cv
215.238 98.3484 215.429 99.001 215.427 99.7445 cv
215.427 155.432 li
215.429 156.175 215.238 156.828 214.781 157.286 cv
214.326 157.74 213.677 157.932 212.938 157.932 cv
1 /1 /CSD get_res sepcs
.160784 sep
f
155.115 119.055 mo
155.115 117.498 li
156.115 117.221 li
156.115 118.778 li
155.115 119.055 li
.180392 .101961 .0117647 .160784 cmyk
f
1.5 lw
1 lj
159.615 105.245 mo
179.615 105.245 li
.906126 .514977 .0511788 .00137331 cmyk
@
194.495 105.435 mo
194.495 106.465 194.185 107.295 193.585 107.925 cv
192.975 108.565 192.185 108.875 191.225 108.875 cv
190.245 108.875 189.455 108.565 188.855 107.925 cv
188.255 107.285 187.955 106.445 187.955 105.405 cv
187.955 104.395 188.255 103.575 188.855 102.935 cv
189.455 102.305 190.245 101.985 191.225 101.985 cv
192.195 101.985 192.985 102.315 193.585 102.965 cv
194.185 103.615 194.495 104.435 194.495 105.435 cv
193.355 105.375 mo
193.355 104.815 193.275 104.305 193.115 103.855 cv
192.955 103.405 192.725 103.055 192.445 102.815 cv
192.065 102.505 191.655 102.345 191.215 102.345 cv
190.645 102.345 190.165 102.575 189.785 103.015 cv
189.565 103.255 189.395 103.605 189.275 104.045 cv
189.155 104.485 189.095 104.945 189.095 105.425 cv
189.095 106.645 189.395 107.525 189.995 108.075 cv
190.315 108.375 190.735 108.525 191.235 108.525 cv
191.755 108.525 192.185 108.365 192.525 108.045 cv
193.075 107.515 193.355 106.625 193.355 105.375 cv
1 /0 /CSD get_res sepcs
1 sep
f
196.435 104.165 mo
196.435 105.085 li
196.685 104.725 196.895 104.485 197.065 104.345 cv
197.235 104.215 197.425 104.145 197.635 104.145 cv
197.805 104.145 197.935 104.195 198.035 104.285 cv
198.135 104.385 198.185 104.515 198.185 104.675 cv
198.185 104.815 198.145 104.925 198.075 105.005 cv
198.005 105.085 197.915 105.125 197.795 105.125 cv
197.665 105.125 197.535 105.065 197.395 104.925 cv
197.285 104.825 197.195 104.775 197.135 104.775 cv
196.995 104.775 196.835 104.875 196.675 105.065 cv
196.515 105.265 196.435 105.435 196.435 105.595 cv
196.435 107.845 li
196.435 108.135 196.485 108.325 196.605 108.425 cv
196.715 108.525 196.945 108.585 197.285 108.595 cv
197.285 108.745 li
194.885 108.745 li
194.885 108.595 li
195.205 108.535 195.395 108.475 195.475 108.395 cv
195.555 108.325 195.595 108.165 195.595 107.905 cv
195.595 105.405 li
195.595 105.185 195.565 105.035 195.515 104.945 cv
195.465 104.855 195.375 104.805 195.255 104.805 cv
195.145 104.805 195.025 104.825 194.905 104.845 cv
194.905 104.685 li
195.325 104.555 195.815 104.375 196.385 104.145 cv
196.435 104.165 li
f
203.075 108.325 mo
201.605 108.835 li
201.565 108.805 li
201.565 108.175 li
201.245 108.615 200.815 108.835 200.285 108.835 cv
199.725 108.835 199.285 108.645 198.945 108.245 cv
198.605 107.855 198.435 107.335 198.435 106.695 cv
198.435 105.995 198.635 105.395 199.045 104.895 cv
199.445 104.395 199.935 104.145 200.515 104.145 cv
200.875 104.145 201.225 104.295 201.565 104.575 cv
201.565 103.015 li
201.565 102.815 201.535 102.675 201.475 102.605 cv
201.415 102.545 201.285 102.505 201.105 102.505 cv
201.005 102.505 200.935 102.515 200.885 102.515 cv
200.885 102.355 li
201.485 102.195 201.975 102.055 202.355 101.915 cv
202.405 101.935 li
202.405 107.605 li
202.405 107.845 202.425 107.995 202.485 108.065 cv
202.545 108.145 202.665 108.175 202.845 108.175 cv
202.885 108.175 202.955 108.175 203.075 108.165 cv
203.075 108.325 li
201.565 107.725 mo
201.565 105.425 li
201.565 105.165 201.455 104.925 201.255 104.725 cv
201.055 104.525 200.815 104.425 200.545 104.425 cv
200.165 104.425 199.855 104.595 199.635 104.935 cv
199.405 105.275 199.295 105.735 199.295 106.295 cv
199.295 106.915 199.415 107.405 199.665 107.775 cv
199.915 108.145 200.255 108.325 200.675 108.325 cv
200.985 108.325 201.235 108.225 201.415 108.005 cv
201.515 107.895 201.565 107.805 201.565 107.725 cv
f
207.245 107.105 mo
207.405 107.175 li
207.005 108.285 206.305 108.835 205.315 108.835 cv
204.725 108.835 204.265 108.635 203.925 108.225 cv
203.585 107.825 203.415 107.275 203.415 106.575 cv
203.415 105.865 203.605 105.285 203.985 104.825 cv
204.365 104.375 204.865 104.145 205.485 104.145 cv
206.085 104.145 206.545 104.375 206.875 104.835 cv
207.065 105.105 207.175 105.485 207.215 105.975 cv
204.135 105.975 li
204.155 106.395 204.195 106.715 204.255 106.935 cv
204.315 107.155 204.425 107.385 204.595 107.605 cv
204.875 107.975 205.245 108.155 205.705 108.155 cv
206.025 108.155 206.305 108.075 206.525 107.915 cv
206.745 107.755 206.985 107.485 207.245 107.105 cv
204.155 105.655 mo
206.195 105.655 li
206.135 105.235 206.035 104.945 205.895 104.765 cv
205.755 104.595 205.535 104.505 205.215 104.505 cv
204.935 104.505 204.695 104.605 204.515 104.805 cv
204.325 105.005 204.205 105.285 204.155 105.655 cv
f
209.205 104.165 mo
209.205 105.085 li
209.455 104.725 209.665 104.485 209.835 104.345 cv
210.005 104.215 210.195 104.145 210.405 104.145 cv
210.575 104.145 210.705 104.195 210.805 104.285 cv
210.905 104.385 210.955 104.515 210.955 104.675 cv
210.955 104.815 210.915 104.925 210.845 105.005 cv
210.775 105.085 210.685 105.125 210.565 105.125 cv
210.435 105.125 210.305 105.065 210.165 104.925 cv
210.055 104.825 209.965 104.775 209.905 104.775 cv
209.765 104.775 209.605 104.875 209.445 105.065 cv
209.285 105.265 209.205 105.435 209.205 105.595 cv
209.205 107.845 li
209.205 108.135 209.255 108.325 209.375 108.425 cv
209.485 108.525 209.715 108.585 210.055 108.595 cv
210.055 108.745 li
207.655 108.745 li
207.655 108.595 li
207.975 108.535 208.165 108.475 208.245 108.395 cv
208.325 108.325 208.365 108.165 208.365 107.905 cv
208.365 105.405 li
208.365 105.185 208.335 105.035 208.285 104.945 cv
208.235 104.855 208.145 104.805 208.025 104.805 cv
207.915 104.805 207.795 104.825 207.675 104.845 cv
207.675 104.685 li
208.095 104.555 208.585 104.375 209.155 104.145 cv
209.205 104.165 li
f
159.615 119.416 mo
179.615 119.416 li
0 .642573 1 0 cmyk
@
193.755 121.606 mo
193.945 121.786 li
193.345 122.626 192.435 123.046 191.215 123.046 cv
190.245 123.046 189.455 122.756 188.855 122.166 cv
188.215 121.546 187.895 120.706 187.895 119.666 cv
187.895 118.696 188.195 117.876 188.795 117.196 cv
189.415 116.506 190.225 116.156 191.225 116.156 cv
191.645 116.156 192.045 116.206 192.415 116.306 cv
192.835 116.426 193.065 116.486 193.105 116.486 cv
193.325 116.486 193.465 116.376 193.525 116.156 cv
193.725 116.156 li
193.815 118.426 li
193.585 118.426 li
193.475 117.946 193.305 117.576 193.065 117.316 cv
192.585 116.816 192.055 116.556 191.455 116.556 cv
190.715 116.556 190.125 116.836 189.695 117.376 cv
189.265 117.916 189.055 118.626 189.055 119.506 cv
189.055 120.586 189.295 121.376 189.775 121.896 cv
190.215 122.376 190.815 122.616 191.555 122.616 cv
191.995 122.616 192.375 122.546 192.695 122.386 cv
193.015 122.236 193.365 121.976 193.755 121.606 cv
1 /0 /CSD get_res sepcs
1 sep
f
198.975 118.286 mo
198.725 118.286 li
198.605 117.876 198.475 117.566 198.315 117.346 cv
197.905 116.826 197.425 116.566 196.865 116.566 cv
196.555 116.566 196.305 116.656 196.125 116.836 cv
195.945 117.016 195.855 117.236 195.855 117.516 cv
195.855 117.656 195.885 117.786 195.955 117.906 cv
196.015 118.036 196.085 118.146 196.165 118.236 cv
196.245 118.326 196.375 118.436 196.575 118.566 cv
196.765 118.706 196.925 118.806 197.045 118.876 cv
197.165 118.946 197.365 119.066 197.645 119.226 cv
198.185 119.546 198.575 119.856 198.825 120.166 cv
199.065 120.476 199.195 120.816 199.195 121.186 cv
199.195 121.746 198.995 122.196 198.615 122.536 cv
198.225 122.876 197.735 123.046 197.155 123.046 cv
196.715 123.046 196.325 122.966 195.975 122.826 cv
195.795 122.756 195.645 122.716 195.505 122.716 cv
195.305 122.806 li
195.245 122.866 195.225 122.936 195.225 123.036 cv
195.005 123.036 li
194.715 120.926 li
194.935 120.926 li
195.375 122.106 196.065 122.696 196.995 122.696 cv
197.345 122.696 197.635 122.596 197.855 122.386 cv
198.075 122.176 198.185 121.906 198.185 121.576 cv
198.185 121.266 198.085 121.006 197.895 120.786 cv
197.575 120.446 197.015 120.056 196.215 119.626 cv
195.395 119.196 194.995 118.626 194.995 117.906 cv
194.995 117.376 195.155 116.956 195.485 116.636 cv
195.805 116.316 196.225 116.156 196.735 116.156 cv
197.085 116.156 197.435 116.236 197.785 116.376 cv
197.965 116.456 198.105 116.496 198.225 116.496 cv
198.395 116.496 198.505 116.386 198.545 116.156 cv
198.755 116.156 li
198.975 118.286 li
f
159.615 133.588 mo
179.615 133.588 li
.831846 .112703 1 .0183108 cmyk
@
193.585 135.398 mo
193.125 137.088 li
187.735 137.088 li
187.735 136.898 li
188.115 136.878 188.355 136.808 188.455 136.698 cv
188.555 136.588 188.605 136.338 188.605 135.948 cv
188.605 131.588 li
188.605 131.218 188.545 130.978 188.445 130.858 cv
188.345 130.748 188.105 130.678 187.735 130.658 cv
187.735 130.468 li
193.035 130.468 li
193.075 131.898 li
192.825 131.898 li
192.745 131.458 192.615 131.168 192.435 131.038 cv
192.245 130.918 191.865 130.848 191.285 130.848 cv
189.975 130.848 li
189.825 130.848 189.725 130.878 189.685 130.918 cv
189.645 130.958 189.625 131.058 189.625 131.208 cv
189.625 133.408 li
191.135 133.408 li
191.555 133.408 191.825 133.348 191.965 133.228 cv
192.105 133.108 192.205 132.848 192.265 132.448 cv
192.495 132.448 li
192.495 134.788 li
192.265 134.788 li
192.205 134.368 192.105 134.108 191.975 133.988 cv
191.835 133.878 191.555 133.818 191.135 133.818 cv
189.625 133.818 li
189.625 136.248 li
189.625 136.448 189.695 136.578 189.835 136.638 cv
189.975 136.698 190.235 136.718 190.635 136.718 cv
190.995 136.718 li
191.705 136.718 192.215 136.638 192.515 136.458 cv
192.815 136.288 193.075 135.938 193.305 135.398 cv
193.585 135.398 li
1 /0 /CSD get_res sepcs
1 sep
f
200.775 130.468 mo
200.775 130.658 li
200.365 130.698 200.105 130.798 199.995 130.958 cv
199.885 131.118 199.835 131.438 199.835 131.928 cv
199.835 134.478 li
199.835 134.998 199.795 135.398 199.725 135.688 cv
199.645 135.988 199.505 136.258 199.295 136.498 cv
198.865 136.978 198.195 137.218 197.275 137.218 cv
196.545 137.218 195.975 137.068 195.575 136.768 cv
195.035 136.368 194.765 135.648 194.765 134.598 cv
194.765 131.498 li
194.765 131.168 194.705 130.948 194.605 130.848 cv
194.505 130.748 194.255 130.688 193.865 130.658 cv
193.865 130.468 li
196.695 130.468 li
196.695 130.658 li
196.295 130.698 196.035 130.768 195.935 130.878 cv
195.835 130.988 195.785 131.228 195.785 131.598 cv
195.785 134.718 li
195.785 135.158 195.805 135.488 195.865 135.718 cv
195.915 135.958 196.035 136.158 196.225 136.338 cv
196.535 136.638 196.965 136.788 197.505 136.788 cv
198.175 136.788 198.685 136.598 199.025 136.198 cv
199.175 136.018 199.275 135.808 199.325 135.588 cv
199.365 135.368 199.395 135.028 199.395 134.588 cv
199.395 131.958 li
199.395 131.438 199.335 131.098 199.225 130.938 cv
199.105 130.778 198.855 130.688 198.455 130.658 cv
198.455 130.468 li
200.775 130.468 li
f
159.615 147.76 mo
179.615 147.76 li
.0993362 1 1 .024445 cmyk
@
191.155 144.64 mo
191.155 144.83 li
190.745 144.87 190.485 144.94 190.385 145.04 cv
190.285 145.14 190.235 145.39 190.235 145.77 cv
190.235 149.41 li
190.235 150.73 189.675 151.39 188.565 151.39 cv
188.255 151.39 188.015 151.33 187.835 151.21 cv
187.655 151.09 187.565 150.91 187.565 150.68 cv
187.565 150.55 187.615 150.43 187.705 150.32 cv
187.795 150.22 187.905 150.16 188.045 150.16 cv
188.265 150.16 188.425 150.3 188.535 150.58 cv
188.585 150.72 li
188.625 150.85 li
188.675 150.94 li
188.745 151 li
188.845 151.02 li
188.985 151.02 189.085 150.97 189.135 150.87 cv
189.185 150.77 189.215 150.58 189.215 150.32 cv
189.215 145.76 li
189.215 145.37 189.165 145.13 189.065 145.03 cv
188.965 144.93 188.705 144.87 188.285 144.83 cv
188.285 144.64 li
191.155 144.64 li
1 /0 /CSD get_res sepcs
1 sep
f
194.495 151.26 mo
191.525 151.26 li
191.525 151.07 li
191.945 151.06 192.205 151 192.325 150.89 cv
192.435 150.78 192.495 150.53 192.495 150.14 cv
192.495 145.75 li
192.495 145.37 192.435 145.12 192.335 145.02 cv
192.225 144.92 191.955 144.86 191.525 144.83 cv
191.525 144.64 li
194.495 144.64 li
194.495 144.83 li
194.075 144.85 193.805 144.92 193.685 145.02 cv
193.565 145.13 193.515 145.37 193.515 145.75 cv
193.515 150.14 li
193.515 150.52 193.575 150.76 193.695 150.88 cv
193.815 151 194.075 151.06 194.495 151.07 cv
194.495 151.26 li
f
252.393 162.432 mo
414.72 162.432 li
414.72 41.472 li
252.393 41.472 li
252.393 162.432 li
1 /0 /CSD get_res sepcs
0 sep
f
259.771 162.432 mo
259.771 165.932 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
259.771 162.432 mo
259.771 165.932 li
@
284.366 162.432 mo
284.366 165.932 li
f
284.366 162.432 mo
284.366 165.932 li
@
308.961 162.432 mo
308.961 165.932 li
f
308.961 162.432 mo
308.961 165.932 li
@
333.556 162.432 mo
333.556 165.932 li
f
333.556 162.432 mo
333.556 165.932 li
@
358.151 162.432 mo
358.151 165.932 li
f
358.151 162.432 mo
358.151 165.932 li
@
382.746 162.432 mo
382.746 165.932 li
f
382.746 162.432 mo
382.746 165.932 li
@
407.341 162.432 mo
407.341 165.932 li
f
407.341 162.432 mo
407.341 165.932 li
@
252.393 156.952 mo
248.893 156.952 li
f
252.393 156.952 mo
248.893 156.952 li
@
252.393 133.82 mo
248.893 133.82 li
f
252.393 133.82 mo
248.893 133.82 li
@
252.393 110.689 mo
248.893 110.689 li
f
252.393 110.689 mo
248.893 110.689 li
@
252.393 87.5571 mo
248.893 87.5571 li
f
252.393 87.5571 mo
248.893 87.5571 li
@
252.393 64.4256 mo
248.893 64.4256 li
f
252.393 64.4256 mo
248.893 64.4256 li
@
252.393 41.2941 mo
248.893 41.2941 li
f
252.393 41.2941 mo
248.893 41.2941 li
@
1.5 lw
2 lc
259.771 156.934 mo
272.069 103.731 li
284.366 84.7457 li
296.664 83.2511 li
308.961 83.1265 li
321.259 83.1087 li
333.556 82.0589 li
345.854 82.0411 li
358.151 81.1158 li
370.449 81.0981 li
382.746 71.5252 li
395.044 67.6106 li
407.341 67.5928 li
.906126 .514977 .0511788 .00137331 cmyk
@
259.771 156.934 mo
272.069 103.838 li
284.366 82.7707 li
296.664 76.0625 li
308.961 73.4825 li
321.259 64.6569 li
333.556 62.753 li
345.854 59.3544 li
358.151 58.8562 li
370.449 56.4363 li
382.746 50.4399 li
395.044 48.7318 li
407.341 46.9702 li
0 .642573 1 0 cmyk
@
259.771 156.934 mo
272.069 99.7456 li
284.366 83.5358 li
296.664 81.6319 li
308.961 72.8775 li
321.259 71.0981 li
333.556 61.9167 li
345.854 61.027 li
358.151 57.9843 li
370.449 55.2441 li
382.746 54.568 li
395.044 52.3438 li
407.341 50.3154 li
.831846 .112703 1 .0183108 cmyk
@
259.771 156.934 mo
272.069 103.838 li
284.366 84.7457 li
296.664 76.2227 li
308.961 74.5501 li
321.259 64.8704 li
333.556 64.1409 li
345.854 61.116 li
358.151 58.0021 li
370.449 57.3616 li
382.746 56.0627 li
395.044 54.2121 li
407.341 53.7317 li
.0993362 1 1 .024445 cmyk
@
.8 lw
0 lj
252.393 162.432 mo
252.393 41.472 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 162.432 mo
414.72 41.472 li
@
252.393 162.432 mo
414.72 162.432 li
@
252.393 41.472 mo
414.72 41.472 li
@
312.207 28.722 mo
313.437 28.722 li
313.437 28.122 313.482 27.657 313.557 27.327 cv
313.617 26.997 313.752 26.652 313.962 26.307 cv
314.382 25.587 315.087 25.227 316.077 25.227 cv
316.527 25.227 316.887 25.317 317.187 25.497 cv
317.487 25.677 317.637 25.887 317.637 26.157 cv
317.637 26.337 317.577 26.472 317.457 26.592 cv
317.337 26.712 317.187 26.772 317.007 26.772 cv
316.767 26.772 316.542 26.592 316.332 26.232 cv
316.092 25.842 315.822 25.647 315.537 25.647 cv
314.967 25.647 314.697 26.097 314.697 26.982 cv
314.697 28.722 li
316.527 28.722 li
316.527 29.202 li
314.697 29.202 li
314.697 33.912 li
314.697 34.482 314.772 34.842 314.937 34.992 cv
315.087 35.142 315.477 35.232 316.092 35.247 cv
316.092 35.472 li
312.192 35.472 li
312.192 35.247 li
312.732 35.217 313.062 35.127 313.212 34.977 cv
313.362 34.827 313.437 34.467 313.437 33.912 cv
313.437 29.202 li
312.207 29.202 li
312.207 28.722 li
f
317.202 28.722 mo
318.432 28.722 li
318.432 28.122 318.477 27.657 318.552 27.327 cv
318.612 26.997 318.747 26.652 318.957 26.307 cv
319.377 25.587 320.082 25.227 321.072 25.227 cv
321.522 25.227 321.882 25.317 322.182 25.497 cv
322.482 25.677 322.632 25.887 322.632 26.157 cv
322.632 26.337 322.572 26.472 322.452 26.592 cv
322.332 26.712 322.182 26.772 322.002 26.772 cv
321.762 26.772 321.537 26.592 321.327 26.232 cv
321.087 25.842 320.817 25.647 320.532 25.647 cv
319.962 25.647 319.692 26.097 319.692 26.982 cv
319.692 28.722 li
321.522 28.722 li
321.522 29.202 li
319.692 29.202 li
319.692 33.912 li
319.692 34.482 319.767 34.842 319.932 34.992 cv
320.082 35.142 320.472 35.232 321.087 35.247 cv
321.087 35.472 li
317.187 35.472 li
317.187 35.247 li
317.727 35.217 318.057 35.127 318.207 34.977 cv
318.357 34.827 318.432 34.467 318.432 33.912 cv
318.432 29.202 li
317.202 29.202 li
317.202 28.722 li
f
333.507 35.472 mo
330.237 35.472 li
330.237 35.247 li
330.657 35.217 330.912 35.127 331.032 34.992 cv
331.152 34.857 331.212 34.572 331.212 34.122 cv
331.212 31.032 li
331.212 30.432 331.122 30.012 330.942 29.742 cv
330.762 29.487 330.477 29.352 330.057 29.352 cv
329.697 29.352 329.397 29.427 329.157 29.562 cv
328.917 29.712 328.677 29.937 328.452 30.267 cv
328.452 34.047 li
328.452 34.527 328.512 34.857 328.662 35.007 cv
328.812 35.157 329.097 35.247 329.532 35.247 cv
329.532 35.472 li
326.172 35.472 li
326.172 35.247 li
326.607 35.217 326.892 35.157 327.012 35.037 cv
327.132 34.917 327.192 34.632 327.192 34.182 cv
327.192 31.017 li
327.192 29.907 326.862 29.352 326.217 29.352 cv
325.932 29.352 325.632 29.427 325.317 29.547 cv
325.002 29.667 324.777 29.817 324.627 29.997 cv
324.492 30.147 324.432 30.237 324.432 30.252 cv
324.432 34.422 li
324.432 34.752 324.492 34.962 324.642 35.067 cv
324.777 35.172 325.047 35.232 325.452 35.247 cv
325.452 35.472 li
322.122 35.472 li
322.122 35.247 li
322.542 35.247 322.812 35.172 322.962 35.022 cv
323.097 34.872 323.172 34.587 323.172 34.152 cv
323.172 30.432 li
323.172 30.072 323.127 29.817 323.052 29.667 cv
322.962 29.517 322.827 29.442 322.647 29.442 cv
322.497 29.442 322.332 29.472 322.167 29.502 cv
322.167 29.247 li
322.842 29.067 323.532 28.842 324.252 28.572 cv
324.372 28.617 li
324.372 29.727 li
324.402 29.727 li
324.852 29.262 325.242 28.947 325.587 28.797 cv
325.932 28.647 326.307 28.572 326.697 28.572 cv
327.477 28.572 328.017 28.992 328.287 29.832 cv
329.067 28.992 329.877 28.572 330.732 28.572 cv
331.887 28.572 332.472 29.472 332.472 31.272 cv
332.472 34.317 li
332.472 34.647 332.517 34.887 332.622 35.007 cv
332.712 35.127 332.877 35.202 333.117 35.217 cv
333.507 35.247 li
333.507 35.472 li
f
335.937 28.602 mo
335.937 29.757 li
336.567 28.977 337.287 28.572 338.097 28.572 cv
338.817 28.572 339.417 28.872 339.897 29.472 cv
340.362 30.072 340.602 30.837 340.602 31.767 cv
340.602 32.862 340.287 33.777 339.687 34.512 cv
339.087 35.247 338.337 35.607 337.452 35.607 cv
337.137 35.607 336.867 35.562 336.657 35.472 cv
336.447 35.397 336.207 35.232 335.937 34.977 cv
335.937 37.317 li
335.937 37.782 336.012 38.082 336.177 38.217 cv
336.327 38.352 336.687 38.427 337.257 38.442 cv
337.257 38.712 li
333.627 38.712 li
333.627 38.457 li
334.062 38.412 334.347 38.322 334.482 38.202 cv
334.602 38.067 334.677 37.812 334.677 37.422 cv
334.677 30.417 li
334.677 30.072 334.632 29.847 334.557 29.727 cv
334.467 29.622 334.302 29.562 334.062 29.562 cv
333.897 29.562 333.777 29.577 333.687 29.577 cv
333.687 29.337 li
334.377 29.127 335.097 28.872 335.847 28.572 cv
335.937 28.602 li
335.937 30.462 mo
335.937 34.152 li
335.937 34.377 336.102 34.602 336.447 34.812 cv
336.792 35.037 337.137 35.142 337.497 35.142 cv
338.037 35.142 338.472 34.887 338.802 34.377 cv
339.132 33.867 339.312 33.207 339.312 32.367 cv
339.312 31.497 339.132 30.792 338.802 30.267 cv
338.472 29.742 338.022 29.472 337.467 29.472 cv
337.107 29.472 336.762 29.592 336.432 29.802 cv
336.102 30.027 335.937 30.252 335.937 30.462 cv
f
347.172 33.012 mo
347.412 33.117 li
346.812 34.782 345.762 35.607 344.277 35.607 cv
343.392 35.607 342.702 35.307 342.192 34.692 cv
341.682 34.092 341.427 33.267 341.427 32.217 cv
341.427 31.152 341.712 30.282 342.282 29.592 cv
342.852 28.917 343.602 28.572 344.532 28.572 cv
345.432 28.572 346.122 28.917 346.617 29.607 cv
346.902 30.012 347.067 30.582 347.127 31.317 cv
342.507 31.317 li
342.537 31.947 342.597 32.427 342.687 32.757 cv
342.777 33.087 342.942 33.432 343.197 33.762 cv
343.617 34.317 344.172 34.587 344.862 34.587 cv
345.342 34.587 345.762 34.467 346.092 34.227 cv
346.422 33.987 346.782 33.582 347.172 33.012 cv
342.537 30.837 mo
345.597 30.837 li
345.507 30.207 345.357 29.772 345.147 29.502 cv
344.937 29.247 344.607 29.112 344.127 29.112 cv
343.707 29.112 343.347 29.262 343.077 29.562 cv
342.792 29.862 342.612 30.282 342.537 30.837 cv
f
354.762 29.652 mo
353.517 29.652 li
353.697 30.087 353.802 30.507 353.802 30.912 cv
353.802 31.692 353.532 32.262 353.022 32.652 cv
352.497 33.042 351.972 33.237 351.462 33.237 cv
351.342 33.237 351.162 33.222 350.892 33.192 cv
350.607 33.162 li
350.397 33.222 350.202 33.357 350.007 33.567 cv
349.797 33.777 349.707 33.957 349.707 34.107 cv
349.707 34.347 350.097 34.482 350.877 34.512 cv
352.812 34.602 li
353.352 34.632 353.802 34.782 354.132 35.067 cv
354.462 35.352 354.627 35.712 354.627 36.192 cv
354.627 36.762 354.327 37.287 353.727 37.767 cv
352.887 38.397 351.897 38.727 350.727 38.727 cv
350.007 38.727 349.392 38.577 348.882 38.292 cv
348.372 38.007 348.132 37.662 348.132 37.272 cv
348.132 36.987 348.237 36.702 348.462 36.432 cv
348.672 36.162 349.062 35.832 349.602 35.457 cv
349.272 35.307 349.062 35.187 348.957 35.067 cv
348.852 34.962 348.807 34.827 348.807 34.662 cv
348.807 34.377 349.032 34.032 349.497 33.627 cv
349.722 33.432 349.932 33.237 350.142 33.027 cv
349.632 32.787 349.272 32.502 349.062 32.187 cv
348.852 31.887 348.747 31.497 348.747 31.017 cv
348.747 30.342 348.987 29.772 349.467 29.292 cv
349.947 28.812 350.547 28.572 351.252 28.572 cv
351.642 28.572 352.047 28.647 352.452 28.797 cv
352.782 28.917 li
353.067 29.022 353.337 29.067 353.607 29.067 cv
354.762 29.067 li
354.762 29.652 li
349.992 30.402 mo
349.992 30.447 li
349.992 31.167 350.127 31.752 350.412 32.202 cv
350.697 32.652 351.072 32.862 351.537 32.862 cv
351.867 32.862 352.137 32.742 352.347 32.502 cv
352.542 32.262 352.647 31.932 352.647 31.512 cv
352.647 30.852 352.497 30.252 352.197 29.697 cv
351.942 29.232 351.582 28.992 351.102 28.992 cv
350.742 28.992 350.472 29.127 350.277 29.367 cv
350.082 29.622 349.992 29.967 349.992 30.402 cv
354.207 36.417 mo
354.207 36.132 354.057 35.937 353.787 35.832 cv
353.517 35.727 353.037 35.682 352.347 35.682 cv
351.357 35.682 350.547 35.607 349.917 35.487 cv
349.617 35.847 349.407 36.102 349.317 36.267 cv
349.227 36.432 349.182 36.597 349.182 36.777 cv
349.182 37.107 349.377 37.362 349.767 37.572 cv
350.157 37.767 350.697 37.872 351.357 37.872 cv
352.197 37.872 352.887 37.737 353.412 37.467 cv
353.937 37.197 354.207 36.852 354.207 36.417 cv
f
407.72 156.932 mo
352.408 156.932 li
351.818 156.93 351.47 156.788 351.261 156.578 cv
351.052 156.369 350.909 156.022 350.907 155.432 cv
350.907 99.7445 li
350.909 99.1546 351.052 98.8072 351.261 98.5981 cv
351.47 98.3886 351.818 98.2463 352.408 98.2445 cv
407.72 98.2445 li
408.31 98.2463 408.657 98.3886 408.866 98.5981 cv
409.076 98.8072 409.218 99.1546 409.22 99.7445 cv
409.22 155.432 li
409.218 156.022 409.076 156.369 408.866 156.578 cv
408.657 156.788 408.31 156.93 407.72 156.932 cv
1 /1 /CSD get_res sepcs
0 sep
f
407.731 157.932 mo
407.727 157.932 407.724 157.932 407.72 157.932 cv
352.408 157.932 li
352.404 157.932 352.4 157.932 352.397 157.932 cv
351.658 157.932 351.009 157.741 350.554 157.286 cv
350.097 156.828 349.906 156.175 349.908 155.432 cv
349.908 99.7445 li
349.906 99.001 350.097 98.3485 350.554 97.8909 cv
351.009 97.4358 351.658 97.2445 352.398 97.2445 cv
352.401 97.2445 352.404 97.2445 352.408 97.2445 cv
407.72 97.2445 li
407.723 97.2445 407.727 97.2445 407.73 97.2445 cv
408.469 97.2445 409.118 97.4358 409.573 97.8909 cv
410.031 98.3485 410.222 99.001 410.22 99.7445 cv
410.22 155.432 li
410.222 156.175 410.031 156.828 409.573 157.286 cv
409.118 157.74 408.47 157.932 407.731 157.932 cv
352.408 156.932 mo
407.72 156.932 li
408.31 156.93 408.657 156.788 408.866 156.578 cv
409.076 156.369 409.218 156.022 409.22 155.432 cv
409.22 99.7445 li
409.218 99.1546 409.076 98.8072 408.866 98.5981 cv
408.657 98.3886 408.31 98.2463 407.72 98.2445 cv
352.408 98.2445 li
351.818 98.2463 351.47 98.3886 351.261 98.5981 cv
351.052 98.8072 350.909 99.1546 350.907 99.7445 cv
350.907 155.432 li
350.909 156.022 351.052 156.369 351.261 156.578 cv
351.47 156.788 351.818 156.93 352.408 156.932 cv
352.408 156.932 li
1 /1 /CSD get_res sepcs
.160784 sep
f
1.5 lw
1 lj
354.408 105.245 mo
374.408 105.245 li
.906126 .514977 .0511788 .00137331 cmyk
@
389.288 105.435 mo
389.288 106.465 388.978 107.295 388.378 107.925 cv
387.768 108.565 386.978 108.875 386.017 108.875 cv
385.038 108.875 384.247 108.565 383.647 107.925 cv
383.048 107.285 382.747 106.445 382.747 105.405 cv
382.747 104.395 383.048 103.575 383.647 102.935 cv
384.247 102.305 385.038 101.985 386.017 101.985 cv
386.987 101.985 387.777 102.315 388.378 102.965 cv
388.978 103.615 389.288 104.435 389.288 105.435 cv
388.147 105.375 mo
388.147 104.815 388.068 104.305 387.908 103.855 cv
387.747 103.405 387.517 103.055 387.237 102.815 cv
386.858 102.505 386.448 102.345 386.008 102.345 cv
385.438 102.345 384.957 102.575 384.578 103.015 cv
384.358 103.255 384.188 103.605 384.068 104.045 cv
383.948 104.485 383.888 104.945 383.888 105.425 cv
383.888 106.645 384.188 107.525 384.788 108.075 cv
385.108 108.375 385.527 108.525 386.027 108.525 cv
386.548 108.525 386.978 108.365 387.318 108.045 cv
387.867 107.515 388.147 106.625 388.147 105.375 cv
1 /0 /CSD get_res sepcs
1 sep
f
391.228 104.165 mo
391.228 105.085 li
391.478 104.725 391.688 104.485 391.858 104.345 cv
392.027 104.215 392.217 104.145 392.427 104.145 cv
392.598 104.145 392.728 104.195 392.828 104.285 cv
392.927 104.385 392.978 104.515 392.978 104.675 cv
392.978 104.815 392.938 104.925 392.867 105.005 cv
392.798 105.085 392.707 105.125 392.587 105.125 cv
392.457 105.125 392.328 105.065 392.188 104.925 cv
392.078 104.825 391.987 104.775 391.927 104.775 cv
391.788 104.775 391.628 104.875 391.467 105.065 cv
391.307 105.265 391.228 105.435 391.228 105.595 cv
391.228 107.845 li
391.228 108.135 391.277 108.325 391.397 108.425 cv
391.508 108.525 391.737 108.585 392.078 108.595 cv
392.078 108.745 li
389.677 108.745 li
389.677 108.595 li
389.997 108.535 390.188 108.475 390.268 108.395 cv
390.348 108.325 390.388 108.165 390.388 107.905 cv
390.388 105.405 li
390.388 105.185 390.358 105.035 390.307 104.945 cv
390.258 104.855 390.168 104.805 390.048 104.805 cv
389.938 104.805 389.818 104.825 389.698 104.845 cv
389.698 104.685 li
390.117 104.555 390.608 104.375 391.177 104.145 cv
391.228 104.165 li
f
397.867 108.325 mo
396.397 108.835 li
396.357 108.805 li
396.357 108.175 li
396.037 108.615 395.607 108.835 395.077 108.835 cv
394.517 108.835 394.077 108.645 393.737 108.245 cv
393.397 107.855 393.227 107.335 393.227 106.695 cv
393.227 105.995 393.427 105.395 393.837 104.895 cv
394.237 104.395 394.727 104.145 395.307 104.145 cv
395.667 104.145 396.017 104.295 396.357 104.575 cv
396.357 103.015 li
396.357 102.815 396.327 102.675 396.267 102.605 cv
396.207 102.545 396.077 102.505 395.897 102.505 cv
395.797 102.505 395.727 102.515 395.677 102.515 cv
395.677 102.355 li
396.277 102.195 396.767 102.055 397.147 101.915 cv
397.197 101.935 li
397.197 107.605 li
397.197 107.845 397.217 107.995 397.277 108.065 cv
397.337 108.145 397.457 108.175 397.637 108.175 cv
397.677 108.175 397.747 108.175 397.867 108.165 cv
397.867 108.325 li
396.357 107.725 mo
396.357 105.425 li
396.357 105.165 396.247 104.925 396.047 104.725 cv
395.847 104.525 395.607 104.425 395.337 104.425 cv
394.957 104.425 394.647 104.595 394.427 104.935 cv
394.197 105.275 394.087 105.735 394.087 106.295 cv
394.087 106.915 394.207 107.405 394.457 107.775 cv
394.707 108.145 395.047 108.325 395.467 108.325 cv
395.777 108.325 396.027 108.225 396.207 108.005 cv
396.307 107.895 396.357 107.805 396.357 107.725 cv
f
402.037 107.105 mo
402.197 107.175 li
401.797 108.285 401.097 108.835 400.107 108.835 cv
399.517 108.835 399.057 108.635 398.717 108.225 cv
398.377 107.825 398.207 107.275 398.207 106.575 cv
398.207 105.865 398.397 105.285 398.777 104.825 cv
399.157 104.375 399.657 104.145 400.277 104.145 cv
400.877 104.145 401.337 104.375 401.667 104.835 cv
401.857 105.105 401.967 105.485 402.007 105.975 cv
398.927 105.975 li
398.947 106.395 398.987 106.715 399.047 106.935 cv
399.107 107.155 399.217 107.385 399.387 107.605 cv
399.667 107.975 400.037 108.155 400.497 108.155 cv
400.817 108.155 401.097 108.075 401.317 107.915 cv
401.537 107.755 401.777 107.485 402.037 107.105 cv
398.947 105.655 mo
400.987 105.655 li
400.927 105.235 400.827 104.945 400.687 104.765 cv
400.547 104.595 400.327 104.505 400.007 104.505 cv
399.727 104.505 399.487 104.605 399.307 104.805 cv
399.117 105.005 398.997 105.285 398.947 105.655 cv
f
403.997 104.165 mo
403.997 105.085 li
404.247 104.725 404.457 104.485 404.627 104.345 cv
404.797 104.215 404.987 104.145 405.197 104.145 cv
405.367 104.145 405.497 104.195 405.597 104.285 cv
405.697 104.385 405.747 104.515 405.747 104.675 cv
405.747 104.815 405.707 104.925 405.637 105.005 cv
405.567 105.085 405.477 105.125 405.357 105.125 cv
405.227 105.125 405.097 105.065 404.957 104.925 cv
404.847 104.825 404.757 104.775 404.697 104.775 cv
404.557 104.775 404.397 104.875 404.237 105.065 cv
404.077 105.265 403.997 105.435 403.997 105.595 cv
403.997 107.845 li
403.997 108.135 404.047 108.325 404.167 108.425 cv
404.277 108.525 404.507 108.585 404.847 108.595 cv
404.847 108.745 li
402.447 108.745 li
402.447 108.595 li
402.767 108.535 402.957 108.475 403.037 108.395 cv
403.117 108.325 403.157 108.165 403.157 107.905 cv
403.157 105.405 li
403.157 105.185 403.127 105.035 403.077 104.945 cv
403.027 104.855 402.937 104.805 402.817 104.805 cv
402.707 104.805 402.587 104.825 402.467 104.845 cv
402.467 104.685 li
402.887 104.555 403.377 104.375 403.947 104.145 cv
403.997 104.165 li
f
354.408 119.416 mo
374.408 119.416 li
0 .642573 1 0 cmyk
@
388.548 121.606 mo
388.737 121.786 li
388.138 122.626 387.228 123.046 386.008 123.046 cv
385.038 123.046 384.247 122.756 383.647 122.166 cv
383.008 121.546 382.688 120.706 382.688 119.666 cv
382.688 118.696 382.987 117.876 383.587 117.196 cv
384.207 116.506 385.017 116.156 386.017 116.156 cv
386.438 116.156 386.837 116.206 387.207 116.306 cv
387.628 116.426 387.858 116.486 387.897 116.486 cv
388.117 116.486 388.258 116.376 388.318 116.156 cv
388.518 116.156 li
388.608 118.426 li
388.378 118.426 li
388.268 117.946 388.098 117.576 387.858 117.316 cv
387.378 116.816 386.848 116.556 386.247 116.556 cv
385.508 116.556 384.918 116.836 384.487 117.376 cv
384.057 117.916 383.848 118.626 383.848 119.506 cv
383.848 120.586 384.087 121.376 384.568 121.896 cv
385.008 122.376 385.608 122.616 386.348 122.616 cv
386.788 122.616 387.168 122.546 387.487 122.386 cv
387.807 122.236 388.158 121.976 388.548 121.606 cv
1 /0 /CSD get_res sepcs
1 sep
f
393.768 118.286 mo
393.518 118.286 li
393.398 117.876 393.268 117.566 393.108 117.346 cv
392.698 116.826 392.218 116.566 391.658 116.566 cv
391.348 116.566 391.098 116.656 390.918 116.836 cv
390.738 117.016 390.648 117.236 390.648 117.516 cv
390.648 117.656 390.678 117.786 390.748 117.906 cv
390.808 118.036 390.878 118.146 390.958 118.236 cv
391.038 118.326 391.168 118.436 391.368 118.566 cv
391.558 118.706 391.718 118.806 391.838 118.876 cv
391.958 118.946 392.158 119.066 392.438 119.226 cv
392.978 119.546 393.368 119.856 393.618 120.166 cv
393.858 120.476 393.988 120.816 393.988 121.186 cv
393.988 121.746 393.788 122.196 393.408 122.536 cv
393.018 122.876 392.528 123.046 391.948 123.046 cv
391.508 123.046 391.118 122.966 390.768 122.826 cv
390.588 122.756 390.438 122.716 390.298 122.716 cv
390.098 122.806 li
390.038 122.866 390.018 122.936 390.018 123.036 cv
389.798 123.036 li
389.508 120.926 li
389.728 120.926 li
390.168 122.106 390.858 122.696 391.788 122.696 cv
392.138 122.696 392.428 122.596 392.648 122.386 cv
392.868 122.176 392.978 121.906 392.978 121.576 cv
392.978 121.266 392.878 121.006 392.688 120.786 cv
392.368 120.446 391.808 120.056 391.008 119.626 cv
390.188 119.196 389.788 118.626 389.788 117.906 cv
389.788 117.376 389.948 116.956 390.278 116.636 cv
390.598 116.316 391.018 116.156 391.528 116.156 cv
391.878 116.156 392.228 116.236 392.578 116.376 cv
392.758 116.456 392.898 116.496 393.018 116.496 cv
393.188 116.496 393.298 116.386 393.338 116.156 cv
393.548 116.156 li
393.768 118.286 li
f
354.408 133.588 mo
374.408 133.588 li
.831846 .112703 1 .0183108 cmyk
@
388.378 135.398 mo
387.918 137.088 li
382.527 137.088 li
382.527 136.898 li
382.908 136.878 383.147 136.808 383.247 136.698 cv
383.348 136.588 383.397 136.338 383.397 135.948 cv
383.397 131.588 li
383.397 131.218 383.337 130.978 383.237 130.858 cv
383.138 130.748 382.897 130.678 382.527 130.658 cv
382.527 130.468 li
387.828 130.468 li
387.867 131.898 li
387.617 131.898 li
387.538 131.458 387.408 131.168 387.228 131.038 cv
387.038 130.918 386.658 130.848 386.078 130.848 cv
384.767 130.848 li
384.617 130.848 384.517 130.878 384.478 130.918 cv
384.438 130.958 384.418 131.058 384.418 131.208 cv
384.418 133.408 li
385.927 133.408 li
386.348 133.408 386.617 133.348 386.758 133.228 cv
386.897 133.108 386.997 132.848 387.057 132.448 cv
387.288 132.448 li
387.288 134.788 li
387.057 134.788 li
386.997 134.368 386.897 134.108 386.767 133.988 cv
386.628 133.878 386.348 133.818 385.927 133.818 cv
384.418 133.818 li
384.418 136.248 li
384.418 136.448 384.487 136.578 384.628 136.638 cv
384.767 136.698 385.027 136.718 385.427 136.718 cv
385.788 136.718 li
386.497 136.718 387.008 136.638 387.307 136.458 cv
387.608 136.288 387.867 135.938 388.098 135.398 cv
388.378 135.398 li
1 /0 /CSD get_res sepcs
1 sep
f
395.567 130.468 mo
395.567 130.658 li
395.157 130.698 394.897 130.798 394.787 130.958 cv
394.677 131.118 394.627 131.438 394.627 131.928 cv
394.627 134.478 li
394.627 134.998 394.587 135.398 394.517 135.688 cv
394.437 135.988 394.297 136.258 394.087 136.498 cv
393.657 136.978 392.987 137.218 392.067 137.218 cv
391.337 137.218 390.767 137.068 390.367 136.768 cv
389.827 136.368 389.557 135.648 389.557 134.598 cv
389.557 131.498 li
389.557 131.168 389.497 130.948 389.397 130.848 cv
389.297 130.748 389.047 130.688 388.657 130.658 cv
388.657 130.468 li
391.487 130.468 li
391.487 130.658 li
391.087 130.698 390.827 130.768 390.727 130.878 cv
390.627 130.988 390.577 131.228 390.577 131.598 cv
390.577 134.718 li
390.577 135.158 390.597 135.488 390.657 135.718 cv
390.707 135.958 390.827 136.158 391.017 136.338 cv
391.327 136.638 391.757 136.788 392.297 136.788 cv
392.967 136.788 393.477 136.598 393.817 136.198 cv
393.967 136.018 394.067 135.808 394.117 135.588 cv
394.157 135.368 394.187 135.028 394.187 134.588 cv
394.187 131.958 li
394.187 131.438 394.127 131.098 394.017 130.938 cv
393.897 130.778 393.647 130.688 393.247 130.658 cv
393.247 130.468 li
395.567 130.468 li
f
354.408 147.76 mo
374.408 147.76 li
.0993362 1 1 .024445 cmyk
@
385.948 144.64 mo
385.948 144.83 li
385.538 144.87 385.277 144.94 385.177 145.04 cv
385.078 145.14 385.027 145.39 385.027 145.77 cv
385.027 149.41 li
385.027 150.73 384.467 151.39 383.358 151.39 cv
383.048 151.39 382.807 151.33 382.628 151.21 cv
382.448 151.09 382.358 150.91 382.358 150.68 cv
382.358 150.55 382.408 150.43 382.497 150.32 cv
382.587 150.22 382.698 150.16 382.837 150.16 cv
383.057 150.16 383.217 150.3 383.328 150.58 cv
383.378 150.72 li
383.418 150.85 li
383.467 150.94 li
383.538 151 li
383.638 151.02 li
383.777 151.02 383.878 150.97 383.927 150.87 cv
383.978 150.77 384.008 150.58 384.008 150.32 cv
384.008 145.76 li
384.008 145.37 383.957 145.13 383.858 145.03 cv
383.758 144.93 383.497 144.87 383.078 144.83 cv
383.078 144.64 li
385.948 144.64 li
1 /0 /CSD get_res sepcs
1 sep
f
389.288 151.26 mo
386.318 151.26 li
386.318 151.07 li
386.738 151.06 386.997 151 387.118 150.89 cv
387.228 150.78 387.288 150.53 387.288 150.14 cv
387.288 145.75 li
387.288 145.37 387.228 145.12 387.128 145.02 cv
387.018 144.92 386.747 144.86 386.318 144.83 cv
386.318 144.64 li
389.288 144.64 li
389.288 144.83 li
388.868 144.85 388.598 144.92 388.478 145.02 cv
388.358 145.13 388.308 145.37 388.308 145.75 cv
388.308 150.14 li
388.308 150.52 388.368 150.76 388.488 150.88 cv
388.608 151 388.868 151.06 389.288 151.07 cv
389.288 151.26 li
f
57.6 307.584 mo
219.927 307.584 li
219.927 186.624 li
57.6 186.624 li
57.6 307.584 li
1 /0 /CSD get_res sepcs
0 sep
f
64.9785 307.584 mo
64.9785 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
64.9785 307.584 mo
64.9785 311.084 li
@
67.2385 318.112 mo
67.2385 318.562 67.1885 318.982 67.1085 319.382 cv
67.0185 319.782 66.8885 320.142 66.7185 320.472 cv
66.5485 320.812 66.3185 321.072 66.0185 321.262 cv
65.7185 321.442 65.3685 321.542 64.9785 321.542 cv
64.5685 321.542 64.2085 321.442 63.9085 321.242 cv
63.5985 321.042 63.3585 320.762 63.1985 320.412 cv
63.0285 320.072 62.9085 319.702 62.8285 319.302 cv
62.7485 318.912 62.7185 318.492 62.7185 318.052 cv
62.7185 317.432 62.7885 316.882 62.9485 316.382 cv
63.0985 315.882 63.3485 315.472 63.7085 315.142 cv
64.0685 314.822 64.4985 314.652 65.0185 314.652 cv
65.6685 314.652 66.1985 314.972 66.6185 315.612 cv
67.0285 316.252 67.2385 317.092 67.2385 318.112 cv
66.2785 318.162 mo
66.2785 317.112 66.1585 316.312 65.9385 315.752 cv
65.7185 315.192 65.3885 314.912 64.9585 314.912 cv
64.5385 314.912 64.2285 315.192 64.0085 315.752 cv
63.7885 316.312 63.6785 317.102 63.6785 318.122 cv
63.6785 319.152 63.7885 319.942 64.0085 320.482 cv
64.2285 321.022 64.5485 321.292 64.9785 321.292 cv
65.3985 321.292 65.7185 321.022 65.9385 320.482 cv
66.1585 319.942 66.2785 319.162 66.2785 318.162 cv
f
89.5736 307.584 mo
89.5736 311.084 li
f
89.5736 307.584 mo
89.5736 311.084 li
@
91.8036 319.742 mo
90.7736 319.742 li
90.7736 321.412 li
89.9936 321.412 li
89.9936 319.742 li
87.1936 319.742 li
87.1936 319.102 li
90.3336 314.652 li
90.7736 314.652 li
90.7736 319.102 li
91.8036 319.102 li
91.8036 319.742 li
89.9936 319.102 mo
89.9936 315.672 li
87.5936 319.102 li
89.9936 319.102 li
f
114.169 307.584 mo
114.169 311.084 li
f
114.169 307.584 mo
114.169 311.084 li
@
116.119 319.862 mo
116.119 320.382 115.939 320.792 115.579 321.092 cv
115.219 321.392 114.749 321.542 114.149 321.542 cv
113.589 321.542 113.129 321.392 112.769 321.092 cv
112.409 320.792 112.229 320.402 112.229 319.922 cv
112.229 319.572 112.309 319.272 112.489 319.022 cv
112.659 318.772 113.009 318.462 113.529 318.092 cv
113.029 317.682 112.689 317.352 112.529 317.092 cv
112.369 316.842 112.289 316.552 112.289 316.212 cv
112.289 315.742 112.469 315.362 112.829 315.082 cv
113.189 314.802 113.659 314.652 114.229 314.652 cv
114.709 314.652 115.109 314.792 115.429 315.072 cv
115.749 315.352 115.909 315.682 115.909 316.082 cv
115.909 316.452 115.809 316.742 115.619 316.962 cv
115.429 317.182 115.079 317.432 114.569 317.702 cv
115.169 318.102 115.569 318.462 115.789 318.772 cv
116.009 319.092 116.119 319.452 116.119 319.862 cv
115.219 316.082 mo
115.219 315.742 115.119 315.462 114.929 315.252 cv
114.729 315.042 114.469 314.932 114.129 314.932 cv
113.789 314.932 113.519 315.022 113.319 315.202 cv
113.119 315.382 113.029 315.622 113.029 315.922 cv
113.029 316.232 113.119 316.512 113.319 316.762 cv
113.519 317.012 113.839 317.262 114.279 317.522 cv
114.619 317.322 114.859 317.112 114.999 316.892 cv
115.139 316.672 115.219 316.402 115.219 316.082 cv
114.379 318.692 mo
113.789 318.292 li
113.489 318.532 113.289 318.772 113.169 319.002 cv
113.049 319.232 112.989 319.512 112.989 319.832 cv
112.989 320.292 113.099 320.642 113.329 320.892 cv
113.559 321.152 113.869 321.272 114.259 321.272 cv
114.579 321.272 114.849 321.172 115.049 320.972 cv
115.249 320.772 115.359 320.502 115.359 320.172 cv
115.359 319.872 115.279 319.612 115.129 319.382 cv
114.969 319.162 114.719 318.932 114.379 318.692 cv
f
138.764 307.584 mo
138.764 311.084 li
f
138.764 307.584 mo
138.764 311.084 li
@
137.704 321.412 mo
134.944 321.412 li
134.944 321.262 li
135.304 321.242 135.554 321.182 135.694 321.062 cv
135.824 320.942 135.894 320.742 135.894 320.462 cv
135.894 315.972 li
135.894 315.652 135.794 315.482 135.594 315.482 cv
135.494 315.482 135.344 315.522 135.144 315.602 cv
134.874 315.702 li
134.874 315.562 li
136.664 314.652 li
136.754 314.682 li
136.754 320.652 li
136.754 320.872 136.814 321.032 136.954 321.122 cv
137.084 321.222 137.334 321.262 137.704 321.262 cv
137.704 321.412 li
f
143.504 320.042 mo
142.964 321.412 li
139.054 321.412 li
139.054 321.292 li
140.834 319.402 li
141.294 318.922 141.634 318.472 141.834 318.062 cv
142.034 317.662 142.134 317.242 142.134 316.802 cv
142.134 316.362 142.004 316.012 141.764 315.762 cv
141.514 315.522 141.174 315.392 140.744 315.392 cv
140.384 315.392 140.094 315.492 139.884 315.672 cv
139.674 315.862 139.474 316.202 139.274 316.692 cv
139.064 316.642 li
139.174 316.022 139.404 315.542 139.744 315.182 cv
140.084 314.832 140.554 314.652 141.144 314.652 cv
141.694 314.652 142.144 314.822 142.484 315.152 cv
142.824 315.492 142.994 315.912 142.994 316.412 cv
142.994 317.172 142.564 317.992 141.714 318.892 cv
140.064 320.652 li
142.404 320.652 li
142.624 320.652 142.794 320.612 142.924 320.522 cv
143.054 320.442 143.204 320.262 143.364 319.982 cv
143.504 320.042 li
f
163.359 307.584 mo
163.359 311.084 li
f
163.359 307.584 mo
163.359 311.084 li
@
162.299 321.412 mo
159.539 321.412 li
159.539 321.262 li
159.899 321.242 160.149 321.182 160.289 321.062 cv
160.419 320.942 160.489 320.742 160.489 320.462 cv
160.489 315.972 li
160.489 315.652 160.389 315.482 160.189 315.482 cv
160.089 315.482 159.939 315.522 159.739 315.602 cv
159.469 315.702 li
159.469 315.562 li
161.259 314.652 li
161.349 314.682 li
161.349 320.652 li
161.349 320.872 161.409 321.032 161.549 321.122 cv
161.679 321.222 161.929 321.262 162.299 321.262 cv
162.299 321.412 li
f
167.819 314.572 mo
167.839 314.732 li
167.049 314.862 166.389 315.182 165.869 315.692 cv
165.339 316.202 165.009 316.832 164.879 317.582 cv
165.259 317.282 165.689 317.132 166.149 317.132 cv
166.729 317.132 167.189 317.322 167.529 317.692 cv
167.869 318.072 168.039 318.582 168.039 319.222 cv
168.039 319.882 167.869 320.412 167.529 320.822 cv
167.129 321.302 166.599 321.542 165.939 321.542 cv
165.119 321.542 164.529 321.212 164.169 320.542 cv
163.849 319.972 163.699 319.332 163.699 318.622 cv
163.699 317.532 164.059 316.612 164.789 315.862 cv
165.199 315.442 165.619 315.142 166.059 314.962 cv
166.499 314.782 167.079 314.652 167.819 314.572 cv
167.139 319.532 mo
167.139 318.242 166.689 317.592 165.789 317.592 cv
165.449 317.592 165.179 317.682 164.959 317.862 cv
164.739 318.042 164.629 318.332 164.629 318.752 cv
164.629 319.532 164.749 320.152 164.989 320.602 cv
165.229 321.052 165.589 321.272 166.049 321.272 cv
166.399 321.272 166.669 321.122 166.859 320.802 cv
167.039 320.482 167.139 320.062 167.139 319.532 cv
f
187.954 307.584 mo
187.954 311.084 li
f
187.954 307.584 mo
187.954 311.084 li
@
187.694 320.042 mo
187.154 321.412 li
183.244 321.412 li
183.244 321.292 li
185.024 319.402 li
185.484 318.922 185.824 318.472 186.024 318.062 cv
186.224 317.662 186.324 317.242 186.324 316.802 cv
186.324 316.362 186.194 316.012 185.954 315.762 cv
185.704 315.522 185.364 315.392 184.934 315.392 cv
184.574 315.392 184.284 315.492 184.074 315.672 cv
183.864 315.862 183.664 316.202 183.464 316.692 cv
183.254 316.642 li
183.364 316.022 183.594 315.542 183.934 315.182 cv
184.274 314.832 184.744 314.652 185.334 314.652 cv
185.884 314.652 186.334 314.822 186.674 315.152 cv
187.014 315.492 187.184 315.912 187.184 316.412 cv
187.184 317.172 186.754 317.992 185.904 318.892 cv
184.254 320.652 li
186.594 320.652 li
186.814 320.652 186.984 320.612 187.114 320.522 cv
187.244 320.442 187.394 320.262 187.554 319.982 cv
187.694 320.042 li
f
192.714 318.112 mo
192.714 318.562 192.664 318.982 192.584 319.382 cv
192.494 319.782 192.364 320.142 192.194 320.472 cv
192.024 320.812 191.794 321.072 191.494 321.262 cv
191.194 321.442 190.844 321.542 190.454 321.542 cv
190.044 321.542 189.684 321.442 189.384 321.242 cv
189.074 321.042 188.834 320.762 188.674 320.412 cv
188.504 320.072 188.384 319.702 188.304 319.302 cv
188.224 318.912 188.194 318.492 188.194 318.052 cv
188.194 317.432 188.264 316.882 188.424 316.382 cv
188.574 315.882 188.824 315.472 189.184 315.142 cv
189.544 314.822 189.974 314.652 190.494 314.652 cv
191.144 314.652 191.674 314.972 192.094 315.612 cv
192.504 316.252 192.714 317.092 192.714 318.112 cv
191.754 318.162 mo
191.754 317.112 191.634 316.312 191.414 315.752 cv
191.194 315.192 190.864 314.912 190.434 314.912 cv
190.014 314.912 189.704 315.192 189.484 315.752 cv
189.264 316.312 189.154 317.102 189.154 318.122 cv
189.154 319.152 189.264 319.942 189.484 320.482 cv
189.704 321.022 190.024 321.292 190.454 321.292 cv
190.874 321.292 191.194 321.022 191.414 320.482 cv
191.634 319.942 191.754 319.162 191.754 318.162 cv
f
212.549 307.584 mo
212.549 311.084 li
f
212.549 307.584 mo
212.549 311.084 li
@
212.289 320.042 mo
211.749 321.412 li
207.839 321.412 li
207.839 321.292 li
209.619 319.402 li
210.079 318.922 210.419 318.472 210.619 318.062 cv
210.819 317.662 210.919 317.242 210.919 316.802 cv
210.919 316.362 210.789 316.012 210.549 315.762 cv
210.299 315.522 209.959 315.392 209.529 315.392 cv
209.169 315.392 208.879 315.492 208.669 315.672 cv
208.459 315.862 208.259 316.202 208.059 316.692 cv
207.849 316.642 li
207.959 316.022 208.189 315.542 208.529 315.182 cv
208.869 314.832 209.339 314.652 209.929 314.652 cv
210.479 314.652 210.929 314.822 211.269 315.152 cv
211.609 315.492 211.779 315.912 211.779 316.412 cv
211.779 317.172 211.349 317.992 210.499 318.892 cv
208.849 320.652 li
211.189 320.652 li
211.409 320.652 211.579 320.612 211.709 320.522 cv
211.839 320.442 211.989 320.262 212.149 319.982 cv
212.289 320.042 li
f
217.279 319.742 mo
216.249 319.742 li
216.249 321.412 li
215.469 321.412 li
215.469 319.742 li
212.669 319.742 li
212.669 319.102 li
215.809 314.652 li
216.249 314.652 li
216.249 319.102 li
217.279 319.102 li
217.279 319.742 li
215.469 319.102 mo
215.469 315.672 li
213.069 319.102 li
215.469 319.102 li
f
57.6 302.114 mo
54.1 302.114 li
f
57.6 302.114 mo
54.1 302.114 li
@
42.86 302.228 mo
42.86 302.678 42.81 303.098 42.73 303.498 cv
42.64 303.898 42.51 304.258 42.34 304.588 cv
42.17 304.928 41.94 305.188 41.64 305.378 cv
41.34 305.558 40.99 305.658 40.6 305.658 cv
40.19 305.658 39.83 305.558 39.53 305.358 cv
39.22 305.158 38.98 304.878 38.82 304.528 cv
38.65 304.188 38.53 303.818 38.45 303.418 cv
38.37 303.028 38.34 302.608 38.34 302.168 cv
38.34 301.548 38.41 300.998 38.57 300.498 cv
38.72 299.998 38.97 299.588 39.33 299.258 cv
39.69 298.938 40.12 298.768 40.64 298.768 cv
41.29 298.768 41.82 299.088 42.24 299.728 cv
42.65 300.368 42.86 301.208 42.86 302.228 cv
41.9 302.278 mo
41.9 301.228 41.78 300.428 41.56 299.868 cv
41.34 299.308 41.01 299.028 40.58 299.028 cv
40.16 299.028 39.85 299.308 39.63 299.868 cv
39.41 300.428 39.3 301.218 39.3 302.238 cv
39.3 303.268 39.41 304.058 39.63 304.598 cv
39.85 305.138 40.17 305.408 40.6 305.408 cv
41.02 305.408 41.34 305.138 41.56 304.598 cv
41.78 304.058 41.9 303.278 41.9 302.278 cv
f
44.91 305.098 mo
44.91 305.248 44.85 305.378 44.74 305.478 cv
44.63 305.578 44.5 305.628 44.35 305.628 cv
44.19 305.628 44.06 305.578 43.96 305.478 cv
43.85 305.378 43.8 305.248 43.8 305.088 cv
43.8 304.938 43.85 304.808 43.96 304.698 cv
44.07 304.588 44.2 304.528 44.36 304.528 cv
44.5 304.528 44.63 304.588 44.74 304.698 cv
44.85 304.818 44.91 304.948 44.91 305.098 cv
f
50.36 302.228 mo
50.36 302.678 50.31 303.098 50.23 303.498 cv
50.14 303.898 50.01 304.258 49.84 304.588 cv
49.67 304.928 49.44 305.188 49.14 305.378 cv
48.84 305.558 48.49 305.658 48.1 305.658 cv
47.69 305.658 47.33 305.558 47.03 305.358 cv
46.72 305.158 46.48 304.878 46.32 304.528 cv
46.15 304.188 46.03 303.818 45.95 303.418 cv
45.87 303.028 45.84 302.608 45.84 302.168 cv
45.84 301.548 45.91 300.998 46.07 300.498 cv
46.22 299.998 46.47 299.588 46.83 299.258 cv
47.19 298.938 47.62 298.768 48.14 298.768 cv
48.79 298.768 49.32 299.088 49.74 299.728 cv
50.15 300.368 50.36 301.208 50.36 302.228 cv
49.4 302.278 mo
49.4 301.228 49.28 300.428 49.06 299.868 cv
48.84 299.308 48.51 299.028 48.08 299.028 cv
47.66 299.028 47.35 299.308 47.13 299.868 cv
46.91 300.428 46.8 301.218 46.8 302.238 cv
46.8 303.268 46.91 304.058 47.13 304.598 cv
47.35 305.138 47.67 305.408 48.1 305.408 cv
48.52 305.408 48.84 305.138 49.06 304.598 cv
49.28 304.058 49.4 303.278 49.4 302.278 cv
f
57.6 279.818 mo
54.1 279.818 li
f
57.6 279.818 mo
54.1 279.818 li
@
42.86 279.932 mo
42.86 280.382 42.81 280.802 42.73 281.202 cv
42.64 281.602 42.51 281.962 42.34 282.292 cv
42.17 282.632 41.94 282.892 41.64 283.082 cv
41.34 283.262 40.99 283.362 40.6 283.362 cv
40.19 283.362 39.83 283.262 39.53 283.062 cv
39.22 282.862 38.98 282.582 38.82 282.232 cv
38.65 281.892 38.53 281.522 38.45 281.122 cv
38.37 280.732 38.34 280.312 38.34 279.872 cv
38.34 279.252 38.41 278.702 38.57 278.202 cv
38.72 277.702 38.97 277.292 39.33 276.962 cv
39.69 276.642 40.12 276.472 40.64 276.472 cv
41.29 276.472 41.82 276.792 42.24 277.432 cv
42.65 278.072 42.86 278.912 42.86 279.932 cv
41.9 279.982 mo
41.9 278.932 41.78 278.132 41.56 277.572 cv
41.34 277.012 41.01 276.732 40.58 276.732 cv
40.16 276.732 39.85 277.012 39.63 277.572 cv
39.41 278.132 39.3 278.922 39.3 279.942 cv
39.3 280.972 39.41 281.762 39.63 282.302 cv
39.85 282.842 40.17 283.112 40.6 283.112 cv
41.02 283.112 41.34 282.842 41.56 282.302 cv
41.78 281.762 41.9 280.982 41.9 279.982 cv
f
44.91 282.802 mo
44.91 282.952 44.85 283.082 44.74 283.182 cv
44.63 283.282 44.5 283.332 44.35 283.332 cv
44.19 283.332 44.06 283.282 43.96 283.182 cv
43.85 283.082 43.8 282.952 43.8 282.792 cv
43.8 282.642 43.85 282.512 43.96 282.402 cv
44.07 282.292 44.2 282.232 44.36 282.232 cv
44.5 282.232 44.63 282.292 44.74 282.402 cv
44.85 282.522 44.91 282.652 44.91 282.802 cv
f
50.34 281.862 mo
49.8 283.232 li
45.89 283.232 li
45.89 283.112 li
47.67 281.222 li
48.13 280.742 48.47 280.292 48.67 279.882 cv
48.87 279.482 48.97 279.062 48.97 278.622 cv
48.97 278.182 48.84 277.832 48.6 277.582 cv
48.35 277.342 48.01 277.212 47.58 277.212 cv
47.22 277.212 46.93 277.312 46.72 277.492 cv
46.51 277.682 46.31 278.022 46.11 278.512 cv
45.9 278.462 li
46.01 277.842 46.24 277.362 46.58 277.002 cv
46.92 276.652 47.39 276.472 47.98 276.472 cv
48.53 276.472 48.98 276.642 49.32 276.972 cv
49.66 277.312 49.83 277.732 49.83 278.232 cv
49.83 278.992 49.4 279.812 48.55 280.712 cv
46.9 282.472 li
49.24 282.472 li
49.46 282.472 49.63 282.432 49.76 282.342 cv
49.89 282.262 50.04 282.082 50.2 281.802 cv
50.34 281.862 li
f
57.6 257.523 mo
54.1 257.523 li
f
57.6 257.523 mo
54.1 257.523 li
@
42.86 257.637 mo
42.86 258.087 42.81 258.507 42.73 258.907 cv
42.64 259.307 42.51 259.667 42.34 259.997 cv
42.17 260.337 41.94 260.597 41.64 260.787 cv
41.34 260.967 40.99 261.067 40.6 261.067 cv
40.19 261.067 39.83 260.967 39.53 260.767 cv
39.22 260.567 38.98 260.287 38.82 259.937 cv
38.65 259.597 38.53 259.227 38.45 258.827 cv
38.37 258.437 38.34 258.017 38.34 257.577 cv
38.34 256.957 38.41 256.407 38.57 255.907 cv
38.72 255.407 38.97 254.997 39.33 254.667 cv
39.69 254.347 40.12 254.177 40.64 254.177 cv
41.29 254.177 41.82 254.497 42.24 255.137 cv
42.65 255.777 42.86 256.617 42.86 257.637 cv
41.9 257.687 mo
41.9 256.637 41.78 255.837 41.56 255.277 cv
41.34 254.717 41.01 254.437 40.58 254.437 cv
40.16 254.437 39.85 254.717 39.63 255.277 cv
39.41 255.837 39.3 256.627 39.3 257.647 cv
39.3 258.677 39.41 259.467 39.63 260.007 cv
39.85 260.547 40.17 260.817 40.6 260.817 cv
41.02 260.817 41.34 260.547 41.56 260.007 cv
41.78 259.467 41.9 258.687 41.9 257.687 cv
f
44.91 260.507 mo
44.91 260.657 44.85 260.787 44.74 260.887 cv
44.63 260.987 44.5 261.037 44.35 261.037 cv
44.19 261.037 44.06 260.987 43.96 260.887 cv
43.85 260.787 43.8 260.657 43.8 260.497 cv
43.8 260.347 43.85 260.217 43.96 260.107 cv
44.07 259.997 44.2 259.937 44.36 259.937 cv
44.5 259.937 44.63 259.997 44.74 260.107 cv
44.85 260.227 44.91 260.357 44.91 260.507 cv
f
50.33 259.267 mo
49.3 259.267 li
49.3 260.937 li
48.52 260.937 li
48.52 259.267 li
45.72 259.267 li
45.72 258.627 li
48.86 254.177 li
49.3 254.177 li
49.3 258.627 li
50.33 258.627 li
50.33 259.267 li
48.52 258.627 mo
48.52 255.197 li
46.12 258.627 li
48.52 258.627 li
f
57.6 235.227 mo
54.1 235.227 li
f
57.6 235.227 mo
54.1 235.227 li
@
42.86 235.341 mo
42.86 235.791 42.81 236.211 42.73 236.611 cv
42.64 237.011 42.51 237.371 42.34 237.701 cv
42.17 238.041 41.94 238.301 41.64 238.491 cv
41.34 238.671 40.99 238.771 40.6 238.771 cv
40.19 238.771 39.83 238.671 39.53 238.471 cv
39.22 238.271 38.98 237.991 38.82 237.641 cv
38.65 237.301 38.53 236.931 38.45 236.531 cv
38.37 236.141 38.34 235.721 38.34 235.281 cv
38.34 234.661 38.41 234.111 38.57 233.611 cv
38.72 233.111 38.97 232.701 39.33 232.371 cv
39.69 232.051 40.12 231.881 40.64 231.881 cv
41.29 231.881 41.82 232.201 42.24 232.841 cv
42.65 233.481 42.86 234.321 42.86 235.341 cv
41.9 235.391 mo
41.9 234.341 41.78 233.541 41.56 232.981 cv
41.34 232.421 41.01 232.141 40.58 232.141 cv
40.16 232.141 39.85 232.421 39.63 232.981 cv
39.41 233.541 39.3 234.331 39.3 235.351 cv
39.3 236.381 39.41 237.171 39.63 237.711 cv
39.85 238.251 40.17 238.521 40.6 238.521 cv
41.02 238.521 41.34 238.251 41.56 237.711 cv
41.78 237.171 41.9 236.391 41.9 235.391 cv
f
44.91 238.211 mo
44.91 238.361 44.85 238.491 44.74 238.591 cv
44.63 238.691 44.5 238.741 44.35 238.741 cv
44.19 238.741 44.06 238.691 43.96 238.591 cv
43.85 238.491 43.8 238.361 43.8 238.201 cv
43.8 238.051 43.85 237.921 43.96 237.811 cv
44.07 237.701 44.2 237.641 44.36 237.641 cv
44.5 237.641 44.63 237.701 44.74 237.811 cv
44.85 237.931 44.91 238.061 44.91 238.211 cv
f
50.06 231.801 mo
50.08 231.961 li
49.29 232.091 48.63 232.411 48.11 232.921 cv
47.58 233.431 47.25 234.061 47.12 234.811 cv
47.5 234.511 47.93 234.361 48.39 234.361 cv
48.97 234.361 49.43 234.551 49.77 234.921 cv
50.11 235.301 50.28 235.811 50.28 236.451 cv
50.28 237.111 50.11 237.641 49.77 238.051 cv
49.37 238.531 48.84 238.771 48.18 238.771 cv
47.36 238.771 46.77 238.441 46.41 237.771 cv
46.09 237.201 45.94 236.561 45.94 235.851 cv
45.94 234.761 46.3 233.841 47.03 233.091 cv
47.44 232.671 47.86 232.371 48.3 232.191 cv
48.74 232.011 49.32 231.881 50.06 231.801 cv
49.38 236.761 mo
49.38 235.471 48.93 234.821 48.03 234.821 cv
47.69 234.821 47.42 234.911 47.2 235.091 cv
46.98 235.271 46.87 235.561 46.87 235.981 cv
46.87 236.761 46.99 237.381 47.23 237.831 cv
47.47 238.281 47.83 238.501 48.29 238.501 cv
48.64 238.501 48.91 238.351 49.1 238.031 cv
49.28 237.711 49.38 237.291 49.38 236.761 cv
f
57.6 212.931 mo
54.1 212.931 li
f
57.6 212.931 mo
54.1 212.931 li
@
42.86 213.045 mo
42.86 213.495 42.81 213.915 42.73 214.315 cv
42.64 214.715 42.51 215.075 42.34 215.405 cv
42.17 215.745 41.94 216.005 41.64 216.195 cv
41.34 216.375 40.99 216.475 40.6 216.475 cv
40.19 216.475 39.83 216.375 39.53 216.175 cv
39.22 215.975 38.98 215.695 38.82 215.345 cv
38.65 215.005 38.53 214.635 38.45 214.235 cv
38.37 213.845 38.34 213.425 38.34 212.985 cv
38.34 212.365 38.41 211.815 38.57 211.315 cv
38.72 210.815 38.97 210.405 39.33 210.075 cv
39.69 209.755 40.12 209.585 40.64 209.585 cv
41.29 209.585 41.82 209.905 42.24 210.545 cv
42.65 211.185 42.86 212.025 42.86 213.045 cv
41.9 213.095 mo
41.9 212.045 41.78 211.245 41.56 210.685 cv
41.34 210.125 41.01 209.845 40.58 209.845 cv
40.16 209.845 39.85 210.125 39.63 210.685 cv
39.41 211.245 39.3 212.035 39.3 213.055 cv
39.3 214.085 39.41 214.875 39.63 215.415 cv
39.85 215.955 40.17 216.225 40.6 216.225 cv
41.02 216.225 41.34 215.955 41.56 215.415 cv
41.78 214.875 41.9 214.095 41.9 213.095 cv
f
44.91 215.915 mo
44.91 216.065 44.85 216.195 44.74 216.295 cv
44.63 216.395 44.5 216.445 44.35 216.445 cv
44.19 216.445 44.06 216.395 43.96 216.295 cv
43.85 216.195 43.8 216.065 43.8 215.905 cv
43.8 215.755 43.85 215.625 43.96 215.515 cv
44.07 215.405 44.2 215.345 44.36 215.345 cv
44.5 215.345 44.63 215.405 44.74 215.515 cv
44.85 215.635 44.91 215.765 44.91 215.915 cv
f
50.05 214.795 mo
50.05 215.315 49.87 215.725 49.51 216.025 cv
49.15 216.325 48.68 216.475 48.08 216.475 cv
47.52 216.475 47.06 216.325 46.7 216.025 cv
46.34 215.725 46.16 215.335 46.16 214.855 cv
46.16 214.505 46.24 214.205 46.42 213.955 cv
46.59 213.705 46.94 213.395 47.46 213.025 cv
46.96 212.615 46.62 212.285 46.46 212.025 cv
46.3 211.775 46.22 211.485 46.22 211.145 cv
46.22 210.675 46.4 210.295 46.76 210.015 cv
47.12 209.735 47.59 209.585 48.16 209.585 cv
48.64 209.585 49.04 209.725 49.36 210.005 cv
49.68 210.285 49.84 210.615 49.84 211.015 cv
49.84 211.385 49.74 211.675 49.55 211.895 cv
49.36 212.115 49.01 212.365 48.5 212.635 cv
49.1 213.035 49.5 213.395 49.72 213.705 cv
49.94 214.025 50.05 214.385 50.05 214.795 cv
49.15 211.015 mo
49.15 210.675 49.05 210.395 48.86 210.185 cv
48.66 209.975 48.4 209.865 48.06 209.865 cv
47.72 209.865 47.45 209.955 47.25 210.135 cv
47.05 210.315 46.96 210.555 46.96 210.855 cv
46.96 211.165 47.05 211.445 47.25 211.695 cv
47.45 211.945 47.77 212.195 48.21 212.455 cv
48.55 212.255 48.79 212.045 48.93 211.825 cv
49.07 211.605 49.15 211.335 49.15 211.015 cv
48.31 213.625 mo
47.72 213.225 li
47.42 213.465 47.22 213.705 47.1 213.935 cv
46.98 214.165 46.92 214.445 46.92 214.765 cv
46.92 215.225 47.03 215.575 47.26 215.825 cv
47.49 216.085 47.8 216.205 48.19 216.205 cv
48.51 216.205 48.78 216.105 48.98 215.905 cv
49.18 215.705 49.29 215.435 49.29 215.105 cv
49.29 214.805 49.21 214.545 49.06 214.315 cv
48.9 214.095 48.65 213.865 48.31 213.625 cv
f
57.6 190.636 mo
54.1 190.636 li
f
57.6 190.636 mo
54.1 190.636 li
@
42.04 194.05 mo
39.28 194.05 li
39.28 193.9 li
39.64 193.88 39.89 193.82 40.03 193.7 cv
40.16 193.58 40.23 193.38 40.23 193.1 cv
40.23 188.61 li
40.23 188.29 40.13 188.12 39.93 188.12 cv
39.83 188.12 39.68 188.16 39.48 188.24 cv
39.21 188.34 li
39.21 188.2 li
41 187.29 li
41.09 187.32 li
41.09 193.29 li
41.09 193.51 41.15 193.67 41.29 193.76 cv
41.42 193.86 41.67 193.9 42.04 193.9 cv
42.04 194.05 li
f
44.91 193.62 mo
44.91 193.77 44.85 193.9 44.74 194 cv
44.63 194.1 44.5 194.15 44.35 194.15 cv
44.19 194.15 44.06 194.1 43.96 194 cv
43.85 193.9 43.8 193.77 43.8 193.61 cv
43.8 193.46 43.85 193.33 43.96 193.22 cv
44.07 193.11 44.2 193.05 44.36 193.05 cv
44.5 193.05 44.63 193.11 44.74 193.22 cv
44.85 193.34 44.91 193.47 44.91 193.62 cv
f
50.36 190.75 mo
50.36 191.2 50.31 191.62 50.23 192.02 cv
50.14 192.42 50.01 192.78 49.84 193.11 cv
49.67 193.45 49.44 193.71 49.14 193.9 cv
48.84 194.08 48.49 194.18 48.1 194.18 cv
47.69 194.18 47.33 194.08 47.03 193.88 cv
46.72 193.68 46.48 193.4 46.32 193.05 cv
46.15 192.71 46.03 192.34 45.95 191.94 cv
45.87 191.55 45.84 191.13 45.84 190.69 cv
45.84 190.07 45.91 189.52 46.07 189.02 cv
46.22 188.52 46.47 188.11 46.83 187.78 cv
47.19 187.46 47.62 187.29 48.14 187.29 cv
48.79 187.29 49.32 187.61 49.74 188.25 cv
50.15 188.89 50.36 189.73 50.36 190.75 cv
49.4 190.8 mo
49.4 189.75 49.28 188.95 49.06 188.39 cv
48.84 187.83 48.51 187.55 48.08 187.55 cv
47.66 187.55 47.35 187.83 47.13 188.39 cv
46.91 188.95 46.8 189.74 46.8 190.76 cv
46.8 191.79 46.91 192.58 47.13 193.12 cv
47.35 193.66 47.67 193.93 48.1 193.93 cv
48.52 193.93 48.84 193.66 49.06 193.12 cv
49.28 192.58 49.4 191.8 49.4 190.8 cv
f
64.2913 301.776 mo
76.5888 273.647 li
76.657 273.491 76.7778 273.361 76.9286 273.282 cv
89.2262 266.854 li
89.3487 266.803 li
101.621 262.946 li
113.894 258.125 li
113.972 258.099 li
126.231 254.766 li
138.491 249.986 li
138.592 249.955 li
150.889 247.057 li
150.919 247.05 li
163.216 244.672 li
163.255 244.666 li
175.529 242.96 li
187.803 240.438 li
187.864 240.428 li
200.123 238.946 li
213.114 236.002 li
213.446 237.465 li
200.417 240.418 li
200.341 240.431 li
188.074 241.913 li
175.807 244.434 li
175.759 244.442 li
163.482 246.149 li
151.219 248.52 li
138.987 251.403 li
126.738 256.178 li
126.663 256.202 li
114.405 259.536 li
102.145 264.352 li
102.096 264.369 li
89.8619 268.214 li
77.8574 274.489 li
65.3652 303.064 li
63.9909 302.463 li
64.2913 301.776 li
.906126 .514977 .0511788 .00137331 cmyk
f
1.5 lw
2 lc
64.9785 302.077 mo
77.276 264.248 li
89.5736 256.779 li
101.871 251.28 li
114.169 237.085 li
126.466 227.572 li
138.764 217.911 li
151.061 208.955 li
163.359 205.5 li
175.656 203.01 li
187.954 198.588 li
200.251 195.615 li
212.549 192.122 li
0 .642573 1 0 cmyk
@
64.9785 302.077 mo
77.276 270.788 li
89.5736 263.765 li
101.871 251.354 li
114.169 247.935 li
126.466 242.176 li
138.764 238.683 li
151.061 233.109 li
163.359 230.359 li
175.656 228.018 li
187.954 226.123 li
200.251 223.522 li
212.549 220.363 li
.831846 .112703 1 .0183108 cmyk
@
64.9785 302.077 mo
77.276 271.94 li
89.5736 261.461 li
101.871 252.989 li
114.169 248.27 li
126.466 244.257 li
138.764 240.652 li
151.061 238.088 li
163.359 232.551 li
175.656 229.393 li
187.954 226.978 li
200.251 225.751 li
212.549 222.853 li
.0993362 1 1 .024445 cmyk
@
.8 lw
0 lj
57.6 307.584 mo
57.6 186.624 li
1 /0 /CSD get_res sepcs
1 sep
@
219.927 307.584 mo
219.927 186.624 li
@
57.6 307.584 mo
219.927 307.584 li
@
57.6 186.624 mo
219.927 186.624 li
@
119.142 177.159 mo
119.142 178.209 118.827 179.079 118.197 179.754 cv
117.567 180.429 116.757 180.759 115.767 180.759 cv
114.837 180.759 114.072 180.429 113.457 179.754 cv
112.827 179.094 112.527 178.239 112.527 177.204 cv
112.527 176.169 112.827 175.329 113.457 174.684 cv
114.072 174.054 114.882 173.724 115.902 173.724 cv
116.832 173.724 117.597 174.054 118.212 174.684 cv
118.827 175.314 119.142 176.139 119.142 177.159 cv
117.792 177.564 mo
117.792 176.424 117.537 175.539 117.042 174.894 cv
116.637 174.399 116.157 174.144 115.617 174.144 cv
115.092 174.144 114.672 174.369 114.357 174.789 cv
114.027 175.209 113.877 175.794 113.877 176.529 cv
113.877 177.819 114.132 178.839 114.672 179.604 cv
115.002 180.114 115.452 180.354 116.022 180.354 cv
116.562 180.354 116.997 180.114 117.312 179.619 cv
117.627 179.124 117.792 178.434 117.792 177.564 cv
f
121.887 170.409 mo
121.887 174.984 li
122.037 174.609 122.307 174.309 122.667 174.069 cv
123.027 173.844 123.447 173.724 123.912 173.724 cv
124.692 173.724 125.337 174.039 125.847 174.669 cv
126.357 175.299 126.612 176.094 126.612 177.024 cv
126.612 178.134 126.267 179.034 125.607 179.724 cv
124.932 180.414 124.092 180.759 123.102 180.759 cv
122.487 180.759 121.917 180.654 121.407 180.459 cv
120.882 180.264 120.627 180.039 120.627 179.784 cv
120.627 172.134 li
120.627 171.774 120.582 171.534 120.492 171.429 cv
120.402 171.324 120.192 171.264 119.892 171.264 cv
119.817 171.264 119.727 171.279 119.637 171.294 cv
119.637 171.039 li
120.087 170.904 li
121.107 170.604 121.677 170.424 121.812 170.379 cv
121.887 170.409 li
121.887 175.854 mo
121.887 179.514 li
121.887 179.754 122.022 179.934 122.307 180.084 cv
122.592 180.234 122.937 180.294 123.342 180.294 cv
123.927 180.294 124.392 180.084 124.737 179.649 cv
125.097 179.199 125.292 178.539 125.292 177.669 cv
125.292 176.694 125.097 175.929 124.707 175.374 cv
124.377 174.909 123.927 174.669 123.372 174.669 cv
122.967 174.669 122.622 174.789 122.322 175.029 cv
122.022 175.269 121.887 175.539 121.887 175.854 cv
f
130.002 171.144 mo
130.002 171.369 129.927 171.549 129.777 171.699 cv
129.627 171.849 129.432 171.909 129.222 171.909 cv
129.012 171.909 128.832 171.849 128.682 171.699 cv
128.532 171.549 128.472 171.369 128.472 171.144 cv
128.472 170.934 128.547 170.754 128.697 170.604 cv
128.847 170.454 129.027 170.379 129.237 170.379 cv
129.447 170.379 129.627 170.454 129.777 170.604 cv
129.927 170.754 130.002 170.934 130.002 171.144 cv
129.987 173.769 mo
129.987 180.624 li
129.987 181.674 129.762 182.484 129.327 183.039 cv
128.892 183.594 128.262 183.879 127.437 183.879 cv
127.047 183.879 126.717 183.789 126.447 183.639 cv
126.192 183.489 126.057 183.294 126.057 183.054 cv
126.057 182.889 126.117 182.754 126.237 182.634 cv
126.357 182.514 126.507 182.469 126.672 182.469 cv
126.912 182.469 127.137 182.619 127.377 182.949 cv
127.602 183.219 127.812 183.369 128.007 183.369 cv
128.232 183.369 128.397 183.279 128.517 183.099 cv
128.652 182.844 128.727 182.244 128.727 181.284 cv
128.727 175.614 li
128.727 175.014 128.562 174.714 128.247 174.714 cv
128.007 174.714 127.797 174.729 127.647 174.759 cv
127.572 174.774 li
127.572 174.534 li
128.367 174.294 129.147 174.024 129.912 173.724 cv
129.987 173.769 li
f
138.627 179.994 mo
136.422 180.759 li
136.362 180.714 li
136.362 179.769 li
135.882 180.429 135.237 180.759 134.442 180.759 cv
133.602 180.759 132.942 180.474 132.432 179.874 cv
131.922 179.289 131.667 178.509 131.667 177.549 cv
131.667 176.499 131.967 175.599 132.582 174.849 cv
133.182 174.099 133.917 173.724 134.787 173.724 cv
135.327 173.724 135.852 173.949 136.362 174.369 cv
136.362 172.029 li
136.362 171.729 136.317 171.519 136.227 171.414 cv
136.137 171.324 135.942 171.264 135.672 171.264 cv
135.522 171.264 135.417 171.279 135.342 171.279 cv
135.342 171.039 li
136.242 170.799 136.977 170.589 137.547 170.379 cv
137.622 170.409 li
137.622 178.914 li
137.622 179.274 137.652 179.499 137.742 179.604 cv
137.832 179.724 138.012 179.769 138.282 179.769 cv
138.342 179.769 138.447 179.769 138.627 179.754 cv
138.627 179.994 li
136.362 179.094 mo
136.362 175.644 li
136.362 175.254 136.197 174.894 135.897 174.594 cv
135.597 174.294 135.237 174.144 134.832 174.144 cv
134.262 174.144 133.797 174.399 133.467 174.909 cv
133.122 175.419 132.957 176.109 132.957 176.949 cv
132.957 177.879 133.137 178.614 133.512 179.169 cv
133.887 179.724 134.397 179.994 135.027 179.994 cv
135.492 179.994 135.867 179.844 136.137 179.514 cv
136.287 179.349 136.362 179.214 136.362 179.094 cv
f
145.962 179.874 mo
145.962 180.084 li
145.182 180.294 144.492 180.519 143.907 180.744 cv
143.832 180.699 li
143.832 179.484 li
143.802 179.484 li
143.172 180.339 142.452 180.759 141.657 180.759 cv
141.087 180.759 140.637 180.594 140.307 180.249 cv
139.977 179.904 139.827 179.439 139.827 178.854 cv
139.827 175.089 li
139.827 174.729 139.752 174.474 139.632 174.324 cv
139.497 174.189 139.257 174.114 138.897 174.084 cv
138.897 173.874 li
141.087 173.874 li
141.087 178.719 li
141.087 179.064 141.177 179.349 141.387 179.574 cv
141.597 179.799 141.852 179.904 142.152 179.904 cv
142.632 179.904 143.052 179.754 143.412 179.439 cv
143.532 179.319 143.622 179.214 143.682 179.109 cv
143.727 179.004 143.757 178.824 143.757 178.569 cv
143.757 175.104 li
143.757 174.714 143.682 174.474 143.547 174.354 cv
143.397 174.234 143.097 174.159 142.647 174.129 cv
142.647 173.874 li
145.017 173.874 li
145.017 179.019 li
145.017 179.379 145.062 179.604 145.182 179.709 cv
145.302 179.829 145.527 179.874 145.872 179.874 cv
145.962 179.874 li
f
157.887 180.624 mo
154.617 180.624 li
154.617 180.399 li
155.037 180.369 155.292 180.279 155.412 180.144 cv
155.532 180.009 155.592 179.724 155.592 179.274 cv
155.592 176.184 li
155.592 175.584 155.502 175.164 155.322 174.894 cv
155.142 174.639 154.857 174.504 154.437 174.504 cv
154.077 174.504 153.777 174.579 153.537 174.714 cv
153.297 174.864 153.057 175.089 152.832 175.419 cv
152.832 179.199 li
152.832 179.679 152.892 180.009 153.042 180.159 cv
153.192 180.309 153.477 180.399 153.912 180.399 cv
153.912 180.624 li
150.552 180.624 li
150.552 180.399 li
150.987 180.369 151.272 180.309 151.392 180.189 cv
151.512 180.069 151.572 179.784 151.572 179.334 cv
151.572 176.169 li
151.572 175.059 151.242 174.504 150.597 174.504 cv
150.312 174.504 150.012 174.579 149.697 174.699 cv
149.382 174.819 149.157 174.969 149.007 175.149 cv
148.872 175.299 148.812 175.389 148.812 175.404 cv
148.812 179.574 li
148.812 179.904 148.872 180.114 149.022 180.219 cv
149.157 180.324 149.427 180.384 149.832 180.399 cv
149.832 180.624 li
146.502 180.624 li
146.502 180.399 li
146.922 180.399 147.192 180.324 147.342 180.174 cv
147.477 180.024 147.552 179.739 147.552 179.304 cv
147.552 175.584 li
147.552 175.224 147.507 174.969 147.432 174.819 cv
147.342 174.669 147.207 174.594 147.027 174.594 cv
146.877 174.594 146.712 174.624 146.547 174.654 cv
146.547 174.399 li
147.222 174.219 147.912 173.994 148.632 173.724 cv
148.752 173.769 li
148.752 174.879 li
148.782 174.879 li
149.232 174.414 149.622 174.099 149.967 173.949 cv
150.312 173.799 150.687 173.724 151.077 173.724 cv
151.857 173.724 152.397 174.144 152.667 174.984 cv
153.447 174.144 154.257 173.724 155.112 173.724 cv
156.267 173.724 156.852 174.624 156.852 176.424 cv
156.852 179.469 li
156.852 179.799 156.897 180.039 157.002 180.159 cv
157.092 180.279 157.257 180.354 157.497 180.369 cv
157.887 180.399 li
157.887 180.624 li
f
160.317 173.754 mo
160.317 174.909 li
160.947 174.129 161.667 173.724 162.477 173.724 cv
163.197 173.724 163.797 174.024 164.277 174.624 cv
164.742 175.224 164.982 175.989 164.982 176.919 cv
164.982 178.014 164.667 178.929 164.067 179.664 cv
163.467 180.399 162.717 180.759 161.832 180.759 cv
161.517 180.759 161.247 180.714 161.037 180.624 cv
160.827 180.549 160.587 180.384 160.317 180.129 cv
160.317 182.469 li
160.317 182.934 160.392 183.234 160.557 183.369 cv
160.707 183.504 161.067 183.579 161.637 183.594 cv
161.637 183.864 li
158.007 183.864 li
158.007 183.609 li
158.442 183.564 158.727 183.474 158.862 183.354 cv
158.982 183.219 159.057 182.964 159.057 182.574 cv
159.057 175.569 li
159.057 175.224 159.012 174.999 158.937 174.879 cv
158.847 174.774 158.682 174.714 158.442 174.714 cv
158.277 174.714 158.157 174.729 158.067 174.729 cv
158.067 174.489 li
158.757 174.279 159.477 174.024 160.227 173.724 cv
160.317 173.754 li
160.317 175.614 mo
160.317 179.304 li
160.317 179.529 160.482 179.754 160.827 179.964 cv
161.172 180.189 161.517 180.294 161.877 180.294 cv
162.417 180.294 162.852 180.039 163.182 179.529 cv
163.512 179.019 163.692 178.359 163.692 177.519 cv
163.692 176.649 163.512 175.944 163.182 175.419 cv
162.852 174.894 162.402 174.624 161.847 174.624 cv
161.487 174.624 161.142 174.744 160.812 174.954 cv
160.482 175.179 160.317 175.404 160.317 175.614 cv
f
212.927 302.084 mo
157.615 302.084 li
157.025 302.082 156.677 301.94 156.468 301.73 cv
156.259 301.521 156.117 301.174 156.115 300.584 cv
156.115 247.573 li
163.482 246.149 li
175.759 244.442 li
175.807 244.434 li
180.856 243.396 li
212.927 243.396 li
213.517 243.398 213.865 243.541 214.074 243.75 cv
214.283 243.959 214.425 244.307 214.427 244.896 cv
214.427 300.584 li
214.425 301.174 214.283 301.521 214.074 301.73 cv
213.865 301.94 213.517 302.082 212.927 302.084 cv
156.115 246.046 mo
156.115 244.896 li
156.117 244.307 156.259 243.959 156.468 243.75 cv
156.677 243.541 157.025 243.398 157.615 243.396 cv
172.387 243.396 li
163.255 244.666 li
163.216 244.672 li
156.115 246.046 li
1 /1 /CSD get_res sepcs
0 sep
f
156.115 247.573 mo
156.115 246.046 li
163.216 244.672 li
163.255 244.666 li
172.387 243.396 li
180.856 243.396 li
175.807 244.434 li
175.759 244.442 li
163.482 246.149 li
156.115 247.573 li
.180392 .101961 .0117647 0 cmyk
f
212.938 303.084 mo
212.934 303.084 212.931 303.084 212.927 303.084 cv
157.615 303.084 li
157.611 303.084 157.608 303.084 157.604 303.084 cv
156.865 303.084 156.217 302.893 155.761 302.438 cv
155.304 301.98 155.113 301.327 155.115 300.584 cv
155.115 247.767 li
156.115 247.573 li
156.115 300.584 li
156.117 301.174 156.259 301.521 156.468 301.73 cv
156.677 301.94 157.025 302.082 157.615 302.084 cv
157.615 302.084 li
212.927 302.084 li
213.517 302.082 213.865 301.94 214.074 301.73 cv
214.283 301.521 214.425 301.174 214.427 300.584 cv
214.427 244.896 li
214.425 244.307 214.283 243.959 214.074 243.75 cv
213.865 243.541 213.517 243.398 212.927 243.396 cv
180.856 243.396 li
185.723 242.396 li
212.927 242.396 li
212.931 242.396 212.934 242.396 212.937 242.396 cv
213.677 242.396 214.325 242.588 214.781 243.043 cv
215.238 243.5 215.429 244.153 215.427 244.896 cv
215.427 300.584 li
215.429 301.327 215.238 301.98 214.781 302.438 cv
214.326 302.892 213.677 303.084 212.938 303.084 cv
155.115 246.239 mo
155.115 244.896 li
155.113 244.153 155.304 243.5 155.761 243.043 cv
156.217 242.588 156.865 242.396 157.605 242.396 cv
157.608 242.396 157.611 242.396 157.615 242.396 cv
178.27 242.396 li
175.529 242.96 li
172.387 243.396 li
157.615 243.396 li
157.025 243.398 156.677 243.541 156.468 243.75 cv
156.259 243.959 156.117 244.307 156.115 244.896 cv
156.115 246.046 li
155.115 246.239 li
1 /1 /CSD get_res sepcs
.160784 sep
f
155.115 247.767 mo
155.115 246.239 li
156.115 246.046 li
156.115 247.573 li
155.115 247.767 li
180.856 243.396 mo
172.387 243.396 li
175.529 242.96 li
178.27 242.396 li
185.723 242.396 li
180.856 243.396 li
.180392 .101961 .0117647 .160784 cmyk
f
1.5 lw
1 lj
159.615 250.397 mo
179.615 250.397 li
.906126 .514977 .0511788 .00137331 cmyk
@
194.495 250.587 mo
194.495 251.617 194.185 252.447 193.585 253.077 cv
192.975 253.717 192.185 254.027 191.225 254.027 cv
190.245 254.027 189.455 253.717 188.855 253.077 cv
188.255 252.437 187.955 251.597 187.955 250.557 cv
187.955 249.547 188.255 248.727 188.855 248.087 cv
189.455 247.457 190.245 247.137 191.225 247.137 cv
192.195 247.137 192.985 247.467 193.585 248.117 cv
194.185 248.767 194.495 249.587 194.495 250.587 cv
193.355 250.527 mo
193.355 249.967 193.275 249.457 193.115 249.007 cv
192.955 248.557 192.725 248.207 192.445 247.967 cv
192.065 247.657 191.655 247.497 191.215 247.497 cv
190.645 247.497 190.165 247.727 189.785 248.167 cv
189.565 248.407 189.395 248.757 189.275 249.197 cv
189.155 249.637 189.095 250.097 189.095 250.577 cv
189.095 251.797 189.395 252.677 189.995 253.227 cv
190.315 253.527 190.735 253.677 191.235 253.677 cv
191.755 253.677 192.185 253.517 192.525 253.197 cv
193.075 252.667 193.355 251.777 193.355 250.527 cv
1 /0 /CSD get_res sepcs
1 sep
f
196.435 249.317 mo
196.435 250.237 li
196.685 249.877 196.895 249.637 197.065 249.497 cv
197.235 249.367 197.425 249.297 197.635 249.297 cv
197.805 249.297 197.935 249.347 198.035 249.437 cv
198.135 249.537 198.185 249.667 198.185 249.827 cv
198.185 249.967 198.145 250.077 198.075 250.157 cv
198.005 250.237 197.915 250.277 197.795 250.277 cv
197.665 250.277 197.535 250.217 197.395 250.077 cv
197.285 249.977 197.195 249.927 197.135 249.927 cv
196.995 249.927 196.835 250.027 196.675 250.217 cv
196.515 250.417 196.435 250.587 196.435 250.747 cv
196.435 252.997 li
196.435 253.287 196.485 253.477 196.605 253.577 cv
196.715 253.677 196.945 253.737 197.285 253.747 cv
197.285 253.897 li
194.885 253.897 li
194.885 253.747 li
195.205 253.687 195.395 253.627 195.475 253.547 cv
195.555 253.477 195.595 253.317 195.595 253.057 cv
195.595 250.557 li
195.595 250.337 195.565 250.187 195.515 250.097 cv
195.465 250.007 195.375 249.957 195.255 249.957 cv
195.145 249.957 195.025 249.977 194.905 249.997 cv
194.905 249.837 li
195.325 249.707 195.815 249.527 196.385 249.297 cv
196.435 249.317 li
f
203.075 253.477 mo
201.605 253.987 li
201.565 253.957 li
201.565 253.327 li
201.245 253.767 200.815 253.987 200.285 253.987 cv
199.725 253.987 199.285 253.797 198.945 253.397 cv
198.605 253.007 198.435 252.487 198.435 251.847 cv
198.435 251.147 198.635 250.547 199.045 250.047 cv
199.445 249.547 199.935 249.297 200.515 249.297 cv
200.875 249.297 201.225 249.447 201.565 249.727 cv
201.565 248.167 li
201.565 247.967 201.535 247.827 201.475 247.757 cv
201.415 247.697 201.285 247.657 201.105 247.657 cv
201.005 247.657 200.935 247.667 200.885 247.667 cv
200.885 247.507 li
201.485 247.347 201.975 247.207 202.355 247.067 cv
202.405 247.087 li
202.405 252.757 li
202.405 252.997 202.425 253.147 202.485 253.217 cv
202.545 253.297 202.665 253.327 202.845 253.327 cv
202.885 253.327 202.955 253.327 203.075 253.317 cv
203.075 253.477 li
201.565 252.877 mo
201.565 250.577 li
201.565 250.317 201.455 250.077 201.255 249.877 cv
201.055 249.677 200.815 249.577 200.545 249.577 cv
200.165 249.577 199.855 249.747 199.635 250.087 cv
199.405 250.427 199.295 250.887 199.295 251.447 cv
199.295 252.067 199.415 252.557 199.665 252.927 cv
199.915 253.297 200.255 253.477 200.675 253.477 cv
200.985 253.477 201.235 253.377 201.415 253.157 cv
201.515 253.047 201.565 252.957 201.565 252.877 cv
f
207.245 252.257 mo
207.405 252.327 li
207.005 253.437 206.305 253.987 205.315 253.987 cv
204.725 253.987 204.265 253.787 203.925 253.377 cv
203.585 252.977 203.415 252.427 203.415 251.727 cv
203.415 251.017 203.605 250.437 203.985 249.977 cv
204.365 249.527 204.865 249.297 205.485 249.297 cv
206.085 249.297 206.545 249.527 206.875 249.987 cv
207.065 250.257 207.175 250.637 207.215 251.127 cv
204.135 251.127 li
204.155 251.547 204.195 251.867 204.255 252.087 cv
204.315 252.307 204.425 252.537 204.595 252.757 cv
204.875 253.127 205.245 253.307 205.705 253.307 cv
206.025 253.307 206.305 253.227 206.525 253.067 cv
206.745 252.907 206.985 252.637 207.245 252.257 cv
204.155 250.807 mo
206.195 250.807 li
206.135 250.387 206.035 250.097 205.895 249.917 cv
205.755 249.747 205.535 249.657 205.215 249.657 cv
204.935 249.657 204.695 249.757 204.515 249.957 cv
204.325 250.157 204.205 250.437 204.155 250.807 cv
f
209.205 249.317 mo
209.205 250.237 li
209.455 249.877 209.665 249.637 209.835 249.497 cv
210.005 249.367 210.195 249.297 210.405 249.297 cv
210.575 249.297 210.705 249.347 210.805 249.437 cv
210.905 249.537 210.955 249.667 210.955 249.827 cv
210.955 249.967 210.915 250.077 210.845 250.157 cv
210.775 250.237 210.685 250.277 210.565 250.277 cv
210.435 250.277 210.305 250.217 210.165 250.077 cv
210.055 249.977 209.965 249.927 209.905 249.927 cv
209.765 249.927 209.605 250.027 209.445 250.217 cv
209.285 250.417 209.205 250.587 209.205 250.747 cv
209.205 252.997 li
209.205 253.287 209.255 253.477 209.375 253.577 cv
209.485 253.677 209.715 253.737 210.055 253.747 cv
210.055 253.897 li
207.655 253.897 li
207.655 253.747 li
207.975 253.687 208.165 253.627 208.245 253.547 cv
208.325 253.477 208.365 253.317 208.365 253.057 cv
208.365 250.557 li
208.365 250.337 208.335 250.187 208.285 250.097 cv
208.235 250.007 208.145 249.957 208.025 249.957 cv
207.915 249.957 207.795 249.977 207.675 249.997 cv
207.675 249.837 li
208.095 249.707 208.585 249.527 209.155 249.297 cv
209.205 249.317 li
f
159.615 264.568 mo
179.615 264.568 li
0 .642573 1 0 cmyk
@
193.755 266.758 mo
193.945 266.938 li
193.345 267.778 192.435 268.198 191.215 268.198 cv
190.245 268.198 189.455 267.908 188.855 267.318 cv
188.215 266.698 187.895 265.858 187.895 264.818 cv
187.895 263.848 188.195 263.028 188.795 262.348 cv
189.415 261.658 190.225 261.308 191.225 261.308 cv
191.645 261.308 192.045 261.358 192.415 261.458 cv
192.835 261.578 193.065 261.638 193.105 261.638 cv
193.325 261.638 193.465 261.528 193.525 261.308 cv
193.725 261.308 li
193.815 263.578 li
193.585 263.578 li
193.475 263.098 193.305 262.728 193.065 262.468 cv
192.585 261.968 192.055 261.708 191.455 261.708 cv
190.715 261.708 190.125 261.988 189.695 262.528 cv
189.265 263.068 189.055 263.778 189.055 264.658 cv
189.055 265.738 189.295 266.528 189.775 267.048 cv
190.215 267.528 190.815 267.768 191.555 267.768 cv
191.995 267.768 192.375 267.698 192.695 267.538 cv
193.015 267.388 193.365 267.128 193.755 266.758 cv
1 /0 /CSD get_res sepcs
1 sep
f
198.975 263.438 mo
198.725 263.438 li
198.605 263.028 198.475 262.718 198.315 262.498 cv
197.905 261.978 197.425 261.718 196.865 261.718 cv
196.555 261.718 196.305 261.808 196.125 261.988 cv
195.945 262.168 195.855 262.388 195.855 262.668 cv
195.855 262.808 195.885 262.938 195.955 263.058 cv
196.015 263.188 196.085 263.298 196.165 263.388 cv
196.245 263.478 196.375 263.588 196.575 263.718 cv
196.765 263.858 196.925 263.958 197.045 264.028 cv
197.165 264.098 197.365 264.218 197.645 264.378 cv
198.185 264.698 198.575 265.008 198.825 265.318 cv
199.065 265.628 199.195 265.968 199.195 266.338 cv
199.195 266.898 198.995 267.348 198.615 267.688 cv
198.225 268.028 197.735 268.198 197.155 268.198 cv
196.715 268.198 196.325 268.118 195.975 267.978 cv
195.795 267.908 195.645 267.868 195.505 267.868 cv
195.305 267.958 li
195.245 268.018 195.225 268.088 195.225 268.188 cv
195.005 268.188 li
194.715 266.078 li
194.935 266.078 li
195.375 267.258 196.065 267.848 196.995 267.848 cv
197.345 267.848 197.635 267.748 197.855 267.538 cv
198.075 267.328 198.185 267.058 198.185 266.728 cv
198.185 266.418 198.085 266.158 197.895 265.938 cv
197.575 265.598 197.015 265.208 196.215 264.778 cv
195.395 264.348 194.995 263.778 194.995 263.058 cv
194.995 262.528 195.155 262.108 195.485 261.788 cv
195.805 261.468 196.225 261.308 196.735 261.308 cv
197.085 261.308 197.435 261.388 197.785 261.528 cv
197.965 261.608 198.105 261.648 198.225 261.648 cv
198.395 261.648 198.505 261.538 198.545 261.308 cv
198.755 261.308 li
198.975 263.438 li
f
159.615 278.74 mo
179.615 278.74 li
.831846 .112703 1 .0183108 cmyk
@
193.585 280.55 mo
193.125 282.24 li
187.735 282.24 li
187.735 282.05 li
188.115 282.03 188.355 281.96 188.455 281.85 cv
188.555 281.74 188.605 281.49 188.605 281.1 cv
188.605 276.74 li
188.605 276.37 188.545 276.13 188.445 276.01 cv
188.345 275.9 188.105 275.83 187.735 275.81 cv
187.735 275.62 li
193.035 275.62 li
193.075 277.05 li
192.825 277.05 li
192.745 276.61 192.615 276.32 192.435 276.19 cv
192.245 276.07 191.865 276 191.285 276 cv
189.975 276 li
189.825 276 189.725 276.03 189.685 276.07 cv
189.645 276.11 189.625 276.21 189.625 276.36 cv
189.625 278.56 li
191.135 278.56 li
191.555 278.56 191.825 278.5 191.965 278.38 cv
192.105 278.26 192.205 278 192.265 277.6 cv
192.495 277.6 li
192.495 279.94 li
192.265 279.94 li
192.205 279.52 192.105 279.26 191.975 279.14 cv
191.835 279.03 191.555 278.97 191.135 278.97 cv
189.625 278.97 li
189.625 281.4 li
189.625 281.6 189.695 281.73 189.835 281.79 cv
189.975 281.85 190.235 281.87 190.635 281.87 cv
190.995 281.87 li
191.705 281.87 192.215 281.79 192.515 281.61 cv
192.815 281.44 193.075 281.09 193.305 280.55 cv
193.585 280.55 li
1 /0 /CSD get_res sepcs
1 sep
f
200.775 275.62 mo
200.775 275.81 li
200.365 275.85 200.105 275.95 199.995 276.11 cv
199.885 276.27 199.835 276.59 199.835 277.08 cv
199.835 279.63 li
199.835 280.15 199.795 280.55 199.725 280.84 cv
199.645 281.14 199.505 281.41 199.295 281.65 cv
198.865 282.13 198.195 282.37 197.275 282.37 cv
196.545 282.37 195.975 282.22 195.575 281.92 cv
195.035 281.52 194.765 280.8 194.765 279.75 cv
194.765 276.65 li
194.765 276.32 194.705 276.1 194.605 276 cv
194.505 275.9 194.255 275.84 193.865 275.81 cv
193.865 275.62 li
196.695 275.62 li
196.695 275.81 li
196.295 275.85 196.035 275.92 195.935 276.03 cv
195.835 276.14 195.785 276.38 195.785 276.75 cv
195.785 279.87 li
195.785 280.31 195.805 280.64 195.865 280.87 cv
195.915 281.11 196.035 281.31 196.225 281.49 cv
196.535 281.79 196.965 281.94 197.505 281.94 cv
198.175 281.94 198.685 281.75 199.025 281.35 cv
199.175 281.17 199.275 280.96 199.325 280.74 cv
199.365 280.52 199.395 280.18 199.395 279.74 cv
199.395 277.11 li
199.395 276.59 199.335 276.25 199.225 276.09 cv
199.105 275.93 198.855 275.84 198.455 275.81 cv
198.455 275.62 li
200.775 275.62 li
f
159.615 292.912 mo
179.615 292.912 li
.0993362 1 1 .024445 cmyk
@
191.155 289.792 mo
191.155 289.982 li
190.745 290.022 190.485 290.092 190.385 290.192 cv
190.285 290.292 190.235 290.542 190.235 290.922 cv
190.235 294.562 li
190.235 295.882 189.675 296.542 188.565 296.542 cv
188.255 296.542 188.015 296.482 187.835 296.362 cv
187.655 296.242 187.565 296.062 187.565 295.832 cv
187.565 295.702 187.615 295.582 187.705 295.472 cv
187.795 295.372 187.905 295.312 188.045 295.312 cv
188.265 295.312 188.425 295.452 188.535 295.732 cv
188.585 295.872 li
188.625 296.002 li
188.675 296.092 li
188.745 296.152 li
188.845 296.172 li
188.985 296.172 189.085 296.122 189.135 296.022 cv
189.185 295.922 189.215 295.732 189.215 295.472 cv
189.215 290.912 li
189.215 290.522 189.165 290.282 189.065 290.182 cv
188.965 290.082 188.705 290.022 188.285 289.982 cv
188.285 289.792 li
191.155 289.792 li
1 /0 /CSD get_res sepcs
1 sep
f
194.495 296.412 mo
191.525 296.412 li
191.525 296.222 li
191.945 296.212 192.205 296.152 192.325 296.042 cv
192.435 295.932 192.495 295.682 192.495 295.292 cv
192.495 290.902 li
192.495 290.522 192.435 290.272 192.335 290.172 cv
192.225 290.072 191.955 290.012 191.525 289.982 cv
191.525 289.792 li
194.495 289.792 li
194.495 289.982 li
194.075 290.002 193.805 290.072 193.685 290.172 cv
193.565 290.282 193.515 290.522 193.515 290.902 cv
193.515 295.292 li
193.515 295.672 193.575 295.912 193.695 296.032 cv
193.815 296.152 194.075 296.212 194.495 296.222 cv
194.495 296.412 li
f
252.393 307.584 mo
414.72 307.584 li
414.72 186.624 li
252.393 186.624 li
252.393 307.584 li
1 /0 /CSD get_res sepcs
0 sep
f
259.771 307.584 mo
259.771 311.084 li
1 /0 /CSD get_res sepcs
1 sep
f
.8 lw
0 lc
259.771 307.584 mo
259.771 311.084 li
@
262.031 318.112 mo
262.031 318.562 261.981 318.982 261.901 319.382 cv
261.811 319.782 261.681 320.142 261.511 320.472 cv
261.341 320.812 261.111 321.072 260.811 321.262 cv
260.511 321.442 260.161 321.542 259.771 321.542 cv
259.361 321.542 259.001 321.442 258.701 321.242 cv
258.391 321.042 258.151 320.762 257.991 320.412 cv
257.821 320.072 257.701 319.702 257.621 319.302 cv
257.541 318.912 257.511 318.492 257.511 318.052 cv
257.511 317.432 257.581 316.882 257.741 316.382 cv
257.891 315.882 258.141 315.472 258.501 315.142 cv
258.861 314.822 259.291 314.652 259.811 314.652 cv
260.461 314.652 260.991 314.972 261.411 315.612 cv
261.821 316.252 262.031 317.092 262.031 318.112 cv
261.071 318.162 mo
261.071 317.112 260.951 316.312 260.731 315.752 cv
260.511 315.192 260.181 314.912 259.751 314.912 cv
259.331 314.912 259.021 315.192 258.801 315.752 cv
258.581 316.312 258.471 317.102 258.471 318.122 cv
258.471 319.152 258.581 319.942 258.801 320.482 cv
259.021 321.022 259.341 321.292 259.771 321.292 cv
260.191 321.292 260.511 321.022 260.731 320.482 cv
260.951 319.942 261.071 319.162 261.071 318.162 cv
f
284.366 307.584 mo
284.366 311.084 li
f
284.366 307.584 mo
284.366 311.084 li
@
286.596 319.742 mo
285.566 319.742 li
285.566 321.412 li
284.786 321.412 li
284.786 319.742 li
281.986 319.742 li
281.986 319.102 li
285.126 314.652 li
285.566 314.652 li
285.566 319.102 li
286.596 319.102 li
286.596 319.742 li
284.786 319.102 mo
284.786 315.672 li
282.386 319.102 li
284.786 319.102 li
f
308.961 307.584 mo
308.961 311.084 li
f
308.961 307.584 mo
308.961 311.084 li
@
310.911 319.862 mo
310.911 320.382 310.731 320.792 310.371 321.092 cv
310.011 321.392 309.541 321.542 308.941 321.542 cv
308.381 321.542 307.921 321.392 307.561 321.092 cv
307.201 320.792 307.021 320.402 307.021 319.922 cv
307.021 319.572 307.101 319.272 307.281 319.022 cv
307.451 318.772 307.801 318.462 308.321 318.092 cv
307.821 317.682 307.481 317.352 307.321 317.092 cv
307.161 316.842 307.081 316.552 307.081 316.212 cv
307.081 315.742 307.261 315.362 307.621 315.082 cv
307.981 314.802 308.451 314.652 309.021 314.652 cv
309.501 314.652 309.901 314.792 310.221 315.072 cv
310.541 315.352 310.701 315.682 310.701 316.082 cv
310.701 316.452 310.601 316.742 310.411 316.962 cv
310.221 317.182 309.871 317.432 309.361 317.702 cv
309.961 318.102 310.361 318.462 310.581 318.772 cv
310.801 319.092 310.911 319.452 310.911 319.862 cv
310.011 316.082 mo
310.011 315.742 309.911 315.462 309.721 315.252 cv
309.521 315.042 309.261 314.932 308.921 314.932 cv
308.581 314.932 308.311 315.022 308.111 315.202 cv
307.911 315.382 307.821 315.622 307.821 315.922 cv
307.821 316.232 307.911 316.512 308.111 316.762 cv
308.311 317.012 308.631 317.262 309.071 317.522 cv
309.411 317.322 309.651 317.112 309.791 316.892 cv
309.931 316.672 310.011 316.402 310.011 316.082 cv
309.171 318.692 mo
308.581 318.292 li
308.281 318.532 308.081 318.772 307.961 319.002 cv
307.841 319.232 307.781 319.512 307.781 319.832 cv
307.781 320.292 307.891 320.642 308.121 320.892 cv
308.351 321.152 308.661 321.272 309.051 321.272 cv
309.371 321.272 309.641 321.172 309.841 320.972 cv
310.041 320.772 310.151 320.502 310.151 320.172 cv
310.151 319.872 310.071 319.612 309.921 319.382 cv
309.761 319.162 309.511 318.932 309.171 318.692 cv
f
333.556 307.584 mo
333.556 311.084 li
f
333.556 307.584 mo
333.556 311.084 li
@
332.496 321.412 mo
329.736 321.412 li
329.736 321.262 li
330.096 321.242 330.346 321.182 330.486 321.062 cv
330.616 320.942 330.686 320.742 330.686 320.462 cv
330.686 315.972 li
330.686 315.652 330.586 315.482 330.386 315.482 cv
330.286 315.482 330.136 315.522 329.936 315.602 cv
329.666 315.702 li
329.666 315.562 li
331.456 314.652 li
331.546 314.682 li
331.546 320.652 li
331.546 320.872 331.606 321.032 331.746 321.122 cv
331.876 321.222 332.126 321.262 332.496 321.262 cv
332.496 321.412 li
f
338.296 320.042 mo
337.756 321.412 li
333.846 321.412 li
333.846 321.292 li
335.626 319.402 li
336.086 318.922 336.426 318.472 336.626 318.062 cv
336.826 317.662 336.926 317.242 336.926 316.802 cv
336.926 316.362 336.796 316.012 336.556 315.762 cv
336.306 315.522 335.966 315.392 335.536 315.392 cv
335.176 315.392 334.886 315.492 334.676 315.672 cv
334.466 315.862 334.266 316.202 334.066 316.692 cv
333.856 316.642 li
333.966 316.022 334.196 315.542 334.536 315.182 cv
334.876 314.832 335.346 314.652 335.936 314.652 cv
336.486 314.652 336.936 314.822 337.276 315.152 cv
337.616 315.492 337.786 315.912 337.786 316.412 cv
337.786 317.172 337.356 317.992 336.506 318.892 cv
334.856 320.652 li
337.196 320.652 li
337.416 320.652 337.586 320.612 337.716 320.522 cv
337.846 320.442 337.996 320.262 338.156 319.982 cv
338.296 320.042 li
f
358.151 307.584 mo
358.151 311.084 li
f
358.151 307.584 mo
358.151 311.084 li
@
357.091 321.412 mo
354.331 321.412 li
354.331 321.262 li
354.691 321.242 354.941 321.182 355.081 321.062 cv
355.211 320.942 355.281 320.742 355.281 320.462 cv
355.281 315.972 li
355.281 315.652 355.181 315.482 354.981 315.482 cv
354.881 315.482 354.731 315.522 354.531 315.602 cv
354.261 315.702 li
354.261 315.562 li
356.051 314.652 li
356.141 314.682 li
356.141 320.652 li
356.141 320.872 356.201 321.032 356.341 321.122 cv
356.471 321.222 356.721 321.262 357.091 321.262 cv
357.091 321.412 li
f
362.611 314.572 mo
362.631 314.732 li
361.841 314.862 361.181 315.182 360.661 315.692 cv
360.131 316.202 359.801 316.832 359.671 317.582 cv
360.051 317.282 360.481 317.132 360.941 317.132 cv
361.521 317.132 361.981 317.322 362.321 317.692 cv
362.661 318.072 362.831 318.582 362.831 319.222 cv
362.831 319.882 362.661 320.412 362.321 320.822 cv
361.921 321.302 361.391 321.542 360.731 321.542 cv
359.911 321.542 359.321 321.212 358.961 320.542 cv
358.641 319.972 358.491 319.332 358.491 318.622 cv
358.491 317.532 358.851 316.612 359.581 315.862 cv
359.991 315.442 360.411 315.142 360.851 314.962 cv
361.291 314.782 361.871 314.652 362.611 314.572 cv
361.931 319.532 mo
361.931 318.242 361.481 317.592 360.581 317.592 cv
360.241 317.592 359.971 317.682 359.751 317.862 cv
359.531 318.042 359.421 318.332 359.421 318.752 cv
359.421 319.532 359.541 320.152 359.781 320.602 cv
360.021 321.052 360.381 321.272 360.841 321.272 cv
361.191 321.272 361.461 321.122 361.651 320.802 cv
361.831 320.482 361.931 320.062 361.931 319.532 cv
f
382.746 307.584 mo
382.746 311.084 li
f
382.746 307.584 mo
382.746 311.084 li
@
382.486 320.042 mo
381.946 321.412 li
378.036 321.412 li
378.036 321.292 li
379.816 319.402 li
380.276 318.922 380.616 318.472 380.816 318.062 cv
381.016 317.662 381.116 317.242 381.116 316.802 cv
381.116 316.362 380.986 316.012 380.746 315.762 cv
380.496 315.522 380.156 315.392 379.726 315.392 cv
379.366 315.392 379.076 315.492 378.866 315.672 cv
378.656 315.862 378.456 316.202 378.256 316.692 cv
378.046 316.642 li
378.156 316.022 378.386 315.542 378.726 315.182 cv
379.066 314.832 379.536 314.652 380.126 314.652 cv
380.676 314.652 381.126 314.822 381.466 315.152 cv
381.806 315.492 381.976 315.912 381.976 316.412 cv
381.976 317.172 381.546 317.992 380.696 318.892 cv
379.046 320.652 li
381.386 320.652 li
381.606 320.652 381.776 320.612 381.906 320.522 cv
382.036 320.442 382.186 320.262 382.346 319.982 cv
382.486 320.042 li
f
387.506 318.112 mo
387.506 318.562 387.456 318.982 387.376 319.382 cv
387.286 319.782 387.156 320.142 386.986 320.472 cv
386.816 320.812 386.586 321.072 386.286 321.262 cv
385.986 321.442 385.636 321.542 385.246 321.542 cv
384.836 321.542 384.476 321.442 384.176 321.242 cv
383.866 321.042 383.626 320.762 383.466 320.412 cv
383.296 320.072 383.176 319.702 383.096 319.302 cv
383.016 318.912 382.986 318.492 382.986 318.052 cv
382.986 317.432 383.056 316.882 383.216 316.382 cv
383.366 315.882 383.616 315.472 383.976 315.142 cv
384.336 314.822 384.766 314.652 385.286 314.652 cv
385.936 314.652 386.466 314.972 386.886 315.612 cv
387.296 316.252 387.506 317.092 387.506 318.112 cv
386.546 318.162 mo
386.546 317.112 386.426 316.312 386.206 315.752 cv
385.986 315.192 385.656 314.912 385.226 314.912 cv
384.806 314.912 384.496 315.192 384.276 315.752 cv
384.056 316.312 383.946 317.102 383.946 318.122 cv
383.946 319.152 384.056 319.942 384.276 320.482 cv
384.496 321.022 384.816 321.292 385.246 321.292 cv
385.666 321.292 385.986 321.022 386.206 320.482 cv
386.426 319.942 386.546 319.162 386.546 318.162 cv
f
407.341 307.584 mo
407.341 311.084 li
f
407.341 307.584 mo
407.341 311.084 li
@
407.081 320.042 mo
406.542 321.412 li
402.632 321.412 li
402.632 321.292 li
404.411 319.402 li
404.871 318.922 405.211 318.472 405.411 318.062 cv
405.611 317.662 405.711 317.242 405.711 316.802 cv
405.711 316.362 405.581 316.012 405.341 315.762 cv
405.091 315.522 404.751 315.392 404.322 315.392 cv
403.961 315.392 403.671 315.492 403.461 315.672 cv
403.251 315.862 403.051 316.202 402.852 316.692 cv
402.641 316.642 li
402.751 316.022 402.982 315.542 403.322 315.182 cv
403.661 314.832 404.132 314.652 404.721 314.652 cv
405.271 314.652 405.721 314.822 406.061 315.152 cv
406.401 315.492 406.572 315.912 406.572 316.412 cv
406.572 317.172 406.141 317.992 405.292 318.892 cv
403.641 320.652 li
405.982 320.652 li
406.201 320.652 406.371 320.612 406.501 320.522 cv
406.632 320.442 406.781 320.262 406.941 319.982 cv
407.081 320.042 li
f
412.072 319.742 mo
411.042 319.742 li
411.042 321.412 li
410.262 321.412 li
410.262 319.742 li
407.461 319.742 li
407.461 319.102 li
410.602 314.652 li
411.042 314.652 li
411.042 319.102 li
412.072 319.102 li
412.072 319.742 li
410.262 319.102 mo
410.262 315.672 li
407.861 319.102 li
410.262 319.102 li
f
252.393 302.114 mo
248.893 302.114 li
f
252.393 302.114 mo
248.893 302.114 li
@
252.393 279.818 mo
248.893 279.818 li
f
252.393 279.818 mo
248.893 279.818 li
@
252.393 257.523 mo
248.893 257.523 li
f
252.393 257.523 mo
248.893 257.523 li
@
252.393 235.227 mo
248.893 235.227 li
f
252.393 235.227 mo
248.893 235.227 li
@
252.393 212.931 mo
248.893 212.931 li
f
252.393 212.931 mo
248.893 212.931 li
@
252.393 190.636 mo
248.893 190.636 li
f
252.393 190.636 mo
248.893 190.636 li
@
1.5 lw
2 lc
259.771 302.086 mo
272.069 277.421 li
284.366 266.218 li
296.664 256.965 li
308.961 248.409 li
321.259 242.78 li
333.556 238.237 li
345.854 231.381 li
358.151 226.03 li
370.449 221.404 li
382.746 216.945 li
395.044 212.263 li
407.341 207.998 li
.906126 .514977 .0511788 .00137331 cmyk
@
259.771 302.086 mo
272.069 266.329 li
284.366 255.823 li
296.664 250.862 li
308.961 240.439 li
321.259 235.756 li
333.556 229.43 li
345.854 221.85 li
358.151 217.669 li
370.449 210.423 li
382.746 206.939 li
395.044 203.093 li
407.341 199.972 li
0 .642573 1 0 cmyk
@
259.771 302.086 mo
272.069 268.392 li
284.366 257.132 li
296.664 247.127 li
308.961 236.258 li
321.259 232.858 li
333.556 228.148 li
345.854 225.25 li
358.151 221.766 li
370.449 218.84 li
382.746 217.084 li
395.044 211.649 li
407.341 207.859 li
.831846 .112703 1 .0183108 cmyk
@
259.771 302.086 mo
272.069 267.695 li
284.366 260.087 li
296.664 253.259 li
308.961 250.695 li
321.259 246.514 li
333.556 241.971 li
345.854 238.042 li
358.151 235.896 li
370.449 232.579 li
382.746 229.709 li
395.044 226.866 li
407.341 220.094 li
.0993362 1 1 .024445 cmyk
@
.8 lw
0 lj
252.393 307.584 mo
252.393 186.624 li
1 /0 /CSD get_res sepcs
1 sep
@
414.72 307.584 mo
414.72 186.624 li
@
252.393 307.584 mo
414.72 307.584 li
@
252.393 186.624 mo
414.72 186.624 li
@
311.296 179.469 mo
311.491 179.634 li
311.011 180.384 310.396 180.759 309.676 180.759 cv
308.791 180.759 308.356 180.129 308.356 178.869 cv
308.356 174.354 li
307.561 174.354 li
307.501 174.249 li
307.501 174.174 307.576 174.084 307.756 173.964 cv
308.131 173.754 308.611 173.214 309.211 172.359 cv
309.226 172.329 309.271 172.269 309.346 172.179 cv
309.511 171.939 li
309.571 171.939 309.616 172.014 309.616 172.134 cv
309.616 173.874 li
311.131 173.874 li
311.131 174.354 li
309.616 174.354 li
309.616 178.644 li
309.616 179.124 309.676 179.469 309.796 179.679 cv
309.916 179.889 310.111 179.994 310.396 179.994 cv
310.696 179.994 310.996 179.829 311.296 179.469 cv
f
317.446 178.284 mo
317.656 178.419 li
317.221 179.259 316.816 179.844 316.426 180.144 cv
315.916 180.564 315.331 180.759 314.701 180.759 cv
313.861 180.759 313.186 180.459 312.646 179.829 cv
312.106 179.214 311.851 178.419 311.851 177.444 cv
311.851 176.184 312.271 175.194 313.111 174.489 cv
313.726 173.979 314.401 173.724 315.136 173.724 cv
315.766 173.724 316.306 173.889 316.756 174.189 cv
317.206 174.489 317.446 174.849 317.446 175.269 cv
317.446 175.449 317.371 175.599 317.236 175.719 cv
317.086 175.839 316.921 175.899 316.741 175.899 cv
316.381 175.899 316.141 175.674 316.021 175.209 cv
315.931 174.879 li
315.841 174.609 315.751 174.414 315.631 174.309 cv
315.511 174.219 315.316 174.159 315.046 174.159 cv
314.431 174.159 313.936 174.399 313.561 174.879 cv
313.186 175.359 313.006 175.989 313.006 176.769 cv
313.006 177.639 313.216 178.344 313.651 178.884 cv
314.071 179.424 314.641 179.694 315.331 179.694 cv
315.751 179.694 316.126 179.604 316.441 179.394 cv
316.741 179.184 317.086 178.824 317.446 178.284 cv
f
320.521 173.754 mo
320.521 174.909 li
321.151 174.129 321.871 173.724 322.681 173.724 cv
323.401 173.724 324.001 174.024 324.481 174.624 cv
324.946 175.224 325.186 175.989 325.186 176.919 cv
325.186 178.014 324.871 178.929 324.271 179.664 cv
323.671 180.399 322.921 180.759 322.036 180.759 cv
321.721 180.759 321.451 180.714 321.241 180.624 cv
321.031 180.549 320.791 180.384 320.521 180.129 cv
320.521 182.469 li
320.521 182.934 320.596 183.234 320.761 183.369 cv
320.911 183.504 321.271 183.579 321.841 183.594 cv
321.841 183.864 li
318.211 183.864 li
318.211 183.609 li
318.646 183.564 318.931 183.474 319.066 183.354 cv
319.186 183.219 319.261 182.964 319.261 182.574 cv
319.261 175.569 li
319.261 175.224 319.216 174.999 319.141 174.879 cv
319.051 174.774 318.886 174.714 318.646 174.714 cv
318.481 174.714 318.361 174.729 318.271 174.729 cv
318.271 174.489 li
318.961 174.279 319.681 174.024 320.431 173.724 cv
320.521 173.754 li
320.521 175.614 mo
320.521 179.304 li
320.521 179.529 320.686 179.754 321.031 179.964 cv
321.376 180.189 321.721 180.294 322.081 180.294 cv
322.621 180.294 323.056 180.039 323.386 179.529 cv
323.716 179.019 323.896 178.359 323.896 177.519 cv
323.896 176.649 323.716 175.944 323.386 175.419 cv
323.056 174.894 322.606 174.624 322.051 174.624 cv
321.691 174.624 321.346 174.744 321.016 174.954 cv
320.686 175.179 320.521 175.404 320.521 175.614 cv
f
333.001 179.994 mo
330.796 180.759 li
330.736 180.714 li
330.736 179.769 li
330.256 180.429 329.611 180.759 328.816 180.759 cv
327.976 180.759 327.316 180.474 326.806 179.874 cv
326.296 179.289 326.041 178.509 326.041 177.549 cv
326.041 176.499 326.341 175.599 326.956 174.849 cv
327.556 174.099 328.291 173.724 329.161 173.724 cv
329.701 173.724 330.226 173.949 330.736 174.369 cv
330.736 172.029 li
330.736 171.729 330.691 171.519 330.601 171.414 cv
330.511 171.324 330.316 171.264 330.046 171.264 cv
329.896 171.264 329.791 171.279 329.716 171.279 cv
329.716 171.039 li
330.616 170.799 331.351 170.589 331.921 170.379 cv
331.996 170.409 li
331.996 178.914 li
331.996 179.274 332.026 179.499 332.116 179.604 cv
332.206 179.724 332.386 179.769 332.656 179.769 cv
332.716 179.769 332.821 179.769 333.001 179.754 cv
333.001 179.994 li
330.736 179.094 mo
330.736 175.644 li
330.736 175.254 330.571 174.894 330.271 174.594 cv
329.971 174.294 329.611 174.144 329.206 174.144 cv
328.636 174.144 328.171 174.399 327.841 174.909 cv
327.496 175.419 327.331 176.109 327.331 176.949 cv
327.331 177.879 327.511 178.614 327.886 179.169 cv
328.261 179.724 328.771 179.994 329.401 179.994 cv
329.866 179.994 330.241 179.844 330.511 179.514 cv
330.661 179.349 330.736 179.214 330.736 179.094 cv
f
340.336 179.874 mo
340.336 180.084 li
339.556 180.294 338.866 180.519 338.281 180.744 cv
338.206 180.699 li
338.206 179.484 li
338.176 179.484 li
337.546 180.339 336.826 180.759 336.031 180.759 cv
335.461 180.759 335.011 180.594 334.681 180.249 cv
334.351 179.904 334.201 179.439 334.201 178.854 cv
334.201 175.089 li
334.201 174.729 334.126 174.474 334.006 174.324 cv
333.871 174.189 333.631 174.114 333.271 174.084 cv
333.271 173.874 li
335.461 173.874 li
335.461 178.719 li
335.461 179.064 335.551 179.349 335.761 179.574 cv
335.971 179.799 336.226 179.904 336.526 179.904 cv
337.006 179.904 337.426 179.754 337.786 179.439 cv
337.906 179.319 337.996 179.214 338.056 179.109 cv
338.101 179.004 338.131 178.824 338.131 178.569 cv
338.131 175.104 li
338.131 174.714 338.056 174.474 337.921 174.354 cv
337.771 174.234 337.471 174.159 337.021 174.129 cv
337.021 173.874 li
339.391 173.874 li
339.391 179.019 li
339.391 179.379 339.436 179.604 339.556 179.709 cv
339.676 179.829 339.901 179.874 340.246 179.874 cv
340.336 179.874 li
f
352.261 180.624 mo
348.991 180.624 li
348.991 180.399 li
349.411 180.369 349.666 180.279 349.786 180.144 cv
349.906 180.009 349.966 179.724 349.966 179.274 cv
349.966 176.184 li
349.966 175.584 349.876 175.164 349.696 174.894 cv
349.516 174.639 349.231 174.504 348.811 174.504 cv
348.451 174.504 348.151 174.579 347.911 174.714 cv
347.671 174.864 347.431 175.089 347.206 175.419 cv
347.206 179.199 li
347.206 179.679 347.266 180.009 347.416 180.159 cv
347.566 180.309 347.851 180.399 348.286 180.399 cv
348.286 180.624 li
344.926 180.624 li
344.926 180.399 li
345.361 180.369 345.646 180.309 345.766 180.189 cv
345.886 180.069 345.946 179.784 345.946 179.334 cv
345.946 176.169 li
345.946 175.059 345.616 174.504 344.971 174.504 cv
344.686 174.504 344.386 174.579 344.071 174.699 cv
343.756 174.819 343.531 174.969 343.381 175.149 cv
343.246 175.299 343.186 175.389 343.186 175.404 cv
343.186 179.574 li
343.186 179.904 343.246 180.114 343.396 180.219 cv
343.531 180.324 343.801 180.384 344.206 180.399 cv
344.206 180.624 li
340.876 180.624 li
340.876 180.399 li
341.296 180.399 341.566 180.324 341.716 180.174 cv
341.851 180.024 341.926 179.739 341.926 179.304 cv
341.926 175.584 li
341.926 175.224 341.881 174.969 341.806 174.819 cv
341.716 174.669 341.581 174.594 341.401 174.594 cv
341.251 174.594 341.086 174.624 340.921 174.654 cv
340.921 174.399 li
341.596 174.219 342.286 173.994 343.006 173.724 cv
343.126 173.769 li
343.126 174.879 li
343.156 174.879 li
343.606 174.414 343.996 174.099 344.341 173.949 cv
344.686 173.799 345.061 173.724 345.451 173.724 cv
346.231 173.724 346.771 174.144 347.041 174.984 cv
347.821 174.144 348.631 173.724 349.486 173.724 cv
350.641 173.724 351.226 174.624 351.226 176.424 cv
351.226 179.469 li
351.226 179.799 351.271 180.039 351.376 180.159 cv
351.466 180.279 351.631 180.354 351.871 180.369 cv
352.261 180.399 li
352.261 180.624 li
f
354.691 173.754 mo
354.691 174.909 li
355.321 174.129 356.041 173.724 356.851 173.724 cv
357.571 173.724 358.171 174.024 358.651 174.624 cv
359.116 175.224 359.356 175.989 359.356 176.919 cv
359.356 178.014 359.041 178.929 358.441 179.664 cv
357.841 180.399 357.091 180.759 356.206 180.759 cv
355.891 180.759 355.621 180.714 355.411 180.624 cv
355.201 180.549 354.961 180.384 354.691 180.129 cv
354.691 182.469 li
354.691 182.934 354.766 183.234 354.931 183.369 cv
355.081 183.504 355.441 183.579 356.011 183.594 cv
356.011 183.864 li
352.381 183.864 li
352.381 183.609 li
352.816 183.564 353.101 183.474 353.236 183.354 cv
353.356 183.219 353.431 182.964 353.431 182.574 cv
353.431 175.569 li
353.431 175.224 353.386 174.999 353.311 174.879 cv
353.221 174.774 353.056 174.714 352.816 174.714 cv
352.651 174.714 352.531 174.729 352.441 174.729 cv
352.441 174.489 li
353.131 174.279 353.851 174.024 354.601 173.724 cv
354.691 173.754 li
354.691 175.614 mo
354.691 179.304 li
354.691 179.529 354.856 179.754 355.201 179.964 cv
355.546 180.189 355.891 180.294 356.251 180.294 cv
356.791 180.294 357.226 180.039 357.556 179.529 cv
357.886 179.019 358.066 178.359 358.066 177.519 cv
358.066 176.649 357.886 175.944 357.556 175.419 cv
357.226 174.894 356.776 174.624 356.221 174.624 cv
355.861 174.624 355.516 174.744 355.186 174.954 cv
354.856 175.179 354.691 175.404 354.691 175.614 cv
f
407.72 302.084 mo
352.408 302.084 li
351.818 302.082 351.47 301.94 351.261 301.73 cv
351.052 301.521 350.909 301.174 350.907 300.584 cv
350.907 244.896 li
350.909 244.307 351.052 243.959 351.261 243.75 cv
351.47 243.541 351.818 243.398 352.408 243.396 cv
407.72 243.396 li
408.31 243.398 408.657 243.541 408.866 243.75 cv
409.076 243.959 409.218 244.307 409.22 244.896 cv
409.22 300.584 li
409.218 301.174 409.076 301.521 408.866 301.73 cv
408.657 301.94 408.31 302.082 407.72 302.084 cv
1 /1 /CSD get_res sepcs
0 sep
f
407.731 303.084 mo
407.727 303.084 407.724 303.084 407.72 303.084 cv
352.408 303.084 li
352.404 303.084 352.4 303.084 352.397 303.084 cv
351.658 303.084 351.009 302.893 350.554 302.438 cv
350.097 301.98 349.906 301.327 349.908 300.584 cv
349.908 244.896 li
349.906 244.153 350.097 243.5 350.554 243.043 cv
351.009 242.588 351.658 242.396 352.398 242.396 cv
352.401 242.396 352.404 242.396 352.408 242.396 cv
407.72 242.396 li
407.723 242.396 407.727 242.396 407.73 242.396 cv
408.469 242.396 409.118 242.588 409.573 243.043 cv
410.031 243.5 410.222 244.153 410.22 244.896 cv
410.22 300.584 li
410.222 301.327 410.031 301.98 409.573 302.438 cv
409.118 302.892 408.47 303.084 407.731 303.084 cv
352.408 302.084 mo
407.72 302.084 li
408.31 302.082 408.657 301.94 408.866 301.73 cv
409.076 301.521 409.218 301.174 409.22 300.584 cv
409.22 244.896 li
409.218 244.307 409.076 243.959 408.866 243.75 cv
408.657 243.541 408.31 243.398 407.72 243.396 cv
352.408 243.396 li
351.818 243.398 351.47 243.541 351.261 243.75 cv
351.052 243.959 350.909 244.307 350.907 244.896 cv
350.907 300.584 li
350.909 301.174 351.052 301.521 351.261 301.73 cv
351.47 301.94 351.818 302.082 352.408 302.084 cv
352.408 302.084 li
1 /1 /CSD get_res sepcs
.160784 sep
f
1.5 lw
1 lj
354.408 250.397 mo
374.408 250.397 li
.906126 .514977 .0511788 .00137331 cmyk
@
389.288 250.587 mo
389.288 251.617 388.978 252.447 388.378 253.077 cv
387.768 253.717 386.978 254.027 386.017 254.027 cv
385.038 254.027 384.247 253.717 383.647 253.077 cv
383.048 252.437 382.747 251.597 382.747 250.557 cv
382.747 249.547 383.048 248.727 383.647 248.087 cv
384.247 247.457 385.038 247.137 386.017 247.137 cv
386.987 247.137 387.777 247.467 388.378 248.117 cv
388.978 248.767 389.288 249.587 389.288 250.587 cv
388.147 250.527 mo
388.147 249.967 388.068 249.457 387.908 249.007 cv
387.747 248.557 387.517 248.207 387.237 247.967 cv
386.858 247.657 386.448 247.497 386.008 247.497 cv
385.438 247.497 384.957 247.727 384.578 248.167 cv
384.358 248.407 384.188 248.757 384.068 249.197 cv
383.948 249.637 383.888 250.097 383.888 250.577 cv
383.888 251.797 384.188 252.677 384.788 253.227 cv
385.108 253.527 385.527 253.677 386.027 253.677 cv
386.548 253.677 386.978 253.517 387.318 253.197 cv
387.867 252.667 388.147 251.777 388.147 250.527 cv
1 /0 /CSD get_res sepcs
1 sep
f
391.228 249.317 mo
391.228 250.237 li
391.478 249.877 391.688 249.637 391.858 249.497 cv
392.027 249.367 392.217 249.297 392.427 249.297 cv
392.598 249.297 392.728 249.347 392.828 249.437 cv
392.927 249.537 392.978 249.667 392.978 249.827 cv
392.978 249.967 392.938 250.077 392.867 250.157 cv
392.798 250.237 392.707 250.277 392.587 250.277 cv
392.457 250.277 392.328 250.217 392.188 250.077 cv
392.078 249.977 391.987 249.927 391.927 249.927 cv
391.788 249.927 391.628 250.027 391.467 250.217 cv
391.307 250.417 391.228 250.587 391.228 250.747 cv
391.228 252.997 li
391.228 253.287 391.277 253.477 391.397 253.577 cv
391.508 253.677 391.737 253.737 392.078 253.747 cv
392.078 253.897 li
389.677 253.897 li
389.677 253.747 li
389.997 253.687 390.188 253.627 390.268 253.547 cv
390.348 253.477 390.388 253.317 390.388 253.057 cv
390.388 250.557 li
390.388 250.337 390.358 250.187 390.307 250.097 cv
390.258 250.007 390.168 249.957 390.048 249.957 cv
389.938 249.957 389.818 249.977 389.698 249.997 cv
389.698 249.837 li
390.117 249.707 390.608 249.527 391.177 249.297 cv
391.228 249.317 li
f
397.867 253.477 mo
396.397 253.987 li
396.357 253.957 li
396.357 253.327 li
396.037 253.767 395.607 253.987 395.077 253.987 cv
394.517 253.987 394.077 253.797 393.737 253.397 cv
393.397 253.007 393.227 252.487 393.227 251.847 cv
393.227 251.147 393.427 250.547 393.837 250.047 cv
394.237 249.547 394.727 249.297 395.307 249.297 cv
395.667 249.297 396.017 249.447 396.357 249.727 cv
396.357 248.167 li
396.357 247.967 396.327 247.827 396.267 247.757 cv
396.207 247.697 396.077 247.657 395.897 247.657 cv
395.797 247.657 395.727 247.667 395.677 247.667 cv
395.677 247.507 li
396.277 247.347 396.767 247.207 397.147 247.067 cv
397.197 247.087 li
397.197 252.757 li
397.197 252.997 397.217 253.147 397.277 253.217 cv
397.337 253.297 397.457 253.327 397.637 253.327 cv
397.677 253.327 397.747 253.327 397.867 253.317 cv
397.867 253.477 li
396.357 252.877 mo
396.357 250.577 li
396.357 250.317 396.247 250.077 396.047 249.877 cv
395.847 249.677 395.607 249.577 395.337 249.577 cv
394.957 249.577 394.647 249.747 394.427 250.087 cv
394.197 250.427 394.087 250.887 394.087 251.447 cv
394.087 252.067 394.207 252.557 394.457 252.927 cv
394.707 253.297 395.047 253.477 395.467 253.477 cv
395.777 253.477 396.027 253.377 396.207 253.157 cv
396.307 253.047 396.357 252.957 396.357 252.877 cv
f
402.037 252.257 mo
402.197 252.327 li
401.797 253.437 401.097 253.987 400.107 253.987 cv
399.517 253.987 399.057 253.787 398.717 253.377 cv
398.377 252.977 398.207 252.427 398.207 251.727 cv
398.207 251.017 398.397 250.437 398.777 249.977 cv
399.157 249.527 399.657 249.297 400.277 249.297 cv
400.877 249.297 401.337 249.527 401.667 249.987 cv
401.857 250.257 401.967 250.637 402.007 251.127 cv
398.927 251.127 li
398.947 251.547 398.987 251.867 399.047 252.087 cv
399.107 252.307 399.217 252.537 399.387 252.757 cv
399.667 253.127 400.037 253.307 400.497 253.307 cv
400.817 253.307 401.097 253.227 401.317 253.067 cv
401.537 252.907 401.777 252.637 402.037 252.257 cv
398.947 250.807 mo
400.987 250.807 li
400.927 250.387 400.827 250.097 400.687 249.917 cv
400.547 249.747 400.327 249.657 400.007 249.657 cv
399.727 249.657 399.487 249.757 399.307 249.957 cv
399.117 250.157 398.997 250.437 398.947 250.807 cv
f
403.997 249.317 mo
403.997 250.237 li
404.247 249.877 404.457 249.637 404.627 249.497 cv
404.797 249.367 404.987 249.297 405.197 249.297 cv
405.367 249.297 405.497 249.347 405.597 249.437 cv
405.697 249.537 405.747 249.667 405.747 249.827 cv
405.747 249.967 405.707 250.077 405.637 250.157 cv
405.567 250.237 405.477 250.277 405.357 250.277 cv
405.227 250.277 405.097 250.217 404.957 250.077 cv
404.847 249.977 404.757 249.927 404.697 249.927 cv
404.557 249.927 404.397 250.027 404.237 250.217 cv
404.077 250.417 403.997 250.587 403.997 250.747 cv
403.997 252.997 li
403.997 253.287 404.047 253.477 404.167 253.577 cv
404.277 253.677 404.507 253.737 404.847 253.747 cv
404.847 253.897 li
402.447 253.897 li
402.447 253.747 li
402.767 253.687 402.957 253.627 403.037 253.547 cv
403.117 253.477 403.157 253.317 403.157 253.057 cv
403.157 250.557 li
403.157 250.337 403.127 250.187 403.077 250.097 cv
403.027 250.007 402.937 249.957 402.817 249.957 cv
402.707 249.957 402.587 249.977 402.467 249.997 cv
402.467 249.837 li
402.887 249.707 403.377 249.527 403.947 249.297 cv
403.997 249.317 li
f
354.408 264.568 mo
374.408 264.568 li
0 .642573 1 0 cmyk
@
388.548 266.758 mo
388.737 266.938 li
388.138 267.778 387.228 268.198 386.008 268.198 cv
385.038 268.198 384.247 267.908 383.647 267.318 cv
383.008 266.698 382.688 265.858 382.688 264.818 cv
382.688 263.848 382.987 263.028 383.587 262.348 cv
384.207 261.658 385.017 261.308 386.017 261.308 cv
386.438 261.308 386.837 261.358 387.207 261.458 cv
387.628 261.578 387.858 261.638 387.897 261.638 cv
388.117 261.638 388.258 261.528 388.318 261.308 cv
388.518 261.308 li
388.608 263.578 li
388.378 263.578 li
388.268 263.098 388.098 262.728 387.858 262.468 cv
387.378 261.968 386.848 261.708 386.247 261.708 cv
385.508 261.708 384.918 261.988 384.487 262.528 cv
384.057 263.068 383.848 263.778 383.848 264.658 cv
383.848 265.738 384.087 266.528 384.568 267.048 cv
385.008 267.528 385.608 267.768 386.348 267.768 cv
386.788 267.768 387.168 267.698 387.487 267.538 cv
387.807 267.388 388.158 267.128 388.548 266.758 cv
1 /0 /CSD get_res sepcs
1 sep
f
393.768 263.438 mo
393.518 263.438 li
393.398 263.028 393.268 262.718 393.108 262.498 cv
392.698 261.978 392.218 261.718 391.658 261.718 cv
391.348 261.718 391.098 261.808 390.918 261.988 cv
390.738 262.168 390.648 262.388 390.648 262.668 cv
390.648 262.808 390.678 262.938 390.748 263.058 cv
390.808 263.188 390.878 263.298 390.958 263.388 cv
391.038 263.478 391.168 263.588 391.368 263.718 cv
391.558 263.858 391.718 263.958 391.838 264.028 cv
391.958 264.098 392.158 264.218 392.438 264.378 cv
392.978 264.698 393.368 265.008 393.618 265.318 cv
393.858 265.628 393.988 265.968 393.988 266.338 cv
393.988 266.898 393.788 267.348 393.408 267.688 cv
393.018 268.028 392.528 268.198 391.948 268.198 cv
391.508 268.198 391.118 268.118 390.768 267.978 cv
390.588 267.908 390.438 267.868 390.298 267.868 cv
390.098 267.958 li
390.038 268.018 390.018 268.088 390.018 268.188 cv
389.798 268.188 li
389.508 266.078 li
389.728 266.078 li
390.168 267.258 390.858 267.848 391.788 267.848 cv
392.138 267.848 392.428 267.748 392.648 267.538 cv
392.868 267.328 392.978 267.058 392.978 266.728 cv
392.978 266.418 392.878 266.158 392.688 265.938 cv
392.368 265.598 391.808 265.208 391.008 264.778 cv
390.188 264.348 389.788 263.778 389.788 263.058 cv
389.788 262.528 389.948 262.108 390.278 261.788 cv
390.598 261.468 391.018 261.308 391.528 261.308 cv
391.878 261.308 392.228 261.388 392.578 261.528 cv
392.758 261.608 392.898 261.648 393.018 261.648 cv
393.188 261.648 393.298 261.538 393.338 261.308 cv
393.548 261.308 li
393.768 263.438 li
f
354.408 278.74 mo
374.408 278.74 li
.831846 .112703 1 .0183108 cmyk
@
388.378 280.55 mo
387.918 282.24 li
382.527 282.24 li
382.527 282.05 li
382.908 282.03 383.147 281.96 383.247 281.85 cv
383.348 281.74 383.397 281.49 383.397 281.1 cv
383.397 276.74 li
383.397 276.37 383.337 276.13 383.237 276.01 cv
383.138 275.9 382.897 275.83 382.527 275.81 cv
382.527 275.62 li
387.828 275.62 li
387.867 277.05 li
387.617 277.05 li
387.538 276.61 387.408 276.32 387.228 276.19 cv
387.038 276.07 386.658 276 386.078 276 cv
384.767 276 li
384.617 276 384.517 276.03 384.478 276.07 cv
384.438 276.11 384.418 276.21 384.418 276.36 cv
384.418 278.56 li
385.927 278.56 li
386.348 278.56 386.617 278.5 386.758 278.38 cv
386.897 278.26 386.997 278 387.057 277.6 cv
387.288 277.6 li
387.288 279.94 li
387.057 279.94 li
386.997 279.52 386.897 279.26 386.767 279.14 cv
386.628 279.03 386.348 278.97 385.927 278.97 cv
384.418 278.97 li
384.418 281.4 li
384.418 281.6 384.487 281.73 384.628 281.79 cv
384.767 281.85 385.027 281.87 385.427 281.87 cv
385.788 281.87 li
386.497 281.87 387.008 281.79 387.307 281.61 cv
387.608 281.44 387.867 281.09 388.098 280.55 cv
388.378 280.55 li
1 /0 /CSD get_res sepcs
1 sep
f
395.567 275.62 mo
395.567 275.81 li
395.157 275.85 394.897 275.95 394.787 276.11 cv
394.677 276.27 394.627 276.59 394.627 277.08 cv
394.627 279.63 li
394.627 280.15 394.587 280.55 394.517 280.84 cv
394.437 281.14 394.297 281.41 394.087 281.65 cv
393.657 282.13 392.987 282.37 392.067 282.37 cv
391.337 282.37 390.767 282.22 390.367 281.92 cv
389.827 281.52 389.557 280.8 389.557 279.75 cv
389.557 276.65 li
389.557 276.32 389.497 276.1 389.397 276 cv
389.297 275.9 389.047 275.84 388.657 275.81 cv
388.657 275.62 li
391.487 275.62 li
391.487 275.81 li
391.087 275.85 390.827 275.92 390.727 276.03 cv
390.627 276.14 390.577 276.38 390.577 276.75 cv
390.577 279.87 li
390.577 280.31 390.597 280.64 390.657 280.87 cv
390.707 281.11 390.827 281.31 391.017 281.49 cv
391.327 281.79 391.757 281.94 392.297 281.94 cv
392.967 281.94 393.477 281.75 393.817 281.35 cv
393.967 281.17 394.067 280.96 394.117 280.74 cv
394.157 280.52 394.187 280.18 394.187 279.74 cv
394.187 277.11 li
394.187 276.59 394.127 276.25 394.017 276.09 cv
393.897 275.93 393.647 275.84 393.247 275.81 cv
393.247 275.62 li
395.567 275.62 li
f
354.408 292.912 mo
374.408 292.912 li
.0993362 1 1 .024445 cmyk
@
385.948 289.792 mo
385.948 289.982 li
385.538 290.022 385.277 290.092 385.177 290.192 cv
385.078 290.292 385.027 290.542 385.027 290.922 cv
385.027 294.562 li
385.027 295.882 384.467 296.542 383.358 296.542 cv
383.048 296.542 382.807 296.482 382.628 296.362 cv
382.448 296.242 382.358 296.062 382.358 295.832 cv
382.358 295.702 382.408 295.582 382.497 295.472 cv
382.587 295.372 382.698 295.312 382.837 295.312 cv
383.057 295.312 383.217 295.452 383.328 295.732 cv
383.378 295.872 li
383.418 296.002 li
383.467 296.092 li
383.538 296.152 li
383.638 296.172 li
383.777 296.172 383.878 296.122 383.927 296.022 cv
383.978 295.922 384.008 295.732 384.008 295.472 cv
384.008 290.912 li
384.008 290.522 383.957 290.282 383.858 290.182 cv
383.758 290.082 383.497 290.022 383.078 289.982 cv
383.078 289.792 li
385.948 289.792 li
1 /0 /CSD get_res sepcs
1 sep
f
389.288 296.412 mo
386.318 296.412 li
386.318 296.222 li
386.738 296.212 386.997 296.152 387.118 296.042 cv
387.228 295.932 387.288 295.682 387.288 295.292 cv
387.288 290.902 li
387.288 290.522 387.228 290.272 387.128 290.172 cv
387.018 290.072 386.747 290.012 386.318 289.982 cv
386.318 289.792 li
389.288 289.792 li
389.288 289.982 li
388.868 290.002 388.598 290.072 388.478 290.172 cv
388.358 290.282 388.308 290.522 388.308 290.902 cv
388.308 295.292 li
388.308 295.672 388.368 295.912 388.488 296.032 cv
388.608 296.152 388.868 296.212 389.288 296.222 cv
389.288 296.412 li
f
175.529 331.308 mo
175.169 331.308 li
175.004 330.498 174.779 329.973 174.494 329.733 cv
174.194 329.508 173.654 329.388 172.859 329.388 cv
171.974 329.388 li
171.974 337.023 li
171.974 337.593 172.049 337.968 172.229 338.118 cv
172.394 338.283 172.784 338.373 173.414 338.403 cv
173.414 338.688 li
169.034 338.688 li
169.034 338.403 li
169.664 338.373 170.054 338.268 170.204 338.088 cv
170.354 337.923 170.444 337.503 170.444 336.843 cv
170.444 329.388 li
169.544 329.388 li
168.734 329.388 168.179 329.508 167.894 329.748 cv
167.609 329.988 167.399 330.498 167.249 331.308 cv
166.889 331.308 li
166.994 328.758 li
175.424 328.758 li
175.529 331.308 li
f
181.919 336.228 mo
182.159 336.333 li
181.559 337.998 180.509 338.823 179.024 338.823 cv
178.139 338.823 177.449 338.523 176.939 337.908 cv
176.429 337.308 176.174 336.483 176.174 335.433 cv
176.174 334.368 176.459 333.498 177.029 332.808 cv
177.599 332.133 178.349 331.788 179.279 331.788 cv
180.179 331.788 180.869 332.133 181.364 332.823 cv
181.649 333.228 181.814 333.798 181.874 334.533 cv
177.254 334.533 li
177.284 335.163 177.344 335.643 177.434 335.973 cv
177.524 336.303 177.689 336.648 177.944 336.978 cv
178.364 337.533 178.919 337.803 179.609 337.803 cv
180.089 337.803 180.509 337.683 180.839 337.443 cv
181.169 337.203 181.529 336.798 181.919 336.228 cv
177.284 334.053 mo
180.344 334.053 li
180.254 333.423 180.104 332.988 179.894 332.718 cv
179.684 332.463 179.354 332.328 178.874 332.328 cv
178.454 332.328 178.094 332.478 177.824 332.778 cv
177.539 333.078 177.359 333.498 177.284 334.053 cv
f
184.799 334.173 mo
186.359 335.118 li
186.854 335.418 187.199 335.703 187.394 335.958 cv
187.574 336.228 187.679 336.558 187.679 336.963 cv
187.679 337.473 187.469 337.908 187.049 338.268 cv
186.629 338.643 186.149 338.823 185.579 338.823 cv
185.099 338.823 184.739 338.778 184.484 338.688 cv
184.214 338.613 183.974 338.568 183.794 338.568 cv
183.614 338.568 183.494 338.628 183.434 338.733 cv
183.239 338.733 li
183.239 336.393 li
183.479 336.393 li
183.629 337.128 183.869 337.668 184.169 337.998 cv
184.469 338.343 184.874 338.508 185.384 338.508 cv
185.744 338.508 186.044 338.403 186.284 338.193 cv
186.509 337.983 186.629 337.728 186.629 337.398 cv
186.629 336.948 186.359 336.573 185.834 336.273 cv
185.024 335.823 li
183.824 335.163 183.224 334.428 183.224 333.648 cv
183.224 333.078 183.404 332.628 183.779 332.298 cv
184.154 331.968 184.664 331.803 185.294 331.803 cv
185.729 331.803 186.059 331.863 186.299 331.968 cv
186.479 332.058 186.614 332.088 186.719 332.088 cv
186.779 332.088 186.869 332.043 186.959 331.938 cv
187.124 331.938 li
187.199 333.978 li
186.974 333.978 li
186.794 333.303 186.584 332.823 186.329 332.553 cv
186.074 332.283 185.729 332.133 185.279 332.133 cv
184.934 332.133 184.664 332.223 184.454 332.388 cv
184.244 332.568 184.154 332.823 184.154 333.153 cv
184.154 333.333 184.199 333.513 184.319 333.708 cv
184.439 333.903 184.589 334.053 184.799 334.173 cv
f
192.284 337.533 mo
192.479 337.698 li
191.999 338.448 191.384 338.823 190.664 338.823 cv
189.779 338.823 189.344 338.193 189.344 336.933 cv
189.344 332.418 li
188.549 332.418 li
188.489 332.313 li
188.489 332.238 188.564 332.148 188.744 332.028 cv
189.119 331.818 189.599 331.278 190.199 330.423 cv
190.334 330.243 li
190.499 330.003 li
190.559 330.003 190.604 330.078 190.604 330.198 cv
190.604 331.938 li
192.119 331.938 li
192.119 332.418 li
190.604 332.418 li
190.604 336.708 li
190.604 337.188 190.664 337.533 190.784 337.743 cv
190.904 337.953 191.099 338.058 191.384 338.058 cv
191.684 338.058 191.984 337.893 192.284 337.533 cv
f
195.164 329.208 mo
195.164 329.433 195.089 329.613 194.939 329.763 cv
194.789 329.913 194.594 329.973 194.384 329.973 cv
194.174 329.973 193.994 329.913 193.844 329.763 cv
193.694 329.613 193.634 329.433 193.634 329.208 cv
193.634 328.998 193.709 328.818 193.859 328.668 cv
194.009 328.518 194.189 328.443 194.399 328.443 cv
194.609 328.443 194.789 328.518 194.939 328.668 cv
195.089 328.818 195.164 328.998 195.164 329.208 cv
196.259 338.688 mo
192.704 338.688 li
192.704 338.463 li
193.214 338.433 193.544 338.343 193.679 338.193 cv
193.814 338.043 193.889 337.698 193.889 337.128 cv
193.889 333.723 li
193.889 333.378 193.844 333.138 193.784 332.988 cv
193.709 332.853 193.574 332.778 193.394 332.778 cv
193.154 332.778 192.944 332.808 192.764 332.853 cv
192.764 332.613 li
195.089 331.788 li
195.149 331.848 li
195.149 337.113 li
195.149 337.683 195.209 338.028 195.329 338.178 cv
195.449 338.328 195.764 338.433 196.259 338.463 cv
196.259 338.688 li
f
203.909 338.688 mo
200.789 338.688 li
200.804 338.463 li
201.164 338.433 201.419 338.328 201.539 338.148 cv
201.659 337.968 201.734 337.623 201.734 337.113 cv
201.734 334.128 li
201.734 333.123 201.359 332.613 200.639 332.613 cv
200.384 332.613 200.144 332.673 199.934 332.793 cv
199.709 332.913 199.424 333.138 199.094 333.468 cv
199.094 337.608 li
199.094 337.908 199.154 338.118 199.289 338.238 cv
199.424 338.358 199.679 338.433 200.069 338.463 cv
200.069 338.688 li
196.904 338.688 li
196.904 338.463 li
197.279 338.433 197.534 338.343 197.654 338.193 cv
197.774 338.043 197.834 337.728 197.834 337.278 cv
197.834 333.633 li
197.834 333.273 197.789 333.018 197.729 332.868 cv
197.654 332.733 197.519 332.658 197.309 332.658 cv
197.099 332.658 196.964 332.688 196.874 332.718 cv
196.874 332.463 li
197.564 332.268 198.254 332.043 198.929 331.788 cv
199.049 331.833 li
199.049 333.003 li
199.064 333.003 li
199.769 332.193 200.489 331.788 201.224 331.788 cv
201.794 331.788 202.229 331.998 202.529 332.388 cv
202.829 332.793 202.994 333.363 202.994 334.098 cv
202.994 337.413 li
202.994 337.818 203.054 338.088 203.174 338.208 cv
203.294 338.343 203.534 338.433 203.909 338.463 cv
203.909 338.688 li
f
211.184 332.868 mo
209.939 332.868 li
210.119 333.303 210.224 333.723 210.224 334.128 cv
210.224 334.908 209.954 335.478 209.444 335.868 cv
208.919 336.258 208.394 336.453 207.884 336.453 cv
207.764 336.453 207.584 336.438 207.314 336.408 cv
207.029 336.378 li
206.819 336.438 206.624 336.573 206.429 336.783 cv
206.219 336.993 206.129 337.173 206.129 337.323 cv
206.129 337.563 206.519 337.698 207.299 337.728 cv
209.234 337.818 li
209.774 337.848 210.224 337.998 210.554 338.283 cv
210.884 338.568 211.049 338.928 211.049 339.408 cv
211.049 339.978 210.749 340.503 210.149 340.983 cv
209.309 341.613 208.319 341.943 207.149 341.943 cv
206.429 341.943 205.814 341.793 205.304 341.508 cv
204.794 341.223 204.554 340.878 204.554 340.488 cv
204.554 340.203 204.659 339.918 204.884 339.648 cv
205.094 339.378 205.484 339.048 206.024 338.673 cv
205.694 338.523 205.484 338.403 205.379 338.283 cv
205.274 338.178 205.229 338.043 205.229 337.878 cv
205.229 337.593 205.454 337.248 205.919 336.843 cv
206.144 336.648 206.354 336.453 206.564 336.243 cv
206.054 336.003 205.694 335.718 205.484 335.403 cv
205.274 335.103 205.169 334.713 205.169 334.233 cv
205.169 333.558 205.409 332.988 205.889 332.508 cv
206.369 332.028 206.969 331.788 207.674 331.788 cv
208.064 331.788 208.469 331.863 208.874 332.013 cv
209.204 332.133 li
209.489 332.238 209.759 332.283 210.029 332.283 cv
211.184 332.283 li
211.184 332.868 li
206.414 333.618 mo
206.414 333.663 li
206.414 334.383 206.549 334.968 206.834 335.418 cv
207.119 335.868 207.494 336.078 207.959 336.078 cv
208.289 336.078 208.559 335.958 208.769 335.718 cv
208.964 335.478 209.069 335.148 209.069 334.728 cv
209.069 334.068 208.919 333.468 208.619 332.913 cv
208.364 332.448 208.004 332.208 207.524 332.208 cv
207.164 332.208 206.894 332.343 206.699 332.583 cv
206.504 332.838 206.414 333.183 206.414 333.618 cv
210.629 339.633 mo
210.629 339.348 210.479 339.153 210.209 339.048 cv
209.939 338.943 209.459 338.898 208.769 338.898 cv
207.779 338.898 206.969 338.823 206.339 338.703 cv
206.039 339.063 205.829 339.318 205.739 339.483 cv
205.649 339.648 205.604 339.813 205.604 339.993 cv
205.604 340.323 205.799 340.578 206.189 340.788 cv
206.579 340.983 207.119 341.088 207.779 341.088 cv
208.619 341.088 209.309 340.953 209.834 340.683 cv
210.359 340.413 210.629 340.068 210.629 339.633 cv
f
224.279 331.308 mo
223.919 331.308 li
223.754 330.498 223.529 329.973 223.244 329.733 cv
222.944 329.508 222.404 329.388 221.609 329.388 cv
220.724 329.388 li
220.724 337.023 li
220.724 337.593 220.799 337.968 220.979 338.118 cv
221.144 338.283 221.534 338.373 222.164 338.403 cv
222.164 338.688 li
217.784 338.688 li
217.784 338.403 li
218.414 338.373 218.804 338.268 218.954 338.088 cv
219.104 337.923 219.194 337.503 219.194 336.843 cv
219.194 329.388 li
218.294 329.388 li
217.484 329.388 216.929 329.508 216.644 329.748 cv
216.359 329.988 216.149 330.498 215.999 331.308 cv
215.639 331.308 li
215.744 328.758 li
224.174 328.758 li
224.279 331.308 li
f
227.249 329.208 mo
227.249 329.433 227.174 329.613 227.024 329.763 cv
226.874 329.913 226.679 329.973 226.469 329.973 cv
226.259 329.973 226.079 329.913 225.929 329.763 cv
225.779 329.613 225.719 329.433 225.719 329.208 cv
225.719 328.998 225.794 328.818 225.944 328.668 cv
226.094 328.518 226.274 328.443 226.484 328.443 cv
226.694 328.443 226.874 328.518 227.024 328.668 cv
227.174 328.818 227.249 328.998 227.249 329.208 cv
228.344 338.688 mo
224.789 338.688 li
224.789 338.463 li
225.299 338.433 225.629 338.343 225.764 338.193 cv
225.899 338.043 225.974 337.698 225.974 337.128 cv
225.974 333.723 li
225.974 333.378 225.929 333.138 225.869 332.988 cv
225.794 332.853 225.659 332.778 225.479 332.778 cv
225.239 332.778 225.029 332.808 224.849 332.853 cv
224.849 332.613 li
227.174 331.788 li
227.234 331.848 li
227.234 337.113 li
227.234 337.683 227.294 338.028 227.414 338.178 cv
227.534 338.328 227.849 338.433 228.344 338.463 cv
228.344 338.688 li
f
240.344 338.688 mo
237.074 338.688 li
237.074 338.463 li
237.494 338.433 237.749 338.343 237.869 338.208 cv
237.989 338.073 238.049 337.788 238.049 337.338 cv
238.049 334.248 li
238.049 333.648 237.959 333.228 237.779 332.958 cv
237.599 332.703 237.314 332.568 236.894 332.568 cv
236.534 332.568 236.234 332.643 235.994 332.778 cv
235.754 332.928 235.514 333.153 235.289 333.483 cv
235.289 337.263 li
235.289 337.743 235.349 338.073 235.499 338.223 cv
235.649 338.373 235.934 338.463 236.369 338.463 cv
236.369 338.688 li
233.009 338.688 li
233.009 338.463 li
233.444 338.433 233.729 338.373 233.849 338.253 cv
233.969 338.133 234.029 337.848 234.029 337.398 cv
234.029 334.233 li
234.029 333.123 233.699 332.568 233.054 332.568 cv
232.769 332.568 232.469 332.643 232.154 332.763 cv
231.839 332.883 231.614 333.033 231.464 333.213 cv
231.329 333.363 231.269 333.453 231.269 333.468 cv
231.269 337.638 li
231.269 337.968 231.329 338.178 231.479 338.283 cv
231.614 338.388 231.884 338.448 232.289 338.463 cv
232.289 338.688 li
228.959 338.688 li
228.959 338.463 li
229.379 338.463 229.649 338.388 229.799 338.238 cv
229.934 338.088 230.009 337.803 230.009 337.368 cv
230.009 333.648 li
230.009 333.288 229.964 333.033 229.889 332.883 cv
229.799 332.733 229.664 332.658 229.484 332.658 cv
229.334 332.658 229.169 332.688 229.004 332.718 cv
229.004 332.463 li
229.679 332.283 230.369 332.058 231.089 331.788 cv
231.209 331.833 li
231.209 332.943 li
231.239 332.943 li
231.689 332.478 232.079 332.163 232.424 332.013 cv
232.769 331.863 233.144 331.788 233.534 331.788 cv
234.314 331.788 234.854 332.208 235.124 333.048 cv
235.904 332.208 236.714 331.788 237.569 331.788 cv
238.724 331.788 239.309 332.688 239.309 334.488 cv
239.309 337.533 li
239.309 337.863 239.354 338.103 239.459 338.223 cv
239.549 338.343 239.714 338.418 239.954 338.433 cv
240.344 338.463 li
240.344 338.688 li
f
246.509 336.228 mo
246.749 336.333 li
246.149 337.998 245.099 338.823 243.614 338.823 cv
242.729 338.823 242.039 338.523 241.529 337.908 cv
241.019 337.308 240.764 336.483 240.764 335.433 cv
240.764 334.368 241.049 333.498 241.619 332.808 cv
242.189 332.133 242.939 331.788 243.869 331.788 cv
244.769 331.788 245.459 332.133 245.954 332.823 cv
246.239 333.228 246.404 333.798 246.464 334.533 cv
241.844 334.533 li
241.874 335.163 241.934 335.643 242.024 335.973 cv
242.114 336.303 242.279 336.648 242.534 336.978 cv
242.954 337.533 243.509 337.803 244.199 337.803 cv
244.679 337.803 245.099 337.683 245.429 337.443 cv
245.759 337.203 246.119 336.798 246.509 336.228 cv
241.874 334.053 mo
244.934 334.053 li
244.844 333.423 244.694 332.988 244.484 332.718 cv
244.274 332.463 243.944 332.328 243.464 332.328 cv
243.044 332.328 242.684 332.478 242.414 332.778 cv
242.129 333.078 241.949 333.498 241.874 334.053 cv
f
255.359 341.088 mo
255.179 341.328 li
254.009 340.668 253.109 339.753 252.479 338.613 cv
251.834 337.458 251.519 336.228 251.519 334.908 cv
251.519 332.148 252.749 330.018 255.224 328.548 cv
255.359 328.788 li
254.339 329.658 253.649 330.528 253.319 331.368 cv
252.974 332.208 252.809 333.378 252.809 334.863 cv
252.809 336.348 252.974 337.548 253.334 338.463 cv
253.679 339.363 254.354 340.248 255.359 341.088 cv
f
263.099 338.688 mo
259.919 338.688 li
259.919 338.463 li
260.354 338.418 260.639 338.313 260.759 338.163 cv
260.879 338.013 260.939 337.683 260.939 337.158 cv
260.939 334.188 li
260.939 333.138 260.564 332.598 259.829 332.598 cv
259.529 332.598 259.244 332.673 259.004 332.808 cv
258.749 332.958 258.464 333.198 258.149 333.543 cv
258.149 337.158 li
258.149 337.683 258.209 338.013 258.329 338.163 cv
258.449 338.313 258.719 338.418 259.169 338.463 cv
259.169 338.688 li
255.929 338.688 li
255.929 338.463 li
256.349 338.403 256.619 338.313 256.724 338.163 cv
256.829 338.028 256.889 337.698 256.889 337.158 cv
256.889 330.093 li
256.889 329.778 256.829 329.568 256.739 329.478 cv
256.649 329.388 256.439 329.328 256.124 329.328 cv
255.944 329.343 li
255.944 329.103 li
256.349 328.983 li
257.114 328.758 257.684 328.578 258.074 328.443 cv
258.149 328.488 li
258.149 333.048 li
258.494 332.598 258.839 332.283 259.184 332.088 cv
259.514 331.893 259.904 331.788 260.354 331.788 cv
261.584 331.788 262.199 332.583 262.199 334.173 cv
262.199 337.158 li
262.199 337.683 262.244 338.013 262.334 338.148 cv
262.424 338.283 262.679 338.388 263.099 338.463 cv
263.099 338.688 li
f
270.344 335.223 mo
270.344 336.273 270.029 337.143 269.399 337.818 cv
268.769 338.493 267.959 338.823 266.969 338.823 cv
266.039 338.823 265.274 338.493 264.659 337.818 cv
264.029 337.158 263.729 336.303 263.729 335.268 cv
263.729 334.233 264.029 333.393 264.659 332.748 cv
265.274 332.118 266.084 331.788 267.104 331.788 cv
268.034 331.788 268.799 332.118 269.414 332.748 cv
270.029 333.378 270.344 334.203 270.344 335.223 cv
268.994 335.628 mo
268.994 334.488 268.739 333.603 268.244 332.958 cv
267.839 332.463 267.359 332.208 266.819 332.208 cv
266.294 332.208 265.874 332.433 265.559 332.853 cv
265.229 333.273 265.079 333.858 265.079 334.593 cv
265.079 335.883 265.334 336.903 265.874 337.668 cv
266.204 338.178 266.654 338.418 267.224 338.418 cv
267.764 338.418 268.199 338.178 268.514 337.683 cv
268.829 337.188 268.994 336.498 268.994 335.628 cv
f
277.994 337.938 mo
277.994 338.148 li
277.214 338.358 276.524 338.583 275.939 338.808 cv
275.864 338.763 li
275.864 337.548 li
275.834 337.548 li
275.204 338.403 274.484 338.823 273.689 338.823 cv
273.119 338.823 272.669 338.658 272.339 338.313 cv
272.009 337.968 271.859 337.503 271.859 336.918 cv
271.859 333.153 li
271.859 332.793 271.784 332.538 271.664 332.388 cv
271.529 332.253 271.289 332.178 270.929 332.148 cv
270.929 331.938 li
273.119 331.938 li
273.119 336.783 li
273.119 337.128 273.209 337.413 273.419 337.638 cv
273.629 337.863 273.884 337.968 274.184 337.968 cv
274.664 337.968 275.084 337.818 275.444 337.503 cv
275.564 337.383 275.654 337.278 275.714 337.173 cv
275.759 337.068 275.789 336.888 275.789 336.633 cv
275.789 333.168 li
275.789 332.778 275.714 332.538 275.579 332.418 cv
275.429 332.298 275.129 332.223 274.679 332.193 cv
274.679 331.938 li
277.049 331.938 li
277.049 337.083 li
277.049 337.443 277.094 337.668 277.214 337.773 cv
277.334 337.893 277.559 337.938 277.904 337.938 cv
277.994 337.938 li
f
280.694 331.818 mo
280.694 333.198 li
281.069 332.658 281.384 332.298 281.639 332.088 cv
281.894 331.893 282.179 331.788 282.494 331.788 cv
282.749 331.788 282.944 331.863 283.094 331.998 cv
283.244 332.148 283.319 332.343 283.319 332.583 cv
283.319 332.793 283.259 332.958 283.154 333.078 cv
283.049 333.198 282.914 333.258 282.734 333.258 cv
282.539 333.258 282.344 333.168 282.134 332.958 cv
281.969 332.808 281.834 332.733 281.744 332.733 cv
281.534 332.733 281.294 332.883 281.054 333.168 cv
280.814 333.468 280.694 333.723 280.694 333.963 cv
280.694 337.338 li
280.694 337.773 280.769 338.058 280.949 338.208 cv
281.114 338.358 281.459 338.448 281.969 338.463 cv
281.969 338.688 li
278.369 338.688 li
278.369 338.463 li
278.849 338.373 279.134 338.283 279.254 338.163 cv
279.374 338.058 279.434 337.818 279.434 337.428 cv
279.434 333.678 li
279.434 333.348 279.389 333.123 279.314 332.988 cv
279.239 332.853 279.104 332.778 278.924 332.778 cv
278.759 332.778 278.579 332.808 278.399 332.838 cv
278.399 332.598 li
279.029 332.403 279.764 332.133 280.619 331.788 cv
280.694 331.818 li
f
285.629 334.173 mo
287.189 335.118 li
287.684 335.418 288.029 335.703 288.224 335.958 cv
288.404 336.228 288.509 336.558 288.509 336.963 cv
288.509 337.473 288.299 337.908 287.879 338.268 cv
287.459 338.643 286.979 338.823 286.409 338.823 cv
285.929 338.823 285.569 338.778 285.314 338.688 cv
285.044 338.613 284.804 338.568 284.624 338.568 cv
284.444 338.568 284.324 338.628 284.264 338.733 cv
284.069 338.733 li
284.069 336.393 li
284.309 336.393 li
284.459 337.128 284.699 337.668 284.999 337.998 cv
285.299 338.343 285.704 338.508 286.214 338.508 cv
286.574 338.508 286.874 338.403 287.114 338.193 cv
287.339 337.983 287.459 337.728 287.459 337.398 cv
287.459 336.948 287.189 336.573 286.664 336.273 cv
285.854 335.823 li
284.654 335.163 284.054 334.428 284.054 333.648 cv
284.054 333.078 284.234 332.628 284.609 332.298 cv
284.984 331.968 285.494 331.803 286.124 331.803 cv
286.559 331.803 286.889 331.863 287.129 331.968 cv
287.309 332.058 287.444 332.088 287.549 332.088 cv
287.609 332.088 287.699 332.043 287.789 331.938 cv
287.954 331.938 li
288.029 333.978 li
287.804 333.978 li
287.624 333.303 287.414 332.823 287.159 332.553 cv
286.904 332.283 286.559 332.133 286.109 332.133 cv
285.764 332.133 285.494 332.223 285.284 332.388 cv
285.074 332.568 284.984 332.823 284.984 333.153 cv
284.984 333.333 285.029 333.513 285.149 333.708 cv
285.269 333.903 285.419 334.053 285.629 334.173 cv
f
289.559 328.788 mo
289.739 328.548 li
290.879 329.238 291.764 330.153 292.424 331.308 cv
293.069 332.478 293.399 333.693 293.399 334.983 cv
293.399 337.713 292.154 339.813 289.694 341.328 cv
289.559 341.088 li
290.579 340.233 291.269 339.393 291.599 338.553 cv
291.929 337.713 292.109 336.543 292.109 335.028 cv
292.109 333.513 291.929 332.298 291.599 331.383 cv
291.269 330.468 290.579 329.598 289.559 328.788 cv
f
4.91237 304.883 mo
5.19737 304.883 li
5.25737 305.393 5.34737 305.723 5.46737 305.873 cv
5.61737 306.038 5.79737 306.158 6.03737 306.218 cv
6.27737 306.278 6.68237 306.308 7.23737 306.308 cv
14.9924 306.308 li
14.9924 306.578 li
6.77237 313.193 li
12.5924 313.193 li
13.3574 313.193 13.8524 313.118 14.0924 312.938 cv
14.3324 312.773 14.4824 312.398 14.5574 311.798 cv
14.8424 311.798 li
14.8424 315.308 li
14.5574 315.308 li
14.4974 314.693 14.3474 314.303 14.1224 314.123 cv
13.8974 313.943 13.3874 313.853 12.5924 313.853 cv
5.99237 313.853 li
5.67737 314.123 5.46737 314.333 5.36237 314.513 cv
5.25737 314.693 5.19737 314.963 5.19737 315.308 cv
4.91237 315.308 li
4.91237 312.758 li
12.1574 306.968 li
7.05737 306.968 li
6.30737 306.968 5.81237 307.073 5.58737 307.253 cv
5.46737 307.373 5.37737 307.508 5.33237 307.658 cv
5.28737 307.808 5.24237 308.063 5.19737 308.438 cv
4.91237 308.438 li
4.91237 304.883 li
f
11.3774 297.608 mo
12.4274 297.608 13.2974 297.923 13.9724 298.552 cv
14.6474 299.182 14.9774 299.992 14.9774 300.983 cv
14.9774 301.913 14.6474 302.677 13.9724 303.293 cv
13.3124 303.923 12.4574 304.223 11.4224 304.223 cv
10.3874 304.223 9.54737 303.923 8.90237 303.293 cv
8.27238 302.677 7.94237 301.867 7.94237 300.848 cv
7.94237 299.918 8.27238 299.152 8.90237 298.538 cv
9.53237 297.923 10.3574 297.608 11.3774 297.608 cv
11.7824 298.957 mo
10.6424 298.957 9.75737 299.212 9.11238 299.707 cv
8.61737 300.112 8.36237 300.592 8.36237 301.133 cv
8.36237 301.658 8.58737 302.078 9.00737 302.392 cv
9.42737 302.723 10.0124 302.872 10.7474 302.872 cv
12.0374 302.872 13.0574 302.617 13.8224 302.078 cv
14.3324 301.747 14.5724 301.298 14.5724 300.728 cv
14.5724 300.188 14.3324 299.753 13.8374 299.438 cv
13.3424 299.122 12.6524 298.957 11.7824 298.957 cv
f
7.97237 294.758 mo
9.35238 294.758 li
8.81237 294.383 8.45237 294.068 8.24237 293.813 cv
8.04737 293.557 7.94237 293.272 7.94237 292.957 cv
7.94237 292.703 8.01737 292.508 8.15237 292.358 cv
8.30237 292.207 8.49737 292.133 8.73738 292.133 cv
8.94737 292.133 9.11238 292.193 9.23237 292.298 cv
9.35238 292.402 9.41237 292.538 9.41237 292.717 cv
9.41237 292.913 9.32237 293.108 9.11238 293.318 cv
8.96237 293.483 8.88737 293.617 8.88737 293.707 cv
8.88737 293.918 9.03737 294.158 9.32237 294.397 cv
9.62237 294.638 9.87737 294.758 10.1174 294.758 cv
13.4924 294.758 li
13.9274 294.758 14.2124 294.682 14.3624 294.503 cv
14.5124 294.337 14.6024 293.992 14.6174 293.483 cv
14.8424 293.483 li
14.8424 297.082 li
14.6174 297.082 li
14.5274 296.603 14.4374 296.318 14.3174 296.198 cv
14.2124 296.078 13.9724 296.017 13.5824 296.017 cv
9.83237 296.017 li
9.50237 296.017 9.27737 296.063 9.14237 296.138 cv
9.00737 296.212 8.93237 296.348 8.93237 296.527 cv
8.93237 296.693 8.96237 296.872 8.99237 297.052 cv
8.75237 297.052 li
8.55737 296.423 8.28737 295.688 7.94237 294.832 cv
7.97237 294.758 li
f
14.8424 280.538 mo
14.8424 283.808 li
14.6174 283.808 li
14.5874 283.388 14.4974 283.133 14.3624 283.013 cv
14.2274 282.893 13.9424 282.833 13.4924 282.833 cv
10.4024 282.833 li
9.80237 282.833 9.38237 282.923 9.11238 283.103 cv
8.85737 283.283 8.72237 283.568 8.72237 283.988 cv
8.72237 284.348 8.79737 284.648 8.93237 284.888 cv
9.08237 285.128 9.30737 285.368 9.63737 285.593 cv
13.4174 285.593 li
13.8974 285.593 14.2274 285.533 14.3774 285.383 cv
14.5274 285.233 14.6174 284.948 14.6174 284.513 cv
14.8424 284.513 li
14.8424 287.873 li
14.6174 287.873 li
14.5874 287.438 14.5274 287.153 14.4074 287.033 cv
14.2874 286.913 14.0024 286.853 13.5524 286.853 cv
10.3874 286.853 li
9.27737 286.853 8.72237 287.183 8.72237 287.828 cv
8.72237 288.113 8.79737 288.413 8.91737 288.728 cv
9.03737 289.043 9.18737 289.268 9.36737 289.418 cv
9.51737 289.553 9.60737 289.613 9.62237 289.613 cv
13.7924 289.613 li
14.1224 289.613 14.3324 289.553 14.4374 289.403 cv
14.5424 289.268 14.6024 288.998 14.6174 288.593 cv
14.8424 288.593 li
14.8424 291.923 li
14.6174 291.923 li
14.6174 291.503 14.5424 291.233 14.3924 291.083 cv
14.2424 290.948 13.9574 290.873 13.5224 290.873 cv
9.80237 290.873 li
9.44238 290.873 9.18737 290.918 9.03737 290.993 cv
8.88737 291.083 8.81237 291.218 8.81237 291.398 cv
8.81237 291.548 8.84237 291.713 8.87237 291.878 cv
8.61737 291.878 li
8.43737 291.203 8.21237 290.513 7.94237 289.793 cv
7.98737 289.673 li
9.09737 289.673 li
9.09737 289.643 li
8.63237 289.193 8.31738 288.803 8.16737 288.458 cv
8.01737 288.113 7.94237 287.738 7.94237 287.348 cv
7.94237 286.568 8.36237 286.028 9.20237 285.758 cv
8.36237 284.978 7.94237 284.168 7.94237 283.313 cv
7.94237 282.158 8.84237 281.573 10.6424 281.573 cv
13.6874 281.573 li
14.0174 281.573 14.2574 281.528 14.3774 281.423 cv
14.4974 281.333 14.5724 281.168 14.5874 280.928 cv
14.6174 280.538 li
14.8424 280.538 li
f
13.8524 273.863 mo
14.2724 273.863 li
14.7524 274.253 14.9774 274.703 14.9774 275.213 cv
14.9774 275.783 14.6174 276.113 13.8974 276.173 cv
13.8974 276.188 li
14.6174 276.833 14.9774 277.553 14.9774 278.363 cv
14.9774 278.843 14.8424 279.218 14.5724 279.503 cv
14.3024 279.803 13.9274 279.938 13.4324 279.938 cv
12.7424 279.938 12.1574 279.593 11.6774 278.888 cv
11.3624 278.408 10.9574 277.508 10.4624 276.188 cv
9.65237 276.188 li
9.20237 276.188 8.87237 276.308 8.64738 276.518 cv
8.42237 276.728 8.30237 277.013 8.30237 277.358 cv
8.30237 277.658 8.37737 277.913 8.52737 278.108 cv
8.67737 278.318 8.84237 278.408 9.03737 278.408 cv
9.12737 278.408 9.23237 278.393 9.33737 278.363 cv
9.45737 278.333 9.56237 278.318 9.66737 278.318 cv
9.81738 278.318 9.96737 278.393 10.0874 278.528 cv
10.2224 278.663 10.2824 278.828 10.2824 279.008 cv
10.2824 279.188 10.2224 279.338 10.0874 279.458 cv
9.96737 279.593 9.80237 279.653 9.59237 279.653 cv
9.11238 279.653 8.72237 279.398 8.39237 278.888 cv
8.09237 278.423 7.94237 277.853 7.94237 277.163 cv
7.94237 276.353 8.16737 275.768 8.61737 275.393 cv
8.82737 275.213 9.05237 275.108 9.26237 275.048 cv
9.47237 275.003 9.81738 274.973 10.2824 274.973 cv
13.1474 274.973 li
13.8074 274.973 14.1374 274.823 14.1374 274.508 cv
14.1374 274.313 14.0474 274.103 13.8524 273.863 cv
12.9374 276.188 mo
10.8224 276.188 li
11.1524 277.118 11.4824 277.748 11.8124 278.108 cv
12.1274 278.453 12.5174 278.618 12.9674 278.618 cv
13.3574 278.618 13.6424 278.528 13.8374 278.333 cv
14.0324 278.153 14.1224 277.898 14.1224 277.583 cv
14.1224 277.253 14.0474 276.968 13.8824 276.713 cv
13.7324 276.503 13.5974 276.368 13.4624 276.293 cv
13.3424 276.233 13.1624 276.188 12.9374 276.188 cv
f
14.8424 269.978 mo
14.8424 273.518 li
14.6174 273.518 li
14.5874 273.053 14.4824 272.738 14.3324 272.588 cv
14.1824 272.438 13.8824 272.363 13.4624 272.363 cv
6.42737 272.363 li
6.06737 272.363 5.82737 272.408 5.67737 272.498 cv
5.54237 272.588 5.46737 272.753 5.46737 272.993 cv
5.46737 273.203 5.48237 273.398 5.49737 273.548 cv
5.25737 273.548 li
5.03237 272.603 4.80737 271.808 4.59737 271.178 cv
4.65737 271.103 li
13.5374 271.103 li
13.9574 271.103 14.2424 271.043 14.3774 270.893 cv
14.5124 270.758 14.5874 270.458 14.6174 269.978 cv
14.8424 269.978 li
f
5.36237 266.963 mo
5.58737 266.963 5.76737 267.038 5.91737 267.188 cv
6.06737 267.338 6.12737 267.533 6.12737 267.743 cv
6.12737 267.953 6.06737 268.133 5.91737 268.283 cv
5.76737 268.433 5.58737 268.493 5.36237 268.493 cv
5.15237 268.493 4.97237 268.418 4.82237 268.268 cv
4.67237 268.118 4.59737 267.938 4.59737 267.728 cv
4.59737 267.518 4.67237 267.338 4.82237 267.188 cv
4.97237 267.038 5.15237 266.963 5.36237 266.963 cv
14.8424 265.868 mo
14.8424 269.423 li
14.6174 269.423 li
14.5874 268.913 14.4974 268.583 14.3474 268.448 cv
14.1974 268.313 13.8524 268.238 13.2824 268.238 cv
9.87737 268.238 li
9.53237 268.238 9.29237 268.283 9.14237 268.343 cv
9.00737 268.418 8.93237 268.553 8.93237 268.733 cv
8.93237 268.973 8.96237 269.183 9.00737 269.363 cv
8.76737 269.363 li
7.94237 267.038 li
8.00237 266.978 li
13.2674 266.978 li
13.8374 266.978 14.1824 266.918 14.3324 266.798 cv
14.4824 266.678 14.5874 266.363 14.6174 265.868 cv
14.8424 265.868 li
f
12.8024 259.223 mo
14.8424 259.448 li
14.8424 265.088 li
14.6174 265.088 li
8.54237 261.098 li
8.54237 263.123 li
8.54237 263.603 8.63237 263.918 8.79737 264.083 cv
8.96237 264.248 9.32237 264.368 9.86238 264.428 cv
9.86238 264.698 li
8.09237 264.638 li
8.09237 259.448 li
8.31738 259.448 li
14.3924 263.483 li
14.3924 261.488 li
14.3924 260.648 14.2574 260.123 13.9874 259.898 cv
13.8224 259.763 13.4024 259.628 12.7424 259.493 cv
12.8024 259.223 li
f
12.3824 252.713 mo
12.4874 252.473 li
14.1524 253.073 14.9774 254.123 14.9774 255.608 cv
14.9774 256.493 14.6774 257.183 14.0624 257.693 cv
13.4624 258.203 12.6374 258.458 11.5874 258.458 cv
10.5224 258.458 9.65237 258.173 8.96237 257.603 cv
8.28737 257.033 7.94237 256.283 7.94237 255.353 cv
7.94237 254.453 8.28737 253.763 8.97738 253.268 cv
9.38237 252.983 9.95237 252.818 10.6874 252.758 cv
10.6874 257.378 li
11.3174 257.348 11.7974 257.288 12.1274 257.198 cv
12.4574 257.108 12.8024 256.943 13.1324 256.688 cv
13.6874 256.268 13.9574 255.713 13.9574 255.023 cv
13.9574 254.543 13.8374 254.123 13.5974 253.793 cv
13.3574 253.463 12.9524 253.103 12.3824 252.713 cv
10.2074 257.348 mo
10.2074 254.288 li
9.57737 254.378 9.14237 254.528 8.87237 254.738 cv
8.61737 254.948 8.48237 255.278 8.48237 255.758 cv
8.48237 256.178 8.63237 256.538 8.93237 256.808 cv
9.23237 257.093 9.65237 257.273 10.2074 257.348 cv
f
14.2124 244.808 mo
14.9774 247.013 li
14.9324 247.073 li
13.9874 247.073 li
14.6474 247.553 14.9774 248.198 14.9774 248.993 cv
14.9774 249.833 14.6924 250.493 14.0924 251.003 cv
13.5074 251.513 12.7274 251.768 11.7674 251.768 cv
10.7174 251.768 9.81738 251.468 9.06738 250.853 cv
8.31738 250.253 7.94237 249.518 7.94237 248.648 cv
7.94237 248.108 8.16737 247.583 8.58737 247.073 cv
6.24737 247.073 li
5.94737 247.073 5.73737 247.118 5.63237 247.208 cv
5.54237 247.298 5.48237 247.493 5.48237 247.763 cv
5.48237 247.913 5.49737 248.018 5.49737 248.093 cv
5.25737 248.093 li
5.01737 247.193 4.80737 246.458 4.59737 245.888 cv
4.62737 245.813 li
13.1324 245.813 li
13.4924 245.813 13.7174 245.783 13.8224 245.693 cv
13.9424 245.603 13.9874 245.423 13.9874 245.153 cv
13.9874 245.093 13.9874 244.988 13.9724 244.808 cv
14.2124 244.808 li
13.3124 247.073 mo
9.86238 247.073 li
9.47237 247.073 9.11238 247.238 8.81237 247.538 cv
8.51237 247.838 8.36237 248.198 8.36237 248.603 cv
8.36237 249.173 8.61737 249.638 9.12737 249.968 cv
9.63737 250.313 10.3274 250.478 11.1674 250.478 cv
12.0974 250.478 12.8324 250.298 13.3874 249.923 cv
13.9424 249.548 14.2124 249.038 14.2124 248.408 cv
14.2124 247.943 14.0624 247.568 13.7324 247.298 cv
13.5674 247.148 13.4324 247.073 13.3124 247.073 cv
f
14.8424 233.648 mo
14.8424 236.768 li
14.6174 236.753 li
14.5874 236.393 14.4824 236.138 14.3024 236.018 cv
14.1224 235.898 13.7774 235.823 13.2674 235.823 cv
10.2824 235.823 li
9.27737 235.823 8.76737 236.198 8.76737 236.918 cv
8.76737 237.173 8.82737 237.413 8.94737 237.623 cv
9.06738 237.848 9.29237 238.133 9.62237 238.463 cv
13.7624 238.463 li
14.0624 238.463 14.2724 238.403 14.3924 238.268 cv
14.5124 238.133 14.5874 237.878 14.6174 237.488 cv
14.8424 237.488 li
14.8424 240.653 li
14.6174 240.653 li
14.5874 240.278 14.4974 240.023 14.3474 239.903 cv
14.1974 239.783 13.8824 239.723 13.4324 239.723 cv
9.78737 239.723 li
9.42737 239.723 9.17237 239.768 9.02238 239.828 cv
8.88737 239.903 8.81237 240.038 8.81237 240.248 cv
8.81237 240.458 8.84237 240.593 8.87237 240.683 cv
8.61737 240.683 li
8.42237 239.993 8.19737 239.303 7.94237 238.628 cv
7.98737 238.508 li
9.15737 238.508 li
9.15737 238.493 li
8.34737 237.788 7.94237 237.068 7.94237 236.333 cv
7.94237 235.763 8.15237 235.328 8.54237 235.028 cv
8.94737 234.728 9.51737 234.563 10.2524 234.563 cv
13.5674 234.563 li
13.9724 234.563 14.2424 234.503 14.3624 234.383 cv
14.4974 234.263 14.5874 234.023 14.6174 233.648 cv
14.8424 233.648 li
f
14.0924 226.223 mo
14.3024 226.223 li
14.5124 227.003 14.7374 227.693 14.9624 228.278 cv
14.9174 228.353 li
13.7024 228.353 li
13.7024 228.383 li
14.5574 229.013 14.9774 229.733 14.9774 230.528 cv
14.9774 231.098 14.8124 231.548 14.4674 231.878 cv
14.1224 232.208 13.6574 232.358 13.0724 232.358 cv
9.30737 232.358 li
8.94737 232.358 8.69238 232.433 8.54237 232.553 cv
8.40737 232.688 8.33237 232.928 8.30237 233.288 cv
8.09237 233.288 li
8.09237 231.098 li
12.9374 231.098 li
13.2824 231.098 13.5674 231.008 13.7924 230.798 cv
14.0174 230.588 14.1224 230.333 14.1224 230.033 cv
14.1224 229.553 13.9724 229.133 13.6574 228.773 cv
13.5374 228.653 13.4324 228.563 13.3274 228.503 cv
13.2224 228.458 13.0424 228.428 12.7874 228.428 cv
9.32237 228.428 li
8.93237 228.428 8.69238 228.503 8.57237 228.638 cv
8.45237 228.788 8.37737 229.088 8.34737 229.538 cv
8.09237 229.538 li
8.09237 227.168 li
13.2374 227.168 li
13.5974 227.168 13.8224 227.123 13.9274 227.003 cv
14.0474 226.883 14.0924 226.658 14.0924 226.313 cv
14.0924 226.223 li
f
14.8424 214.298 mo
14.8424 217.568 li
14.6174 217.568 li
14.5874 217.148 14.4974 216.893 14.3624 216.773 cv
14.2274 216.653 13.9424 216.593 13.4924 216.593 cv
10.4024 216.593 li
9.80237 216.593 9.38237 216.683 9.11238 216.863 cv
8.85737 217.043 8.72237 217.328 8.72237 217.748 cv
8.72237 218.108 8.79737 218.408 8.93237 218.648 cv
9.08237 218.888 9.30737 219.128 9.63737 219.353 cv
13.4174 219.353 li
13.8974 219.353 14.2274 219.293 14.3774 219.143 cv
14.5274 218.993 14.6174 218.708 14.6174 218.273 cv
14.8424 218.273 li
14.8424 221.633 li
14.6174 221.633 li
14.5874 221.198 14.5274 220.913 14.4074 220.793 cv
14.2874 220.673 14.0024 220.613 13.5524 220.613 cv
10.3874 220.613 li
9.27737 220.613 8.72237 220.943 8.72237 221.588 cv
8.72237 221.873 8.79737 222.173 8.91737 222.488 cv
9.03737 222.803 9.18737 223.028 9.36737 223.178 cv
9.51737 223.313 9.60737 223.373 9.62237 223.373 cv
13.7924 223.373 li
14.1224 223.373 14.3324 223.313 14.4374 223.163 cv
14.5424 223.028 14.6024 222.758 14.6174 222.353 cv
14.8424 222.353 li
14.8424 225.683 li
14.6174 225.683 li
14.6174 225.263 14.5424 224.993 14.3924 224.843 cv
14.2424 224.708 13.9574 224.633 13.5224 224.633 cv
9.80237 224.633 li
9.44238 224.633 9.18737 224.678 9.03737 224.753 cv
8.88737 224.843 8.81237 224.978 8.81237 225.158 cv
8.81237 225.308 8.84237 225.473 8.87237 225.638 cv
8.61737 225.638 li
8.43737 224.963 8.21237 224.273 7.94237 223.553 cv
7.98737 223.433 li
9.09737 223.433 li
9.09737 223.403 li
8.63237 222.953 8.31738 222.563 8.16737 222.218 cv
8.01737 221.873 7.94237 221.498 7.94237 221.108 cv
7.94237 220.328 8.36237 219.788 9.20237 219.518 cv
8.36237 218.738 7.94237 217.928 7.94237 217.073 cv
7.94237 215.918 8.84237 215.333 10.6424 215.333 cv
13.6874 215.333 li
14.0174 215.333 14.2574 215.288 14.3774 215.183 cv
14.4974 215.093 14.5724 214.928 14.5874 214.688 cv
14.6174 214.298 li
14.8424 214.298 li
f
4.62737 211.958 mo
9.20237 211.958 li
8.82737 211.808 8.52737 211.538 8.28737 211.178 cv
8.06237 210.818 7.94237 210.398 7.94237 209.933 cv
7.94237 209.153 8.25737 208.508 8.88737 207.998 cv
9.51737 207.488 10.3124 207.233 11.2424 207.233 cv
12.3524 207.233 13.2524 207.578 13.9424 208.238 cv
14.6324 208.913 14.9774 209.753 14.9774 210.743 cv
14.9774 211.358 14.8724 211.928 14.6774 212.438 cv
14.4824 212.963 14.2574 213.218 14.0024 213.218 cv
6.35237 213.218 li
5.99237 213.218 5.75237 213.263 5.64737 213.353 cv
5.54237 213.443 5.48237 213.653 5.48237 213.953 cv
5.51237 214.208 li
5.25737 214.208 li
5.12237 213.758 li
4.82237 212.738 4.64237 212.168 4.59737 212.033 cv
4.62737 211.958 li
10.0724 211.958 mo
13.7324 211.958 li
13.9724 211.958 14.1524 211.823 14.3024 211.538 cv
14.4524 211.253 14.5124 210.908 14.5124 210.503 cv
14.5124 209.918 14.3024 209.453 13.8674 209.108 cv
13.4174 208.748 12.7574 208.553 11.8874 208.553 cv
10.9124 208.553 10.1474 208.748 9.59237 209.138 cv
9.12737 209.468 8.88737 209.918 8.88737 210.473 cv
8.88737 210.878 9.00737 211.223 9.24737 211.523 cv
9.48738 211.823 9.75737 211.958 10.0724 211.958 cv
f
12.3824 200.633 mo
12.4874 200.393 li
14.1524 200.993 14.9774 202.043 14.9774 203.528 cv
14.9774 204.413 14.6774 205.103 14.0624 205.613 cv
13.4624 206.123 12.6374 206.378 11.5874 206.378 cv
10.5224 206.378 9.65237 206.093 8.96237 205.523 cv
8.28737 204.953 7.94237 204.203 7.94237 203.273 cv
7.94237 202.373 8.28737 201.683 8.97738 201.188 cv
9.38237 200.903 9.95237 200.738 10.6874 200.678 cv
10.6874 205.298 li
11.3174 205.268 11.7974 205.208 12.1274 205.118 cv
12.4574 205.028 12.8024 204.863 13.1324 204.608 cv
13.6874 204.188 13.9574 203.633 13.9574 202.943 cv
13.9574 202.463 13.8374 202.043 13.5974 201.713 cv
13.3574 201.383 12.9524 201.023 12.3824 200.633 cv
10.2074 205.268 mo
10.2074 202.208 li
9.57737 202.298 9.14237 202.448 8.87237 202.658 cv
8.61737 202.868 8.48237 203.198 8.48237 203.678 cv
8.48237 204.098 8.63237 204.458 8.93237 204.728 cv
9.23237 205.013 9.65237 205.193 10.2074 205.268 cv
f
7.97237 197.693 mo
9.35238 197.693 li
8.81237 197.318 8.45237 197.003 8.24237 196.748 cv
8.04737 196.493 7.94237 196.208 7.94237 195.893 cv
7.94237 195.638 8.01737 195.443 8.15237 195.293 cv
8.30237 195.143 8.49737 195.068 8.73738 195.068 cv
8.94737 195.068 9.11238 195.128 9.23237 195.233 cv
9.35238 195.338 9.41237 195.473 9.41237 195.653 cv
9.41237 195.848 9.32237 196.043 9.11238 196.253 cv
8.96237 196.418 8.88737 196.553 8.88737 196.643 cv
8.88737 196.853 9.03737 197.093 9.32237 197.333 cv
9.62237 197.573 9.87737 197.693 10.1174 197.693 cv
13.4924 197.693 li
13.9274 197.693 14.2124 197.618 14.3624 197.438 cv
14.5124 197.273 14.6024 196.928 14.6174 196.418 cv
14.8424 196.418 li
14.8424 200.018 li
14.6174 200.018 li
14.5274 199.538 14.4374 199.253 14.3174 199.133 cv
14.2124 199.013 13.9724 198.953 13.5824 198.953 cv
9.83237 198.953 li
9.50237 198.953 9.27737 198.998 9.14237 199.073 cv
9.00737 199.148 8.93237 199.283 8.93237 199.463 cv
8.93237 199.628 8.96237 199.808 8.99237 199.988 cv
8.75237 199.988 li
8.55737 199.358 8.28737 198.623 7.94237 197.768 cv
7.97237 197.693 li
f
11.3774 184.298 mo
12.4274 184.298 13.2974 184.613 13.9724 185.243 cv
14.6474 185.873 14.9774 186.683 14.9774 187.673 cv
14.9774 188.603 14.6474 189.368 13.9724 189.983 cv
13.3124 190.613 12.4574 190.913 11.4224 190.913 cv
10.3874 190.913 9.54737 190.613 8.90237 189.983 cv
8.27238 189.368 7.94237 188.558 7.94237 187.538 cv
7.94237 186.608 8.27238 185.843 8.90237 185.228 cv
9.53237 184.613 10.3574 184.298 11.3774 184.298 cv
11.7824 185.648 mo
10.6424 185.648 9.75737 185.903 9.11238 186.398 cv
8.61737 186.803 8.36237 187.283 8.36237 187.823 cv
8.36237 188.348 8.58737 188.768 9.00737 189.083 cv
9.42737 189.413 10.0124 189.563 10.7474 189.563 cv
12.0374 189.563 13.0574 189.308 13.8224 188.768 cv
14.3324 188.438 14.5724 187.988 14.5724 187.418 cv
14.5724 186.878 14.3324 186.443 13.8374 186.128 cv
13.3424 185.813 12.6524 185.648 11.7824 185.648 cv
f
8.09237 183.533 mo
8.09237 182.303 li
7.49237 182.303 7.02737 182.258 6.69737 182.183 cv
6.36737 182.123 6.02237 181.988 5.67737 181.778 cv
4.95737 181.358 4.59737 180.653 4.59737 179.663 cv
4.59737 179.213 4.68737 178.853 4.86737 178.553 cv
5.04737 178.253 5.25737 178.103 5.52737 178.103 cv
5.70737 178.103 5.84237 178.163 5.96237 178.283 cv
6.08237 178.403 6.14237 178.553 6.14237 178.733 cv
6.14237 178.973 5.96237 179.198 5.60237 179.408 cv
5.21237 179.648 5.01737 179.918 5.01737 180.203 cv
5.01737 180.773 5.46737 181.043 6.35237 181.043 cv
8.09237 181.043 li
8.09237 179.213 li
8.57237 179.213 li
8.57237 181.043 li
13.2824 181.043 li
13.8524 181.043 14.2124 180.968 14.3624 180.803 cv
14.5124 180.653 14.6024 180.263 14.6174 179.648 cv
14.8424 179.648 li
14.8424 183.548 li
14.6174 183.548 li
14.5874 183.008 14.4974 182.678 14.3474 182.528 cv
14.1974 182.378 13.8374 182.303 13.2824 182.303 cv
8.57237 182.303 li
8.57237 183.533 li
8.09237 183.533 li
f
14.0924 167.903 mo
14.3024 167.903 li
14.5124 168.683 14.7374 169.373 14.9624 169.958 cv
14.9174 170.033 li
13.7024 170.033 li
13.7024 170.063 li
14.5574 170.693 14.9774 171.413 14.9774 172.208 cv
14.9774 172.778 14.8124 173.228 14.4674 173.558 cv
14.1224 173.888 13.6574 174.038 13.0724 174.038 cv
9.30737 174.038 li
8.94737 174.038 8.69238 174.113 8.54237 174.233 cv
8.40737 174.368 8.33237 174.608 8.30237 174.968 cv
8.09237 174.968 li
8.09237 172.778 li
12.9374 172.778 li
13.2824 172.778 13.5674 172.688 13.7924 172.478 cv
14.0174 172.268 14.1224 172.013 14.1224 171.713 cv
14.1224 171.233 13.9724 170.813 13.6574 170.453 cv
13.5374 170.333 13.4324 170.243 13.3274 170.183 cv
13.2224 170.138 13.0424 170.108 12.7874 170.108 cv
9.32237 170.108 li
8.93237 170.108 8.69238 170.183 8.57237 170.318 cv
8.45237 170.468 8.37737 170.768 8.34737 171.218 cv
8.09237 171.218 li
8.09237 168.848 li
13.2374 168.848 li
13.5974 168.848 13.8224 168.803 13.9274 168.683 cv
14.0474 168.563 14.0924 168.338 14.0924 167.993 cv
14.0924 167.903 li
f
14.8424 160.328 mo
14.8424 163.448 li
14.6174 163.433 li
14.5874 163.073 14.4824 162.818 14.3024 162.698 cv
14.1224 162.578 13.7774 162.503 13.2674 162.503 cv
10.2824 162.503 li
9.27737 162.503 8.76737 162.878 8.76737 163.598 cv
8.76737 163.853 8.82737 164.093 8.94737 164.303 cv
9.06738 164.528 9.29237 164.813 9.62237 165.143 cv
13.7624 165.143 li
14.0624 165.143 14.2724 165.083 14.3924 164.948 cv
14.5124 164.813 14.5874 164.558 14.6174 164.168 cv
14.8424 164.168 li
14.8424 167.333 li
14.6174 167.333 li
14.5874 166.958 14.4974 166.703 14.3474 166.583 cv
14.1974 166.463 13.8824 166.403 13.4324 166.403 cv
9.78737 166.403 li
9.42737 166.403 9.17237 166.448 9.02238 166.508 cv
8.88737 166.583 8.81237 166.718 8.81237 166.928 cv
8.81237 167.138 8.84237 167.273 8.87237 167.363 cv
8.61737 167.363 li
8.42237 166.673 8.19737 165.983 7.94237 165.308 cv
7.98737 165.188 li
9.15737 165.188 li
9.15737 165.173 li
8.34737 164.468 7.94237 163.748 7.94237 163.013 cv
7.94237 162.443 8.15237 162.008 8.54237 161.708 cv
8.94737 161.408 9.51737 161.243 10.2524 161.243 cv
13.5674 161.243 li
13.9724 161.243 14.2424 161.183 14.3624 161.063 cv
14.4974 160.943 14.5874 160.703 14.6174 160.328 cv
14.8424 160.328 li
f
5.36237 157.403 mo
5.58737 157.403 5.76737 157.478 5.91737 157.628 cv
6.06737 157.778 6.12737 157.973 6.12737 158.183 cv
6.12737 158.393 6.06737 158.573 5.91737 158.723 cv
5.76737 158.873 5.58737 158.933 5.36237 158.933 cv
5.15237 158.933 4.97237 158.858 4.82237 158.708 cv
4.67237 158.558 4.59737 158.378 4.59737 158.168 cv
4.59737 157.958 4.67237 157.778 4.82237 157.628 cv
4.97237 157.478 5.15237 157.403 5.36237 157.403 cv
14.8424 156.308 mo
14.8424 159.863 li
14.6174 159.863 li
14.5874 159.353 14.4974 159.023 14.3474 158.888 cv
14.1974 158.753 13.8524 158.678 13.2824 158.678 cv
9.87737 158.678 li
9.53237 158.678 9.29237 158.723 9.14237 158.783 cv
9.00737 158.858 8.93237 158.993 8.93237 159.173 cv
8.93237 159.413 8.96237 159.623 9.00737 159.803 cv
8.76737 159.803 li
7.94237 157.478 li
8.00237 157.418 li
13.2674 157.418 li
13.8374 157.418 14.1824 157.358 14.3324 157.238 cv
14.4824 157.118 14.5874 156.803 14.6174 156.308 cv
14.8424 156.308 li
f
18.0824 148.613 mo
18.0824 152.153 li
17.8274 152.153 li
17.7824 151.628 17.6924 151.268 17.5424 151.088 cv
17.3924 150.908 17.1074 150.818 16.6874 150.818 cv
13.8824 150.818 li
14.6174 151.508 14.9774 152.288 14.9774 153.173 cv
14.9774 153.878 14.6924 154.448 14.0924 154.898 cv
13.4924 155.348 12.7274 155.573 11.7674 155.573 cv
10.6874 155.573 9.78737 155.258 9.05237 154.628 cv
8.31738 153.998 7.94237 153.203 7.94237 152.273 cv
7.94237 151.718 8.12237 151.133 8.46737 150.533 cv
7.98737 149.723 li
7.98737 149.558 li
16.9424 149.558 li
17.2574 149.558 17.4674 149.498 17.5874 149.378 cv
17.7074 149.258 17.7824 149.003 17.8274 148.613 cv
18.0824 148.613 li
12.9374 150.818 mo
9.84737 150.818 li
8.87237 150.818 8.37737 151.283 8.37737 152.213 cv
8.37737 152.858 8.63237 153.368 9.14237 153.728 cv
9.65237 154.103 10.3574 154.283 11.2274 154.283 cv
11.7524 154.283 12.2324 154.208 12.6824 154.058 cv
13.1324 153.908 13.4624 153.698 13.6724 153.443 cv
13.9424 153.143 14.0774 152.768 14.0774 152.318 cv
14.0774 151.793 13.9274 151.358 13.5974 150.998 cv
13.4924 150.878 13.2674 150.818 12.9374 150.818 cv
f
14.0924 141.233 mo
14.3024 141.233 li
14.5124 142.013 14.7374 142.703 14.9624 143.288 cv
14.9174 143.363 li
13.7024 143.363 li
13.7024 143.393 li
14.5574 144.023 14.9774 144.743 14.9774 145.538 cv
14.9774 146.108 14.8124 146.558 14.4674 146.888 cv
14.1224 147.218 13.6574 147.368 13.0724 147.368 cv
9.30737 147.368 li
8.94737 147.368 8.69238 147.443 8.54237 147.563 cv
8.40737 147.698 8.33237 147.938 8.30237 148.298 cv
8.09237 148.298 li
8.09237 146.108 li
12.9374 146.108 li
13.2824 146.108 13.5674 146.018 13.7924 145.808 cv
14.0174 145.598 14.1224 145.343 14.1224 145.043 cv
14.1224 144.563 13.9724 144.143 13.6574 143.783 cv
13.5374 143.663 13.4324 143.573 13.3274 143.513 cv
13.2224 143.468 13.0424 143.438 12.7874 143.438 cv
9.32237 143.438 li
8.93237 143.438 8.69238 143.513 8.57237 143.648 cv
8.45237 143.798 8.37737 144.098 8.34737 144.548 cv
8.09237 144.548 li
8.09237 142.178 li
13.2374 142.178 li
13.5974 142.178 13.8224 142.133 13.9274 142.013 cv
14.0474 141.893 14.0924 141.668 14.0924 141.323 cv
14.0924 141.233 li
f
12.3824 134.813 mo
12.4874 134.573 li
14.1524 135.173 14.9774 136.223 14.9774 137.708 cv
14.9774 138.593 14.6774 139.283 14.0624 139.793 cv
13.4624 140.303 12.6374 140.558 11.5874 140.558 cv
10.5224 140.558 9.65237 140.273 8.96237 139.703 cv
8.28737 139.133 7.94237 138.383 7.94237 137.453 cv
7.94237 136.553 8.28737 135.863 8.97738 135.368 cv
9.38237 135.083 9.95237 134.918 10.6874 134.858 cv
10.6874 139.478 li
11.3174 139.448 11.7974 139.388 12.1274 139.298 cv
12.4574 139.208 12.8024 139.043 13.1324 138.788 cv
13.6874 138.368 13.9574 137.813 13.9574 137.123 cv
13.9574 136.643 13.8374 136.223 13.5974 135.893 cv
13.3574 135.563 12.9524 135.203 12.3824 134.813 cv
10.2074 139.448 mo
10.2074 136.388 li
9.57737 136.478 9.14237 136.628 8.87237 136.838 cv
8.61737 137.048 8.48237 137.378 8.48237 137.858 cv
8.48237 138.278 8.63237 138.638 8.93237 138.908 cv
9.23237 139.193 9.65237 139.373 10.2074 139.448 cv
f
7.97237 128.138 mo
9.12737 128.138 li
8.34737 127.508 7.94237 126.788 7.94237 125.978 cv
7.94237 125.258 8.24237 124.658 8.84237 124.178 cv
9.44238 123.713 10.2074 123.473 11.1374 123.473 cv
12.2324 123.473 13.1474 123.788 13.8824 124.388 cv
14.6174 124.988 14.9774 125.738 14.9774 126.623 cv
14.9774 126.938 14.9324 127.208 14.8424 127.418 cv
14.7674 127.628 14.6024 127.868 14.3474 128.138 cv
16.6874 128.138 li
17.1524 128.138 17.4524 128.063 17.5874 127.898 cv
17.7224 127.748 17.7974 127.388 17.8124 126.818 cv
18.0824 126.818 li
18.0824 130.448 li
17.8274 130.448 li
17.7824 130.013 17.6924 129.728 17.5724 129.593 cv
17.4374 129.473 17.1824 129.398 16.7924 129.398 cv
9.78737 129.398 li
9.44238 129.398 9.21737 129.443 9.09737 129.518 cv
8.99237 129.608 8.93237 129.773 8.93237 130.013 cv
8.93237 130.178 8.94737 130.298 8.94737 130.388 cv
8.70737 130.388 li
8.49737 129.698 8.24237 128.978 7.94237 128.228 cv
7.97237 128.138 li
9.83237 128.138 mo
13.5224 128.138 li
13.7474 128.138 13.9724 127.973 14.1824 127.628 cv
14.4074 127.283 14.5124 126.938 14.5124 126.578 cv
14.5124 126.038 14.2574 125.603 13.7474 125.273 cv
13.2374 124.943 12.5774 124.763 11.7374 124.763 cv
10.8674 124.763 10.1624 124.943 9.63737 125.273 cv
9.11238 125.603 8.84237 126.053 8.84237 126.608 cv
8.84237 126.968 8.96237 127.313 9.17237 127.643 cv
9.39738 127.973 9.62237 128.138 9.83237 128.138 cv
f
13.8524 116.393 mo
14.2724 116.393 li
14.7524 116.783 14.9774 117.233 14.9774 117.743 cv
14.9774 118.313 14.6174 118.643 13.8974 118.703 cv
13.8974 118.718 li
14.6174 119.363 14.9774 120.083 14.9774 120.893 cv
14.9774 121.373 14.8424 121.748 14.5724 122.033 cv
14.3024 122.333 13.9274 122.468 13.4324 122.468 cv
12.7424 122.468 12.1574 122.123 11.6774 121.418 cv
11.3624 120.938 10.9574 120.038 10.4624 118.718 cv
9.65237 118.718 li
9.20237 118.718 8.87237 118.838 8.64738 119.048 cv
8.42237 119.258 8.30237 119.543 8.30237 119.888 cv
8.30237 120.188 8.37737 120.443 8.52737 120.638 cv
8.67737 120.848 8.84237 120.938 9.03737 120.938 cv
9.12737 120.938 9.23237 120.923 9.33737 120.893 cv
9.45737 120.863 9.56237 120.848 9.66737 120.848 cv
9.81738 120.848 9.96737 120.923 10.0874 121.058 cv
10.2224 121.193 10.2824 121.358 10.2824 121.538 cv
10.2824 121.718 10.2224 121.868 10.0874 121.988 cv
9.96737 122.123 9.80237 122.183 9.59237 122.183 cv
9.11238 122.183 8.72237 121.928 8.39237 121.418 cv
8.09237 120.953 7.94237 120.383 7.94237 119.693 cv
7.94237 118.883 8.16737 118.298 8.61737 117.923 cv
8.82737 117.743 9.05237 117.638 9.26237 117.578 cv
9.47237 117.533 9.81738 117.503 10.2824 117.503 cv
13.1474 117.503 li
13.8074 117.503 14.1374 117.353 14.1374 117.038 cv
14.1374 116.843 14.0474 116.633 13.8524 116.393 cv
12.9374 118.718 mo
10.8224 118.718 li
11.1524 119.648 11.4824 120.278 11.8124 120.638 cv
12.1274 120.983 12.5174 121.148 12.9674 121.148 cv
13.3574 121.148 13.6424 121.058 13.8374 120.863 cv
14.0324 120.683 14.1224 120.428 14.1224 120.113 cv
14.1224 119.783 14.0474 119.498 13.8824 119.243 cv
13.7324 119.033 13.5974 118.898 13.4624 118.823 cv
13.3424 118.763 13.1624 118.718 12.9374 118.718 cv
f
13.6874 112.373 mo
13.8524 112.178 li
14.6024 112.658 14.9774 113.273 14.9774 113.993 cv
14.9774 114.878 14.3474 115.313 13.0874 115.313 cv
8.57237 115.313 li
8.57237 116.108 li
8.46737 116.168 li
8.39237 116.168 8.30237 116.093 8.18237 115.913 cv
7.97237 115.538 7.43237 115.058 6.57737 114.458 cv
6.54737 114.443 6.48737 114.398 6.39737 114.323 cv
6.30737 114.248 6.21737 114.188 6.15737 114.158 cv
6.15737 114.098 6.23237 114.053 6.35237 114.053 cv
8.09237 114.053 li
8.09237 112.538 li
8.57237 112.538 li
8.57237 114.053 li
12.8624 114.053 li
13.3424 114.053 13.6874 113.993 13.8974 113.873 cv
14.1074 113.753 14.2124 113.558 14.2124 113.273 cv
14.2124 112.973 14.0474 112.673 13.6874 112.373 cv
f
14.8424 104.888 mo
14.8424 108.068 li
14.6174 108.068 li
14.5724 107.633 14.4674 107.348 14.3174 107.228 cv
14.1674 107.108 13.8374 107.048 13.3124 107.048 cv
10.3424 107.048 li
9.29237 107.048 8.75237 107.423 8.75237 108.158 cv
8.75237 108.458 8.82737 108.743 8.96237 108.983 cv
9.11238 109.238 9.35238 109.523 9.69737 109.838 cv
13.3124 109.838 li
13.8374 109.838 14.1674 109.778 14.3174 109.658 cv
14.4674 109.538 14.5724 109.268 14.6174 108.818 cv
14.8424 108.818 li
14.8424 112.058 li
14.6174 112.058 li
14.5574 111.638 14.4674 111.368 14.3174 111.263 cv
14.1824 111.158 13.8524 111.098 13.3124 111.098 cv
6.24737 111.098 li
5.93237 111.098 5.72237 111.158 5.63237 111.248 cv
5.54237 111.338 5.48237 111.548 5.48237 111.863 cv
5.48237 111.953 5.49737 112.013 5.49737 112.043 cv
5.25737 112.043 li
5.13737 111.638 li
4.91237 110.873 4.73237 110.303 4.59737 109.913 cv
4.64237 109.838 li
9.20237 109.838 li
8.75237 109.493 8.43737 109.148 8.24237 108.803 cv
8.04737 108.473 7.94237 108.083 7.94237 107.633 cv
7.94237 106.403 8.73738 105.788 10.3274 105.788 cv
13.3124 105.788 li
13.8374 105.788 14.1674 105.743 14.3024 105.653 cv
14.4374 105.563 14.5424 105.308 14.6174 104.888 cv
14.8424 104.888 li
f
10.3274 102.353 mo
11.2724 100.793 li
11.5724 100.298 11.8574 99.9528 12.1124 99.7578 cv
12.3824 99.5778 12.7124 99.4728 13.1174 99.4728 cv
13.6274 99.4728 14.0624 99.6828 14.4224 100.103 cv
14.7974 100.523 14.9774 101.003 14.9774 101.573 cv
14.9774 102.053 14.9324 102.413 14.8424 102.668 cv
14.7674 102.938 14.7224 103.178 14.7224 103.358 cv
14.7224 103.538 14.7824 103.658 14.8874 103.718 cv
14.8874 103.913 li
12.5474 103.913 li
12.5474 103.673 li
13.2824 103.523 13.8224 103.283 14.1524 102.983 cv
14.4974 102.683 14.6624 102.278 14.6624 101.768 cv
14.6624 101.408 14.5574 101.108 14.3474 100.868 cv
14.1374 100.643 13.8824 100.523 13.5524 100.523 cv
13.1024 100.523 12.7274 100.793 12.4274 101.318 cv
11.9774 102.128 li
11.3174 103.328 10.5824 103.928 9.80237 103.928 cv
9.23237 103.928 8.78237 103.748 8.45237 103.373 cv
8.12237 102.998 7.95737 102.488 7.95737 101.858 cv
7.95737 101.423 8.01737 101.093 8.12237 100.853 cv
8.21237 100.673 8.24237 100.538 8.24237 100.433 cv
8.24237 100.373 8.19737 100.283 8.09237 100.193 cv
8.09237 100.028 li
10.1324 99.9528 li
10.1324 100.178 li
9.45737 100.358 8.97738 100.568 8.70737 100.823 cv
8.43737 101.078 8.28737 101.423 8.28737 101.873 cv
8.28737 102.218 8.37737 102.488 8.54237 102.698 cv
8.72237 102.908 8.97738 102.998 9.30737 102.998 cv
9.48738 102.998 9.66737 102.953 9.86238 102.833 cv
10.0574 102.713 10.2074 102.563 10.3274 102.353 cv
f
14.2124 87.7427 mo
14.9774 89.9477 li
14.9324 90.0077 li
13.9874 90.0077 li
14.6474 90.4877 14.9774 91.1327 14.9774 91.9277 cv
14.9774 92.7677 14.6924 93.4277 14.0924 93.9377 cv
13.5074 94.4477 12.7274 94.7027 11.7674 94.7027 cv
10.7174 94.7027 9.81738 94.4027 9.06738 93.7877 cv
8.31738 93.1877 7.94237 92.4527 7.94237 91.5827 cv
7.94237 91.0427 8.16737 90.5177 8.58737 90.0077 cv
6.24737 90.0077 li
5.94737 90.0077 5.73737 90.0527 5.63237 90.1427 cv
5.54237 90.2327 5.48237 90.4277 5.48237 90.6977 cv
5.48237 90.8477 5.49737 90.9527 5.49737 91.0277 cv
5.25737 91.0277 li
5.01737 90.1277 4.80737 89.3927 4.59737 88.8227 cv
4.62737 88.7477 li
13.1324 88.7477 li
13.4924 88.7477 13.7174 88.7177 13.8224 88.6277 cv
13.9424 88.5377 13.9874 88.3577 13.9874 88.0877 cv
13.9874 88.0277 13.9874 87.9227 13.9724 87.7427 cv
14.2124 87.7427 li
13.3124 90.0077 mo
9.86238 90.0077 li
9.47237 90.0077 9.11238 90.1727 8.81237 90.4727 cv
8.51237 90.7727 8.36237 91.1327 8.36237 91.5377 cv
8.36237 92.1077 8.61737 92.5727 9.12737 92.9027 cv
9.63737 93.2477 10.3274 93.4127 11.1674 93.4127 cv
12.0974 93.4127 12.8324 93.2327 13.3874 92.8577 cv
13.9424 92.4827 14.2124 91.9727 14.2124 91.3427 cv
14.2124 90.8777 14.0624 90.5027 13.7324 90.2327 cv
13.5674 90.0827 13.4324 90.0077 13.3124 90.0077 cv
f
5.36237 84.9077 mo
5.58737 84.9077 5.76737 84.9827 5.91737 85.1327 cv
6.06737 85.2827 6.12737 85.4777 6.12737 85.6877 cv
6.12737 85.8977 6.06737 86.0777 5.91737 86.2277 cv
5.76737 86.3777 5.58737 86.4377 5.36237 86.4377 cv
5.15237 86.4377 4.97237 86.3627 4.82237 86.2127 cv
4.67237 86.0627 4.59737 85.8827 4.59737 85.6727 cv
4.59737 85.4627 4.67237 85.2827 4.82237 85.1327 cv
4.97237 84.9827 5.15237 84.9077 5.36237 84.9077 cv
14.8424 83.8127 mo
14.8424 87.3677 li
14.6174 87.3677 li
14.5874 86.8577 14.4974 86.5277 14.3474 86.3927 cv
14.1974 86.2577 13.8524 86.1827 13.2824 86.1827 cv
9.87737 86.1827 li
9.53237 86.1827 9.29237 86.2277 9.14237 86.2877 cv
9.00737 86.3627 8.93237 86.4977 8.93237 86.6777 cv
8.93237 86.9177 8.96237 87.1277 9.00737 87.3077 cv
8.76737 87.3077 li
7.94237 84.9827 li
8.00237 84.9227 li
13.2674 84.9227 li
13.8374 84.9227 14.1824 84.8627 14.3324 84.7427 cv
14.4824 84.6227 14.5874 84.3077 14.6174 83.8127 cv
14.8424 83.8127 li
f
10.3274 81.0977 mo
11.2724 79.5377 li
11.5724 79.0427 11.8574 78.6977 12.1124 78.5027 cv
12.3824 78.3227 12.7124 78.2177 13.1174 78.2177 cv
13.6274 78.2177 14.0624 78.4277 14.4224 78.8477 cv
14.7974 79.2677 14.9774 79.7477 14.9774 80.3177 cv
14.9774 80.7977 14.9324 81.1577 14.8424 81.4127 cv
14.7674 81.6827 14.7224 81.9227 14.7224 82.1027 cv
14.7224 82.2827 14.7824 82.4027 14.8874 82.4627 cv
14.8874 82.6577 li
12.5474 82.6577 li
12.5474 82.4177 li
13.2824 82.2677 13.8224 82.0277 14.1524 81.7277 cv
14.4974 81.4277 14.6624 81.0227 14.6624 80.5127 cv
14.6624 80.1527 14.5574 79.8527 14.3474 79.6127 cv
14.1374 79.3877 13.8824 79.2677 13.5524 79.2677 cv
13.1024 79.2677 12.7274 79.5377 12.4274 80.0627 cv
11.9774 80.8727 li
11.3174 82.0727 10.5824 82.6727 9.80237 82.6727 cv
9.23237 82.6727 8.78237 82.4927 8.45237 82.1177 cv
8.12237 81.7427 7.95737 81.2327 7.95737 80.6027 cv
7.95737 80.1677 8.01737 79.8377 8.12237 79.5977 cv
8.21237 79.4177 8.24237 79.2827 8.24237 79.1777 cv
8.24237 79.1177 8.19737 79.0277 8.09237 78.9377 cv
8.09237 78.7727 li
10.1324 78.6977 li
10.1324 78.9227 li
9.45737 79.1027 8.97738 79.3127 8.70737 79.5677 cv
8.43737 79.8227 8.28737 80.1677 8.28737 80.6177 cv
8.28737 80.9627 8.37737 81.2327 8.54237 81.4427 cv
8.72237 81.6527 8.97738 81.7427 9.30737 81.7427 cv
9.48738 81.7427 9.66737 81.6977 9.86238 81.5777 cv
10.0574 81.4577 10.2074 81.3077 10.3274 81.0977 cv
f
12.5024 71.6326 mo
12.6374 71.4226 li
13.4774 71.8576 14.0624 72.2626 14.3624 72.6526 cv
14.7824 73.1626 14.9774 73.7476 14.9774 74.3776 cv
14.9774 75.2176 14.6774 75.8926 14.0474 76.4326 cv
13.4324 76.9726 12.6374 77.2276 11.6624 77.2276 cv
10.4024 77.2276 9.41237 76.8076 8.70737 75.9676 cv
8.19737 75.3526 7.94237 74.6776 7.94237 73.9426 cv
7.94237 73.3126 8.10737 72.7726 8.40737 72.3226 cv
8.70737 71.8726 9.06738 71.6326 9.48738 71.6326 cv
9.66737 71.6326 9.81738 71.7076 9.93737 71.8426 cv
10.0574 71.9926 10.1174 72.1576 10.1174 72.3376 cv
10.1174 72.6976 9.89237 72.9376 9.42737 73.0576 cv
9.09737 73.1476 li
8.82737 73.2376 8.63237 73.3276 8.52737 73.4476 cv
8.43737 73.5676 8.37737 73.7626 8.37737 74.0326 cv
8.37737 74.6476 8.61737 75.1426 9.09737 75.5176 cv
9.57737 75.8926 10.2074 76.0726 10.9874 76.0726 cv
11.8574 76.0726 12.5624 75.8626 13.1024 75.4276 cv
13.6424 75.0076 13.9124 74.4376 13.9124 73.7476 cv
13.9124 73.3276 13.8224 72.9526 13.6124 72.6376 cv
13.4024 72.3376 13.0424 71.9926 12.5024 71.6326 cv
f
11.3774 63.8926 mo
12.4274 63.8926 13.2974 64.2076 13.9724 64.8376 cv
14.6474 65.4676 14.9774 66.2776 14.9774 67.2676 cv
14.9774 68.1976 14.6474 68.9626 13.9724 69.5776 cv
13.3124 70.2076 12.4574 70.5076 11.4224 70.5076 cv
10.3874 70.5076 9.54737 70.2076 8.90237 69.5776 cv
8.27238 68.9626 7.94237 68.1526 7.94237 67.1326 cv
7.94237 66.2026 8.27238 65.4376 8.90237 64.8226 cv
9.53237 64.2076 10.3574 63.8926 11.3774 63.8926 cv
11.7824 65.2426 mo
10.6424 65.2426 9.75737 65.4976 9.11238 65.9926 cv
8.61737 66.3976 8.36237 66.8776 8.36237 67.4176 cv
8.36237 67.9426 8.58737 68.3626 9.00737 68.6776 cv
9.42737 69.0076 10.0124 69.1576 10.7474 69.1576 cv
12.0374 69.1576 13.0574 68.9026 13.8224 68.3626 cv
14.3324 68.0326 14.5724 67.5826 14.5724 67.0126 cv
14.5724 66.4726 14.3324 66.0376 13.8374 65.7226 cv
13.3424 65.4076 12.6524 65.2426 11.7824 65.2426 cv
f
8.09237 56.2876 mo
8.31738 56.2876 li
8.34737 56.5276 8.42237 56.6926 8.54237 56.7976 cv
8.67737 56.9176 8.99237 57.0676 9.48738 57.2626 cv
14.3024 59.1826 li
14.7974 59.3926 15.0374 59.5276 15.0374 59.6026 cv
15.0374 59.6926 14.9024 59.7826 14.6624 59.8726 cv
14.5124 59.9326 li
14.3474 59.9926 li
10.0424 61.7926 li
9.29237 62.1226 8.81237 62.3476 8.63237 62.4976 cv
8.45237 62.6476 8.34737 62.8726 8.31738 63.1576 cv
8.09237 63.1576 li
8.09237 60.2176 li
8.31738 60.2176 li
8.34737 60.4876 8.37737 60.6676 8.43737 60.7576 cv
8.49737 60.8626 8.60238 60.9076 8.72237 60.9076 cv
8.88737 60.9076 9.08237 60.8626 9.29237 60.7726 cv
13.1324 59.2426 li
9.24737 57.7576 li
9.09737 57.6976 8.94737 57.6676 8.79737 57.6676 cv
8.52737 57.6676 8.36237 57.9076 8.31738 58.3726 cv
8.09237 58.3726 li
8.09237 56.2876 li
f
12.3824 49.8226 mo
12.4874 49.5826 li
14.1524 50.1826 14.9774 51.2326 14.9774 52.7176 cv
14.9774 53.6026 14.6774 54.2926 14.0624 54.8026 cv
13.4624 55.3126 12.6374 55.5676 11.5874 55.5676 cv
10.5224 55.5676 9.65237 55.2826 8.96237 54.7126 cv
8.28737 54.1426 7.94237 53.3926 7.94237 52.4626 cv
7.94237 51.5626 8.28737 50.8726 8.97738 50.3776 cv
9.38237 50.0926 9.95237 49.9276 10.6874 49.8676 cv
10.6874 54.4876 li
11.3174 54.4576 11.7974 54.3976 12.1274 54.3076 cv
12.4574 54.2176 12.8024 54.0526 13.1324 53.7976 cv
13.6874 53.3776 13.9574 52.8226 13.9574 52.1326 cv
13.9574 51.6526 13.8374 51.2326 13.5974 50.9026 cv
13.3574 50.5726 12.9524 50.2126 12.3824 49.8226 cv
10.2074 54.4576 mo
10.2074 51.3976 li
9.57737 51.4876 9.14237 51.6376 8.87237 51.8476 cv
8.61737 52.0576 8.48237 52.3876 8.48237 52.8676 cv
8.48237 53.2876 8.63237 53.6476 8.93237 53.9176 cv
9.23237 54.2026 9.65237 54.3826 10.2074 54.4576 cv
f
7.97237 46.8826 mo
9.35238 46.8826 li
8.81237 46.5076 8.45237 46.1926 8.24237 45.9376 cv
8.04737 45.6826 7.94237 45.3976 7.94237 45.0826 cv
7.94237 44.8276 8.01737 44.6326 8.15237 44.4826 cv
8.30237 44.3326 8.49737 44.2576 8.73738 44.2576 cv
8.94737 44.2576 9.11238 44.3176 9.23237 44.4226 cv
9.35238 44.5276 9.41237 44.6626 9.41237 44.8426 cv
9.41237 45.0376 9.32237 45.2326 9.11238 45.4426 cv
8.96237 45.6076 8.88737 45.7426 8.88737 45.8326 cv
8.88737 46.0426 9.03737 46.2826 9.32237 46.5226 cv
9.62237 46.7626 9.87737 46.8826 10.1174 46.8826 cv
13.4924 46.8826 li
13.9274 46.8826 14.2124 46.8076 14.3624 46.6276 cv
14.5124 46.4626 14.6024 46.1176 14.6174 45.6076 cv
14.8424 45.6076 li
14.8424 49.2076 li
14.6174 49.2076 li
14.5274 48.7276 14.4374 48.4426 14.3174 48.3226 cv
14.2124 48.2026 13.9724 48.1426 13.5824 48.1426 cv
9.83237 48.1426 li
9.50237 48.1426 9.27737 48.1876 9.14237 48.2626 cv
9.00737 48.3376 8.93237 48.4726 8.93237 48.6526 cv
8.93237 48.8176 8.96237 48.9976 8.99237 49.1776 cv
8.75237 49.1776 li
8.55737 48.5476 8.28737 47.8126 7.94237 46.9576 cv
7.97237 46.8826 li
f
12.3824 38.1677 mo
12.4874 37.9277 li
14.1524 38.5277 14.9774 39.5777 14.9774 41.0627 cv
14.9774 41.9477 14.6774 42.6377 14.0624 43.1477 cv
13.4624 43.6577 12.6374 43.9127 11.5874 43.9127 cv
10.5224 43.9127 9.65237 43.6277 8.96237 43.0577 cv
8.28737 42.4877 7.94237 41.7377 7.94237 40.8077 cv
7.94237 39.9077 8.28737 39.2177 8.97738 38.7227 cv
9.38237 38.4377 9.95237 38.2727 10.6874 38.2127 cv
10.6874 42.8327 li
11.3174 42.8027 11.7974 42.7427 12.1274 42.6527 cv
12.4574 42.5627 12.8024 42.3977 13.1324 42.1427 cv
13.6874 41.7227 13.9574 41.1677 13.9574 40.4777 cv
13.9574 39.9977 13.8374 39.5777 13.5974 39.2477 cv
13.3574 38.9177 12.9524 38.5577 12.3824 38.1677 cv
10.2074 42.8027 mo
10.2074 39.7427 li
9.57737 39.8327 9.14237 39.9827 8.87237 40.1927 cv
8.61737 40.4027 8.48237 40.7327 8.48237 41.2127 cv
8.48237 41.6327 8.63237 41.9927 8.93237 42.2627 cv
9.23237 42.5477 9.65237 42.7277 10.2074 42.8027 cv
f
14.2124 30.2627 mo
14.9774 32.4677 li
14.9324 32.5277 li
13.9874 32.5277 li
14.6474 33.0077 14.9774 33.6527 14.9774 34.4477 cv
14.9774 35.2877 14.6924 35.9477 14.0924 36.4577 cv
13.5074 36.9677 12.7274 37.2227 11.7674 37.2227 cv
10.7174 37.2227 9.81738 36.9227 9.06738 36.3077 cv
8.31738 35.7077 7.94237 34.9727 7.94237 34.1027 cv
7.94237 33.5627 8.16737 33.0377 8.58737 32.5277 cv
6.24737 32.5277 li
5.94737 32.5277 5.73737 32.5727 5.63237 32.6627 cv
5.54237 32.7527 5.48237 32.9477 5.48237 33.2177 cv
5.48237 33.3677 5.49737 33.4727 5.49737 33.5477 cv
5.25737 33.5477 li
5.01737 32.6477 4.80737 31.9127 4.59737 31.3427 cv
4.62737 31.2677 li
13.1324 31.2677 li
13.4924 31.2677 13.7174 31.2377 13.8224 31.1477 cv
13.9424 31.0577 13.9874 30.8777 13.9874 30.6077 cv
13.9874 30.5477 13.9874 30.4427 13.9724 30.2627 cv
14.2124 30.2627 li
13.3124 32.5277 mo
9.86238 32.5277 li
9.47237 32.5277 9.11238 32.6927 8.81237 32.9927 cv
8.51237 33.2927 8.36237 33.6527 8.36237 34.0577 cv
8.36237 34.6277 8.61737 35.0927 9.12737 35.4227 cv
9.63737 35.7677 10.3274 35.9327 11.1674 35.9327 cv
12.0974 35.9327 12.8324 35.7527 13.3874 35.3777 cv
13.9424 35.0027 14.2124 34.4927 14.2124 33.8627 cv
14.2124 33.3977 14.0624 33.0227 13.7324 32.7527 cv
13.5674 32.6027 13.4324 32.5277 13.3124 32.5277 cv
f
29.2374 311.498 mo
29.4024 311.303 li
30.1524 311.783 30.5274 312.398 30.5274 313.118 cv
30.5274 314.003 29.8974 314.438 28.6374 314.438 cv
24.1224 314.438 li
24.1224 315.233 li
24.0174 315.293 li
23.9424 315.293 23.8524 315.218 23.7324 315.038 cv
23.5224 314.663 22.9824 314.183 22.1274 313.583 cv
22.0974 313.568 22.0374 313.523 21.9474 313.448 cv
21.8574 313.373 21.7674 313.313 21.7074 313.283 cv
21.7074 313.223 21.7824 313.178 21.9024 313.178 cv
23.6424 313.178 li
23.6424 311.663 li
24.1224 311.663 li
24.1224 313.178 li
28.4124 313.178 li
28.8924 313.178 29.2374 313.118 29.4474 312.998 cv
29.6574 312.878 29.7624 312.683 29.7624 312.398 cv
29.7624 312.098 29.5974 311.798 29.2374 311.498 cv
f
26.9274 304.268 mo
27.9774 304.268 28.8474 304.583 29.5224 305.212 cv
30.1974 305.842 30.5274 306.652 30.5274 307.643 cv
30.5274 308.573 30.1974 309.337 29.5224 309.953 cv
28.8624 310.583 28.0074 310.883 26.9724 310.883 cv
25.9374 310.883 25.0974 310.583 24.4524 309.953 cv
23.8224 309.337 23.4924 308.527 23.4924 307.508 cv
23.4924 306.578 23.8224 305.813 24.4524 305.198 cv
25.0824 304.583 25.9074 304.268 26.9274 304.268 cv
27.3324 305.617 mo
26.1924 305.617 25.3074 305.872 24.6624 306.367 cv
24.1674 306.772 23.9124 307.253 23.9124 307.793 cv
23.9124 308.318 24.1374 308.738 24.5574 309.052 cv
24.9774 309.383 25.5624 309.533 26.2974 309.533 cv
27.5874 309.533 28.6074 309.277 29.3724 308.738 cv
29.8824 308.408 30.1224 307.958 30.1224 307.388 cv
30.1224 306.848 29.8824 306.413 29.3874 306.098 cv
28.8924 305.783 28.2024 305.617 27.3324 305.617 cv
f
29.2374 296.078 mo
29.4024 295.883 li
30.1524 296.363 30.5274 296.978 30.5274 297.698 cv
30.5274 298.583 29.8974 299.018 28.6374 299.018 cv
24.1224 299.018 li
24.1224 299.813 li
24.0174 299.872 li
23.9424 299.872 23.8524 299.798 23.7324 299.617 cv
23.5224 299.242 22.9824 298.763 22.1274 298.163 cv
22.0974 298.147 22.0374 298.103 21.9474 298.027 cv
21.8574 297.953 21.7674 297.893 21.7074 297.863 cv
21.7074 297.802 21.7824 297.758 21.9024 297.758 cv
23.6424 297.758 li
23.6424 296.242 li
24.1224 296.242 li
24.1224 297.758 li
28.4124 297.758 li
28.8924 297.758 29.2374 297.698 29.4474 297.578 cv
29.6574 297.458 29.7624 297.263 29.7624 296.978 cv
29.7624 296.677 29.5974 296.378 29.2374 296.078 cv
f
30.3924 288.593 mo
30.3924 291.773 li
30.1674 291.773 li
30.1224 291.338 30.0174 291.053 29.8674 290.933 cv
29.7174 290.813 29.3874 290.753 28.8624 290.753 cv
25.8924 290.753 li
24.8424 290.753 24.3024 291.128 24.3024 291.863 cv
24.3024 292.163 24.3774 292.448 24.5124 292.688 cv
24.6624 292.943 24.9024 293.228 25.2474 293.543 cv
28.8624 293.543 li
29.3874 293.543 29.7174 293.483 29.8674 293.363 cv
30.0174 293.243 30.1224 292.973 30.1674 292.523 cv
30.3924 292.523 li
30.3924 295.763 li
30.1674 295.763 li
30.1074 295.343 30.0174 295.073 29.8674 294.968 cv
29.7324 294.863 29.4024 294.803 28.8624 294.803 cv
21.7974 294.803 li
21.4824 294.803 21.2724 294.863 21.1824 294.953 cv
21.0924 295.043 21.0324 295.253 21.0324 295.568 cv
21.0474 295.748 li
20.8074 295.748 li
20.6874 295.343 li
20.4624 294.578 20.2824 294.008 20.1474 293.618 cv
20.1924 293.543 li
24.7524 293.543 li
24.3024 293.198 23.9874 292.853 23.7924 292.508 cv
23.5974 292.178 23.4924 291.788 23.4924 291.338 cv
23.4924 290.108 24.2874 289.493 25.8774 289.493 cv
28.8624 289.493 li
29.3874 289.493 29.7174 289.448 29.8524 289.358 cv
29.9874 289.268 30.0924 289.013 30.1674 288.593 cv
30.3924 288.593 li
f
27.9324 282.278 mo
28.0374 282.038 li
29.7024 282.638 30.5274 283.688 30.5274 285.173 cv
30.5274 286.058 30.2274 286.748 29.6124 287.258 cv
29.0124 287.768 28.1874 288.023 27.1374 288.023 cv
26.0724 288.023 25.2024 287.738 24.5124 287.168 cv
23.8374 286.598 23.4924 285.848 23.4924 284.918 cv
23.4924 284.018 23.8374 283.328 24.5274 282.833 cv
24.9324 282.548 25.5024 282.383 26.2374 282.323 cv
26.2374 286.943 li
26.8674 286.913 27.3474 286.853 27.6774 286.763 cv
28.0074 286.673 28.3524 286.508 28.6824 286.253 cv
29.2374 285.833 29.5074 285.278 29.5074 284.588 cv
29.5074 284.108 29.3874 283.688 29.1474 283.358 cv
28.9074 283.028 28.5024 282.668 27.9324 282.278 cv
25.7574 286.913 mo
25.7574 283.853 li
25.1274 283.943 24.6924 284.093 24.4224 284.303 cv
24.1674 284.513 24.0324 284.843 24.0324 285.323 cv
24.0324 285.743 24.1824 286.103 24.4824 286.373 cv
24.7824 286.658 25.2024 286.838 25.7574 286.913 cv
f
30.3924 266.362 mo
30.3924 269.632 li
30.1674 269.632 li
30.1374 269.212 30.0474 268.957 29.9124 268.837 cv
29.7774 268.717 29.4924 268.658 29.0424 268.658 cv
25.9524 268.658 li
25.3524 268.658 24.9324 268.747 24.6624 268.927 cv
24.4074 269.107 24.2724 269.392 24.2724 269.813 cv
24.2724 270.172 24.3474 270.472 24.4824 270.712 cv
24.6324 270.952 24.8574 271.192 25.1874 271.417 cv
28.9674 271.417 li
29.4474 271.417 29.7774 271.357 29.9274 271.207 cv
30.0774 271.057 30.1674 270.772 30.1674 270.337 cv
30.3924 270.337 li
30.3924 273.697 li
30.1674 273.697 li
30.1374 273.262 30.0774 272.977 29.9574 272.857 cv
29.8374 272.737 29.5524 272.677 29.1024 272.677 cv
25.9374 272.677 li
24.8274 272.677 24.2724 273.007 24.2724 273.652 cv
24.2724 273.938 24.3474 274.237 24.4674 274.552 cv
24.5874 274.867 24.7374 275.092 24.9174 275.242 cv
25.0674 275.378 25.1574 275.438 25.1724 275.438 cv
29.3424 275.438 li
29.6724 275.438 29.8824 275.378 29.9874 275.227 cv
30.0924 275.092 30.1524 274.822 30.1674 274.417 cv
30.3924 274.417 li
30.3924 277.747 li
30.1674 277.747 li
30.1674 277.327 30.0924 277.057 29.9424 276.908 cv
29.7924 276.772 29.5074 276.697 29.0724 276.697 cv
25.3524 276.697 li
24.9924 276.697 24.7374 276.742 24.5874 276.817 cv
24.4374 276.908 24.3624 277.042 24.3624 277.222 cv
24.3624 277.372 24.3924 277.537 24.4224 277.702 cv
24.1674 277.702 li
23.9874 277.027 23.7624 276.337 23.4924 275.617 cv
23.5374 275.497 li
24.6474 275.497 li
24.6474 275.467 li
24.1824 275.017 23.8674 274.628 23.7174 274.283 cv
23.5674 273.938 23.4924 273.563 23.4924 273.172 cv
23.4924 272.392 23.9124 271.852 24.7524 271.582 cv
23.9124 270.802 23.4924 269.992 23.4924 269.137 cv
23.4924 267.982 24.3924 267.397 26.1924 267.397 cv
29.2374 267.397 li
29.5674 267.397 29.8074 267.352 29.9274 267.247 cv
30.0474 267.158 30.1224 266.992 30.1374 266.753 cv
30.1674 266.362 li
30.3924 266.362 li
f
29.4024 259.688 mo
29.8224 259.688 li
30.3024 260.078 30.5274 260.527 30.5274 261.038 cv
30.5274 261.608 30.1674 261.938 29.4474 261.997 cv
29.4474 262.013 li
30.1674 262.658 30.5274 263.378 30.5274 264.188 cv
30.5274 264.668 30.3924 265.043 30.1224 265.328 cv
29.8524 265.628 29.4774 265.763 28.9824 265.763 cv
28.2924 265.763 27.7074 265.418 27.2274 264.712 cv
26.9124 264.233 26.5074 263.333 26.0124 262.013 cv
25.2024 262.013 li
24.7524 262.013 24.4224 262.133 24.1974 262.342 cv
23.9724 262.552 23.8524 262.837 23.8524 263.182 cv
23.8524 263.483 23.9274 263.738 24.0774 263.932 cv
24.2274 264.143 24.3924 264.233 24.5874 264.233 cv
24.6774 264.233 24.7824 264.217 24.8874 264.188 cv
25.0074 264.158 25.1124 264.143 25.2174 264.143 cv
25.3674 264.143 25.5174 264.217 25.6374 264.353 cv
25.7724 264.488 25.8324 264.652 25.8324 264.833 cv
25.8324 265.013 25.7724 265.163 25.6374 265.283 cv
25.5174 265.418 25.3524 265.478 25.1424 265.478 cv
24.6624 265.478 24.2724 265.223 23.9424 264.712 cv
23.6424 264.247 23.4924 263.677 23.4924 262.988 cv
23.4924 262.177 23.7174 261.592 24.1674 261.217 cv
24.3774 261.038 24.6024 260.932 24.8124 260.872 cv
25.0224 260.828 25.3674 260.798 25.8324 260.798 cv
28.6974 260.798 li
29.3574 260.798 29.6874 260.647 29.6874 260.333 cv
29.6874 260.138 29.5974 259.927 29.4024 259.688 cv
28.4874 262.013 mo
26.3724 262.013 li
26.7024 262.943 27.0324 263.573 27.3624 263.932 cv
27.6774 264.277 28.0674 264.443 28.5174 264.443 cv
28.9074 264.443 29.1924 264.353 29.3874 264.158 cv
29.5824 263.978 29.6724 263.723 29.6724 263.408 cv
29.6724 263.078 29.5974 262.793 29.4324 262.538 cv
29.2824 262.328 29.1474 262.193 29.0124 262.117 cv
28.8924 262.057 28.7124 262.013 28.4874 262.013 cv
f
30.3924 252.473 mo
30.3924 255.488 li
30.1674 255.488 li
30.1524 255.247 30.1224 255.083 30.0774 255.008 cv
30.0324 254.932 29.9424 254.887 29.8074 254.887 cv
29.7174 254.887 29.6274 254.917 29.5374 254.978 cv
27.4374 256.342 li
29.2824 257.527 li
29.5974 257.737 29.8074 257.828 29.8974 257.828 cv
30.0774 257.828 30.1674 257.633 30.1674 257.228 cv
30.3924 257.228 li
30.3924 259.402 li
30.1674 259.402 li
30.1524 259.163 30.0924 258.967 30.0024 258.832 cv
29.9124 258.698 29.7024 258.517 29.4024 258.307 cv
26.9274 256.598 li
24.7674 258.008 li
24.4224 258.247 24.1824 258.443 24.0624 258.592 cv
23.9424 258.758 23.8674 258.953 23.8674 259.163 cv
23.8674 259.298 li
23.6424 259.298 li
23.6424 256.193 li
23.8674 256.193 li
23.8824 256.628 23.9874 256.837 24.1974 256.837 cv
24.4074 256.837 24.8574 256.612 25.5324 256.147 cv
25.7124 256.027 25.8174 255.952 25.8324 255.938 cv
25.7724 255.893 25.5474 255.743 25.1724 255.488 cv
25.0824 255.443 24.9924 255.383 24.8874 255.307 cv
24.7974 255.247 24.7074 255.188 24.6474 255.158 cv
24.4674 255.038 li
24.3174 254.962 li
24.1974 254.932 li
24.0174 254.932 23.8974 255.143 23.8674 255.533 cv
23.6424 255.533 li
23.6424 253.163 li
23.8674 253.163 li
23.8974 253.673 24.1074 254.077 24.5274 254.378 cv
26.3274 255.622 li
29.2674 253.702 li
29.8674 253.313 30.1674 252.908 30.1674 252.473 cv
30.3924 252.473 li
f
20.9124 249.458 mo
21.1374 249.458 21.3174 249.533 21.4674 249.682 cv
21.6174 249.833 21.6774 250.027 21.6774 250.238 cv
21.6774 250.447 21.6174 250.628 21.4674 250.777 cv
21.3174 250.928 21.1374 250.988 20.9124 250.988 cv
20.7024 250.988 20.5224 250.913 20.3724 250.762 cv
20.2224 250.613 20.1474 250.432 20.1474 250.223 cv
20.1474 250.012 20.2224 249.833 20.3724 249.682 cv
20.5224 249.533 20.7024 249.458 20.9124 249.458 cv
30.3924 248.363 mo
30.3924 251.917 li
30.1674 251.917 li
30.1374 251.408 30.0474 251.077 29.8974 250.943 cv
29.7474 250.807 29.4024 250.732 28.8324 250.732 cv
25.4274 250.732 li
25.0824 250.732 24.8424 250.777 24.6924 250.837 cv
24.5574 250.913 24.4824 251.048 24.4824 251.228 cv
24.4824 251.467 24.5124 251.678 24.5574 251.857 cv
24.3174 251.857 li
23.4924 249.533 li
23.5524 249.473 li
28.8174 249.473 li
29.3874 249.473 29.7324 249.413 29.8824 249.292 cv
30.0324 249.173 30.1374 248.857 30.1674 248.363 cv
30.3924 248.363 li
f
30.3924 236.363 mo
30.3924 239.633 li
30.1674 239.633 li
30.1374 239.213 30.0474 238.958 29.9124 238.838 cv
29.7774 238.717 29.4924 238.658 29.0424 238.658 cv
25.9524 238.658 li
25.3524 238.658 24.9324 238.747 24.6624 238.928 cv
24.4074 239.107 24.2724 239.393 24.2724 239.813 cv
24.2724 240.173 24.3474 240.473 24.4824 240.713 cv
24.6324 240.952 24.8574 241.193 25.1874 241.417 cv
28.9674 241.417 li
29.4474 241.417 29.7774 241.357 29.9274 241.208 cv
30.0774 241.057 30.1674 240.773 30.1674 240.338 cv
30.3924 240.338 li
30.3924 243.698 li
30.1674 243.698 li
30.1374 243.262 30.0774 242.978 29.9574 242.857 cv
29.8374 242.738 29.5524 242.678 29.1024 242.678 cv
25.9374 242.678 li
24.8274 242.678 24.2724 243.008 24.2724 243.652 cv
24.2724 243.938 24.3474 244.238 24.4674 244.553 cv
24.5874 244.868 24.7374 245.092 24.9174 245.243 cv
25.0674 245.378 25.1574 245.438 25.1724 245.438 cv
29.3424 245.438 li
29.6724 245.438 29.8824 245.378 29.9874 245.228 cv
30.0924 245.092 30.1524 244.823 30.1674 244.417 cv
30.3924 244.417 li
30.3924 247.747 li
30.1674 247.747 li
30.1674 247.327 30.0924 247.058 29.9424 246.908 cv
29.7924 246.773 29.5074 246.698 29.0724 246.698 cv
25.3524 246.698 li
24.9924 246.698 24.7374 246.743 24.5874 246.818 cv
24.4374 246.908 24.3624 247.042 24.3624 247.223 cv
24.3624 247.372 24.3924 247.538 24.4224 247.702 cv
24.1674 247.702 li
23.9874 247.027 23.7624 246.338 23.4924 245.618 cv
23.5374 245.497 li
24.6474 245.497 li
24.6474 245.467 li
24.1824 245.018 23.8674 244.628 23.7174 244.283 cv
23.5674 243.938 23.4924 243.563 23.4924 243.173 cv
23.4924 242.393 23.9124 241.853 24.7524 241.583 cv
23.9124 240.803 23.4924 239.993 23.4924 239.137 cv
23.4924 237.982 24.3924 237.398 26.1924 237.398 cv
29.2374 237.398 li
29.5674 237.398 29.8074 237.353 29.9274 237.247 cv
30.0474 237.158 30.1224 236.993 30.1374 236.753 cv
30.1674 236.363 li
30.3924 236.363 li
f
29.6424 229.118 mo
29.8524 229.118 li
30.0624 229.898 30.2874 230.588 30.5124 231.173 cv
30.4674 231.247 li
29.2524 231.247 li
29.2524 231.278 li
30.1074 231.908 30.5274 232.628 30.5274 233.423 cv
30.5274 233.993 30.3624 234.443 30.0174 234.773 cv
29.6724 235.103 29.2074 235.253 28.6224 235.253 cv
24.8574 235.253 li
24.4974 235.253 24.2424 235.327 24.0924 235.448 cv
23.9574 235.583 23.8824 235.823 23.8524 236.183 cv
23.6424 236.183 li
23.6424 233.993 li
28.4874 233.993 li
28.8324 233.993 29.1174 233.903 29.3424 233.693 cv
29.5674 233.482 29.6724 233.228 29.6724 232.928 cv
29.6724 232.448 29.5224 232.028 29.2074 231.668 cv
29.0874 231.548 28.9824 231.458 28.8774 231.398 cv
28.7724 231.353 28.5924 231.323 28.3374 231.323 cv
24.8724 231.323 li
24.4824 231.323 24.2424 231.398 24.1224 231.533 cv
24.0024 231.683 23.9274 231.982 23.8974 232.433 cv
23.6424 232.433 li
23.6424 230.063 li
28.7874 230.063 li
29.1474 230.063 29.3724 230.018 29.4774 229.898 cv
29.5974 229.778 29.6424 229.553 29.6424 229.208 cv
29.6424 229.118 li
f
30.3924 217.193 mo
30.3924 220.463 li
30.1674 220.463 li
30.1374 220.043 30.0474 219.788 29.9124 219.668 cv
29.7774 219.548 29.4924 219.488 29.0424 219.488 cv
25.9524 219.488 li
25.3524 219.488 24.9324 219.577 24.6624 219.758 cv
24.4074 219.938 24.2724 220.223 24.2724 220.643 cv
24.2724 221.003 24.3474 221.303 24.4824 221.543 cv
24.6324 221.783 24.8574 222.023 25.1874 222.247 cv
28.9674 222.247 li
29.4474 222.247 29.7774 222.188 29.9274 222.038 cv
30.0774 221.888 30.1674 221.603 30.1674 221.168 cv
30.3924 221.168 li
30.3924 224.528 li
30.1674 224.528 li
30.1374 224.092 30.0774 223.808 29.9574 223.688 cv
29.8374 223.568 29.5524 223.508 29.1024 223.508 cv
25.9374 223.508 li
24.8274 223.508 24.2724 223.838 24.2724 224.482 cv
24.2724 224.768 24.3474 225.068 24.4674 225.383 cv
24.5874 225.698 24.7374 225.923 24.9174 226.073 cv
25.0674 226.208 25.1574 226.268 25.1724 226.268 cv
29.3424 226.268 li
29.6724 226.268 29.8824 226.208 29.9874 226.058 cv
30.0924 225.923 30.1524 225.653 30.1674 225.247 cv
30.3924 225.247 li
30.3924 228.577 li
30.1674 228.577 li
30.1674 228.158 30.0924 227.888 29.9424 227.738 cv
29.7924 227.603 29.5074 227.528 29.0724 227.528 cv
25.3524 227.528 li
24.9924 227.528 24.7374 227.573 24.5874 227.648 cv
24.4374 227.738 24.3624 227.872 24.3624 228.053 cv
24.3624 228.202 24.3924 228.368 24.4224 228.533 cv
24.1674 228.533 li
23.9874 227.857 23.7624 227.168 23.4924 226.448 cv
23.5374 226.327 li
24.6474 226.327 li
24.6474 226.298 li
24.1824 225.848 23.8674 225.458 23.7174 225.113 cv
23.5674 224.768 23.4924 224.393 23.4924 224.003 cv
23.4924 223.223 23.9124 222.683 24.7524 222.413 cv
23.9124 221.633 23.4924 220.823 23.4924 219.967 cv
23.4924 218.813 24.3924 218.228 26.1924 218.228 cv
29.2374 218.228 li
29.5674 218.228 29.8074 218.183 29.9274 218.077 cv
30.0474 217.988 30.1224 217.823 30.1374 217.583 cv
30.1674 217.193 li
30.3924 217.193 li
f
30.3924 206.123 mo
30.3924 209.243 li
30.1674 209.228 li
30.1374 208.868 30.0324 208.613 29.8524 208.493 cv
29.6724 208.373 29.3274 208.298 28.8174 208.298 cv
25.8324 208.298 li
24.8274 208.298 24.3174 208.673 24.3174 209.393 cv
24.3174 209.648 24.3774 209.888 24.4974 210.098 cv
24.6174 210.323 24.8424 210.608 25.1724 210.938 cv
29.3124 210.938 li
29.6124 210.938 29.8224 210.878 29.9424 210.743 cv
30.0624 210.608 30.1374 210.353 30.1674 209.963 cv
30.3924 209.963 li
30.3924 213.128 li
30.1674 213.128 li
30.1374 212.753 30.0474 212.498 29.8974 212.378 cv
29.7474 212.258 29.4324 212.198 28.9824 212.198 cv
25.3374 212.198 li
24.9774 212.198 24.7224 212.243 24.5724 212.303 cv
24.4374 212.378 24.3624 212.513 24.3624 212.723 cv
24.3624 212.933 24.3924 213.068 24.4224 213.158 cv
24.1674 213.158 li
23.9724 212.468 23.7474 211.778 23.4924 211.103 cv
23.5374 210.983 li
24.7074 210.983 li
24.7074 210.968 li
23.8974 210.263 23.4924 209.543 23.4924 208.808 cv
23.4924 208.238 23.7024 207.803 24.0924 207.503 cv
24.4974 207.202 25.0674 207.038 25.8024 207.038 cv
29.1174 207.038 li
29.5224 207.038 29.7924 206.978 29.9124 206.858 cv
30.0474 206.738 30.1374 206.498 30.1674 206.123 cv
30.3924 206.123 li
f
29.6424 198.698 mo
29.8524 198.698 li
30.0624 199.478 30.2874 200.168 30.5124 200.753 cv
30.4674 200.827 li
29.2524 200.827 li
29.2524 200.858 li
30.1074 201.488 30.5274 202.208 30.5274 203.003 cv
30.5274 203.573 30.3624 204.023 30.0174 204.353 cv
29.6724 204.683 29.2074 204.833 28.6224 204.833 cv
24.8574 204.833 li
24.4974 204.833 24.2424 204.908 24.0924 205.028 cv
23.9574 205.163 23.8824 205.403 23.8524 205.763 cv
23.6424 205.763 li
23.6424 203.573 li
28.4874 203.573 li
28.8324 203.573 29.1174 203.483 29.3424 203.273 cv
29.5674 203.063 29.6724 202.808 29.6724 202.508 cv
29.6724 202.028 29.5224 201.608 29.2074 201.248 cv
29.0874 201.128 28.9824 201.038 28.8774 200.978 cv
28.7724 200.933 28.5924 200.903 28.3374 200.903 cv
24.8724 200.903 li
24.4824 200.903 24.2424 200.978 24.1224 201.113 cv
24.0024 201.263 23.9274 201.563 23.8974 202.013 cv
23.6424 202.013 li
23.6424 199.643 li
28.7874 199.643 li
29.1474 199.643 29.3724 199.598 29.4774 199.478 cv
29.5974 199.358 29.6424 199.133 29.6424 198.788 cv
29.6424 198.698 li
f
30.3924 186.773 mo
30.3924 190.043 li
30.1674 190.043 li
30.1374 189.623 30.0474 189.368 29.9124 189.248 cv
29.7774 189.128 29.4924 189.068 29.0424 189.068 cv
25.9524 189.068 li
25.3524 189.068 24.9324 189.158 24.6624 189.338 cv
24.4074 189.518 24.2724 189.803 24.2724 190.223 cv
24.2724 190.583 24.3474 190.883 24.4824 191.123 cv
24.6324 191.363 24.8574 191.603 25.1874 191.827 cv
28.9674 191.827 li
29.4474 191.827 29.7774 191.768 29.9274 191.618 cv
30.0774 191.467 30.1674 191.183 30.1674 190.748 cv
30.3924 190.748 li
30.3924 194.108 li
30.1674 194.108 li
30.1374 193.673 30.0774 193.388 29.9574 193.268 cv
29.8374 193.148 29.5524 193.088 29.1024 193.088 cv
25.9374 193.088 li
24.8274 193.088 24.2724 193.418 24.2724 194.063 cv
24.2724 194.348 24.3474 194.648 24.4674 194.963 cv
24.5874 195.278 24.7374 195.503 24.9174 195.653 cv
25.0674 195.788 25.1574 195.848 25.1724 195.848 cv
29.3424 195.848 li
29.6724 195.848 29.8824 195.788 29.9874 195.638 cv
30.0924 195.503 30.1524 195.233 30.1674 194.827 cv
30.3924 194.827 li
30.3924 198.158 li
30.1674 198.158 li
30.1674 197.738 30.0924 197.468 29.9424 197.318 cv
29.7924 197.183 29.5074 197.108 29.0724 197.108 cv
25.3524 197.108 li
24.9924 197.108 24.7374 197.153 24.5874 197.228 cv
24.4374 197.318 24.3624 197.452 24.3624 197.633 cv
24.3624 197.783 24.3924 197.948 24.4224 198.113 cv
24.1674 198.113 li
23.9874 197.438 23.7624 196.748 23.4924 196.028 cv
23.5374 195.908 li
24.6474 195.908 li
24.6474 195.878 li
24.1824 195.428 23.8674 195.038 23.7174 194.693 cv
23.5674 194.348 23.4924 193.973 23.4924 193.583 cv
23.4924 192.803 23.9124 192.263 24.7524 191.993 cv
23.9124 191.213 23.4924 190.403 23.4924 189.548 cv
23.4924 188.393 24.3924 187.808 26.1924 187.808 cv
29.2374 187.808 li
29.5674 187.808 29.8074 187.763 29.9274 187.658 cv
30.0474 187.568 30.1224 187.403 30.1374 187.163 cv
30.1674 186.773 li
30.3924 186.773 li
f
20.1774 184.433 mo
24.7524 184.433 li
24.3774 184.283 24.0774 184.013 23.8374 183.653 cv
23.6124 183.293 23.4924 182.873 23.4924 182.408 cv
23.4924 181.628 23.8074 180.983 24.4374 180.473 cv
25.0674 179.963 25.8624 179.708 26.7924 179.708 cv
27.9024 179.708 28.8024 180.053 29.4924 180.713 cv
30.1824 181.388 30.5274 182.228 30.5274 183.218 cv
30.5274 183.833 30.4224 184.403 30.2274 184.913 cv
30.0324 185.438 29.8074 185.693 29.5524 185.693 cv
21.9024 185.693 li
21.5424 185.693 21.3024 185.738 21.1974 185.828 cv
21.0924 185.918 21.0324 186.128 21.0324 186.428 cv
21.0624 186.683 li
20.8074 186.683 li
20.6724 186.233 li
20.3724 185.213 20.1924 184.643 20.1474 184.508 cv
20.1774 184.433 li
25.6224 184.433 mo
29.2824 184.433 li
29.5224 184.433 29.7024 184.298 29.8524 184.013 cv
30.0024 183.728 30.0624 183.383 30.0624 182.978 cv
30.0624 182.393 29.8524 181.928 29.4174 181.583 cv
28.9674 181.223 28.3074 181.028 27.4374 181.028 cv
26.4624 181.028 25.6974 181.223 25.1424 181.613 cv
24.6774 181.943 24.4374 182.393 24.4374 182.948 cv
24.4374 183.353 24.5574 183.698 24.7974 183.998 cv
25.0374 184.298 25.3074 184.433 25.6224 184.433 cv
f
27.9324 173.108 mo
28.0374 172.868 li
29.7024 173.468 30.5274 174.518 30.5274 176.003 cv
30.5274 176.888 30.2274 177.578 29.6124 178.088 cv
29.0124 178.598 28.1874 178.853 27.1374 178.853 cv
26.0724 178.853 25.2024 178.568 24.5124 177.998 cv
23.8374 177.428 23.4924 176.678 23.4924 175.748 cv
23.4924 174.848 23.8374 174.158 24.5274 173.663 cv
24.9324 173.378 25.5024 173.213 26.2374 173.153 cv
26.2374 177.773 li
26.8674 177.743 27.3474 177.683 27.6774 177.593 cv
28.0074 177.503 28.3524 177.338 28.6824 177.083 cv
29.2374 176.663 29.5074 176.108 29.5074 175.418 cv
29.5074 174.938 29.3874 174.518 29.1474 174.188 cv
28.9074 173.858 28.5024 173.498 27.9324 173.108 cv
25.7574 177.743 mo
25.7574 174.683 li
25.1274 174.773 24.6924 174.923 24.4224 175.133 cv
24.1674 175.343 24.0324 175.673 24.0324 176.153 cv
24.0324 176.573 24.1824 176.933 24.4824 177.203 cv
24.7824 177.488 25.2024 177.668 25.7574 177.743 cv
f
23.5224 170.168 mo
24.9024 170.168 li
24.3624 169.793 24.0024 169.478 23.7924 169.223 cv
23.5974 168.967 23.4924 168.683 23.4924 168.368 cv
23.4924 168.113 23.5674 167.918 23.7024 167.768 cv
23.8524 167.618 24.0474 167.543 24.2874 167.543 cv
24.4974 167.543 24.6624 167.603 24.7824 167.708 cv
24.9024 167.813 24.9624 167.948 24.9624 168.128 cv
24.9624 168.323 24.8724 168.518 24.6624 168.728 cv
24.5124 168.893 24.4374 169.028 24.4374 169.118 cv
24.4374 169.327 24.5874 169.568 24.8724 169.808 cv
25.1724 170.048 25.4274 170.168 25.6674 170.168 cv
29.0424 170.168 li
29.4774 170.168 29.7624 170.092 29.9124 169.913 cv
30.0624 169.747 30.1524 169.403 30.1674 168.893 cv
30.3924 168.893 li
30.3924 172.493 li
30.1674 172.493 li
30.0774 172.013 29.9874 171.728 29.8674 171.607 cv
29.7624 171.488 29.5224 171.428 29.1324 171.428 cv
25.3824 171.428 li
25.0524 171.428 24.8274 171.473 24.6924 171.548 cv
24.5574 171.622 24.4824 171.758 24.4824 171.938 cv
24.4824 172.103 24.5124 172.283 24.5424 172.463 cv
24.3024 172.463 li
24.1074 171.833 23.8374 171.098 23.4924 170.243 cv
23.5224 170.168 li
f
29.4024 157.193 mo
29.8224 157.193 li
30.3024 157.583 30.5274 158.033 30.5274 158.543 cv
30.5274 159.113 30.1674 159.443 29.4474 159.503 cv
29.4474 159.518 li
30.1674 160.163 30.5274 160.883 30.5274 161.693 cv
30.5274 162.173 30.3924 162.548 30.1224 162.833 cv
29.8524 163.133 29.4774 163.268 28.9824 163.268 cv
28.2924 163.268 27.7074 162.923 27.2274 162.218 cv
26.9124 161.738 26.5074 160.838 26.0124 159.518 cv
25.2024 159.518 li
24.7524 159.518 24.4224 159.638 24.1974 159.848 cv
23.9724 160.058 23.8524 160.343 23.8524 160.688 cv
23.8524 160.988 23.9274 161.243 24.0774 161.438 cv
24.2274 161.648 24.3924 161.738 24.5874 161.738 cv
24.6774 161.738 24.7824 161.723 24.8874 161.693 cv
25.0074 161.663 25.1124 161.648 25.2174 161.648 cv
25.3674 161.648 25.5174 161.723 25.6374 161.858 cv
25.7724 161.993 25.8324 162.158 25.8324 162.338 cv
25.8324 162.518 25.7724 162.668 25.6374 162.788 cv
25.5174 162.923 25.3524 162.983 25.1424 162.983 cv
24.6624 162.983 24.2724 162.728 23.9424 162.218 cv
23.6424 161.753 23.4924 161.183 23.4924 160.493 cv
23.4924 159.683 23.7174 159.098 24.1674 158.723 cv
24.3774 158.543 24.6024 158.438 24.8124 158.378 cv
25.0224 158.333 25.3674 158.303 25.8324 158.303 cv
28.6974 158.303 li
29.3574 158.303 29.6874 158.153 29.6874 157.838 cv
29.6874 157.643 29.5974 157.433 29.4024 157.193 cv
28.4874 159.518 mo
26.3724 159.518 li
26.7024 160.448 27.0324 161.078 27.3624 161.438 cv
27.6774 161.783 28.0674 161.948 28.5174 161.948 cv
28.9074 161.948 29.1924 161.858 29.3874 161.663 cv
29.5824 161.483 29.6724 161.228 29.6724 160.913 cv
29.6724 160.583 29.5974 160.298 29.4324 160.043 cv
29.2824 159.833 29.1474 159.698 29.0124 159.623 cv
28.8924 159.563 28.7124 159.518 28.4874 159.518 cv
f
30.3924 153.308 mo
30.3924 156.848 li
30.1674 156.848 li
30.1374 156.383 30.0324 156.068 29.8824 155.918 cv
29.7324 155.768 29.4324 155.693 29.0124 155.693 cv
21.9774 155.693 li
21.6174 155.693 21.3774 155.738 21.2274 155.828 cv
21.0924 155.918 21.0174 156.083 21.0174 156.323 cv
21.0174 156.533 21.0324 156.728 21.0474 156.878 cv
20.8074 156.878 li
20.5824 155.933 20.3574 155.138 20.1474 154.508 cv
20.2074 154.433 li
29.0874 154.433 li
29.5074 154.433 29.7924 154.373 29.9274 154.223 cv
30.0624 154.088 30.1374 153.788 30.1674 153.308 cv
30.3924 153.308 li
f
26.9274 145.943 mo
27.9774 145.943 28.8474 146.258 29.5224 146.888 cv
30.1974 147.518 30.5274 148.328 30.5274 149.318 cv
30.5274 150.248 30.1974 151.013 29.5224 151.628 cv
28.8624 152.258 28.0074 152.558 26.9724 152.558 cv
25.9374 152.558 25.0974 152.258 24.4524 151.628 cv
23.8224 151.013 23.4924 150.203 23.4924 149.183 cv
23.4924 148.253 23.8224 147.488 24.4524 146.873 cv
25.0824 146.258 25.9074 145.943 26.9274 145.943 cv
27.3324 147.293 mo
26.1924 147.293 25.3074 147.548 24.6624 148.043 cv
24.1674 148.448 23.9124 148.928 23.9124 149.468 cv
23.9124 149.993 24.1374 150.413 24.5574 150.728 cv
24.9774 151.058 25.5624 151.208 26.2974 151.208 cv
27.5874 151.208 28.6074 150.953 29.3724 150.413 cv
29.8824 150.083 30.1224 149.633 30.1224 149.063 cv
30.1224 148.523 29.8824 148.088 29.3874 147.773 cv
28.8924 147.458 28.2024 147.293 27.3324 147.293 cv
f
30.3924 138.218 mo
30.3924 141.338 li
30.1674 141.323 li
30.1374 140.963 30.0324 140.708 29.8524 140.588 cv
29.6724 140.468 29.3274 140.393 28.8174 140.393 cv
25.8324 140.393 li
24.8274 140.393 24.3174 140.768 24.3174 141.488 cv
24.3174 141.743 24.3774 141.983 24.4974 142.193 cv
24.6174 142.418 24.8424 142.703 25.1724 143.033 cv
29.3124 143.033 li
29.6124 143.033 29.8224 142.973 29.9424 142.838 cv
30.0624 142.703 30.1374 142.448 30.1674 142.058 cv
30.3924 142.058 li
30.3924 145.223 li
30.1674 145.223 li
30.1374 144.848 30.0474 144.593 29.8974 144.473 cv
29.7474 144.353 29.4324 144.293 28.9824 144.293 cv
25.3374 144.293 li
24.9774 144.293 24.7224 144.338 24.5724 144.398 cv
24.4374 144.473 24.3624 144.608 24.3624 144.818 cv
24.3624 145.028 24.3924 145.163 24.4224 145.253 cv
24.1674 145.253 li
23.9724 144.563 23.7474 143.873 23.4924 143.198 cv
23.5374 143.078 li
24.7074 143.078 li
24.7074 143.063 li
23.8974 142.358 23.4924 141.638 23.4924 140.903 cv
23.4924 140.333 23.7024 139.898 24.0924 139.598 cv
24.4974 139.298 25.0674 139.133 25.8024 139.133 cv
29.1174 139.133 li
29.5224 139.133 29.7924 139.073 29.9124 138.953 cv
30.0474 138.833 30.1374 138.593 30.1674 138.218 cv
30.3924 138.218 li
f
24.5724 130.943 mo
24.5724 132.188 li
25.0074 132.008 25.4274 131.903 25.8324 131.903 cv
26.6124 131.903 27.1824 132.173 27.5724 132.683 cv
27.9624 133.208 28.1574 133.733 28.1574 134.243 cv
28.1574 134.363 28.1424 134.543 28.1124 134.813 cv
28.0824 135.098 li
28.1424 135.308 28.2774 135.503 28.4874 135.698 cv
28.6974 135.908 28.8774 135.998 29.0274 135.998 cv
29.2674 135.998 29.4024 135.608 29.4324 134.828 cv
29.5224 132.893 li
29.5524 132.353 29.7024 131.903 29.9874 131.573 cv
30.2724 131.243 30.6324 131.078 31.1124 131.078 cv
31.6824 131.078 32.2074 131.378 32.6874 131.978 cv
33.3174 132.818 33.6474 133.808 33.6474 134.978 cv
33.6474 135.698 33.4974 136.313 33.2124 136.823 cv
32.9274 137.333 32.5824 137.573 32.1924 137.573 cv
31.9074 137.573 31.6224 137.468 31.3524 137.243 cv
31.0824 137.033 30.7524 136.643 30.3774 136.103 cv
30.2274 136.433 30.1074 136.643 29.9874 136.748 cv
29.8824 136.853 29.7474 136.898 29.5824 136.898 cv
29.2974 136.898 28.9524 136.673 28.5474 136.208 cv
28.3524 135.983 28.1574 135.773 27.9474 135.563 cv
27.7074 136.073 27.4224 136.433 27.1074 136.643 cv
26.8074 136.853 26.4174 136.958 25.9374 136.958 cv
25.2624 136.958 24.6924 136.718 24.2124 136.238 cv
23.7324 135.758 23.4924 135.158 23.4924 134.453 cv
23.4924 134.063 23.5674 133.658 23.7174 133.253 cv
23.8374 132.923 li
23.9424 132.638 23.9874 132.368 23.9874 132.098 cv
23.9874 130.943 li
24.5724 130.943 li
25.3224 135.713 mo
25.3674 135.713 li
26.0874 135.713 26.6724 135.578 27.1224 135.293 cv
27.5724 135.008 27.7824 134.633 27.7824 134.168 cv
27.7824 133.838 27.6624 133.568 27.4224 133.358 cv
27.1824 133.163 26.8524 133.058 26.4324 133.058 cv
25.7724 133.058 25.1724 133.208 24.6174 133.508 cv
24.1524 133.763 23.9124 134.123 23.9124 134.603 cv
23.9124 134.963 24.0474 135.233 24.2874 135.428 cv
24.5424 135.623 24.8874 135.713 25.3224 135.713 cv
31.3374 131.498 mo
31.0524 131.498 30.8574 131.648 30.7524 131.918 cv
30.6474 132.188 30.6024 132.668 30.6024 133.358 cv
30.6024 134.348 30.5274 135.158 30.4074 135.788 cv
30.7674 136.088 31.0224 136.298 31.1874 136.388 cv
31.3524 136.478 31.5174 136.523 31.6974 136.523 cv
32.0274 136.523 32.2824 136.328 32.4924 135.938 cv
32.6874 135.548 32.7924 135.008 32.7924 134.348 cv
32.7924 133.508 32.6574 132.818 32.3874 132.293 cv
32.1174 131.768 31.7724 131.498 31.3374 131.498 cv
f
23.6424 116.333 mo
23.8674 116.333 li
23.9274 116.483 24.0024 116.603 24.0924 116.663 cv
24.1824 116.738 24.3774 116.828 24.6774 116.948 cv
29.8674 119.018 li
30.3474 119.228 30.5874 119.363 30.5874 119.438 cv
30.4824 119.573 li
30.4224 119.603 30.2574 119.678 29.9574 119.798 cv
26.4174 121.163 li
30.0174 122.843 li
30.3924 123.023 30.5874 123.158 30.5874 123.218 cv
30.5874 123.308 30.3774 123.443 29.9424 123.608 cv
24.8124 125.633 li
24.4224 125.783 24.1824 125.918 24.0624 126.008 cv
23.9574 126.113 23.8974 126.248 23.8674 126.428 cv
23.6424 126.428 li
23.6424 123.728 li
23.8674 123.728 li
23.8974 123.998 23.9574 124.178 24.0174 124.268 cv
24.0924 124.373 24.2124 124.418 24.3624 124.418 cv
24.5124 124.418 24.6624 124.388 24.8124 124.328 cv
28.7274 122.843 li
25.7424 121.478 li
24.9024 121.778 li
24.5124 121.928 24.2424 122.063 24.1074 122.198 cv
23.9874 122.333 23.8974 122.543 23.8674 122.813 cv
23.6424 122.813 li
23.6424 119.768 li
23.8674 119.768 li
23.9274 120.128 23.9874 120.353 24.0474 120.473 cv
24.1224 120.593 24.2424 120.638 24.3924 120.638 cv
24.5574 120.638 24.8574 120.563 25.2924 120.383 cv
28.6524 119.123 li
25.3224 117.773 li
24.9024 117.608 24.5724 117.518 24.3174 117.518 cv
24.1974 117.518 24.1074 117.578 24.0474 117.668 cv
23.9874 117.758 23.9274 117.938 23.8674 118.178 cv
23.6424 118.178 li
23.6424 116.333 li
f
20.9124 113.213 mo
21.1374 113.213 21.3174 113.288 21.4674 113.438 cv
21.6174 113.588 21.6774 113.783 21.6774 113.993 cv
21.6774 114.203 21.6174 114.383 21.4674 114.533 cv
21.3174 114.683 21.1374 114.743 20.9124 114.743 cv
20.7024 114.743 20.5224 114.668 20.3724 114.518 cv
20.2224 114.368 20.1474 114.188 20.1474 113.978 cv
20.1474 113.768 20.2224 113.588 20.3724 113.438 cv
20.5224 113.288 20.7024 113.213 20.9124 113.213 cv
30.3924 112.118 mo
30.3924 115.673 li
30.1674 115.673 li
30.1374 115.163 30.0474 114.833 29.8974 114.698 cv
29.7474 114.563 29.4024 114.488 28.8324 114.488 cv
25.4274 114.488 li
25.0824 114.488 24.8424 114.533 24.6924 114.593 cv
24.5574 114.668 24.4824 114.803 24.4824 114.983 cv
24.4824 115.223 24.5124 115.433 24.5574 115.613 cv
24.3174 115.613 li
23.4924 113.288 li
23.5524 113.228 li
28.8174 113.228 li
29.3874 113.228 29.7324 113.168 29.8824 113.048 cv
30.0324 112.928 30.1374 112.613 30.1674 112.118 cv
30.3924 112.118 li
f
29.2374 107.753 mo
29.4024 107.558 li
30.1524 108.038 30.5274 108.653 30.5274 109.373 cv
30.5274 110.258 29.8974 110.693 28.6374 110.693 cv
24.1224 110.693 li
24.1224 111.488 li
24.0174 111.548 li
23.9424 111.548 23.8524 111.473 23.7324 111.293 cv
23.5224 110.918 22.9824 110.438 22.1274 109.838 cv
22.0974 109.823 22.0374 109.778 21.9474 109.703 cv
21.8574 109.628 21.7674 109.568 21.7074 109.538 cv
21.7074 109.478 21.7824 109.433 21.9024 109.433 cv
23.6424 109.433 li
23.6424 107.918 li
24.1224 107.918 li
24.1224 109.433 li
28.4124 109.433 li
28.8924 109.433 29.2374 109.373 29.4474 109.253 cv
29.6574 109.133 29.7624 108.938 29.7624 108.653 cv
29.7624 108.353 29.5974 108.053 29.2374 107.753 cv
f
30.3924 100.268 mo
30.3924 103.448 li
30.1674 103.448 li
30.1224 103.013 30.0174 102.728 29.8674 102.608 cv
29.7174 102.488 29.3874 102.428 28.8624 102.428 cv
25.8924 102.428 li
24.8424 102.428 24.3024 102.803 24.3024 103.538 cv
24.3024 103.838 24.3774 104.123 24.5124 104.363 cv
24.6624 104.618 24.9024 104.903 25.2474 105.218 cv
28.8624 105.218 li
29.3874 105.218 29.7174 105.158 29.8674 105.038 cv
30.0174 104.918 30.1224 104.648 30.1674 104.198 cv
30.3924 104.198 li
30.3924 107.438 li
30.1674 107.438 li
30.1074 107.018 30.0174 106.748 29.8674 106.643 cv
29.7324 106.538 29.4024 106.478 28.8624 106.478 cv
21.7974 106.478 li
21.4824 106.478 21.2724 106.538 21.1824 106.628 cv
21.0924 106.718 21.0324 106.928 21.0324 107.243 cv
21.0324 107.333 21.0474 107.393 21.0474 107.423 cv
20.8074 107.423 li
20.6874 107.018 li
20.4624 106.253 20.2824 105.683 20.1474 105.293 cv
20.1924 105.218 li
24.7524 105.218 li
24.3024 104.873 23.9874 104.528 23.7924 104.183 cv
23.5974 103.853 23.4924 103.463 23.4924 103.013 cv
23.4924 101.783 24.2874 101.168 25.8774 101.168 cv
28.8624 101.168 li
29.3874 101.168 29.7174 101.123 29.8524 101.033 cv
29.9874 100.943 30.0924 100.688 30.1674 100.268 cv
30.3924 100.268 li
f
29.2374 92.3326 mo
29.4024 92.1376 li
30.1524 92.6176 30.5274 93.2326 30.5274 93.9526 cv
30.5274 94.8376 29.8974 95.2726 28.6374 95.2726 cv
24.1224 95.2726 li
24.1224 96.0676 li
24.0174 96.1276 li
23.9424 96.1276 23.8524 96.0526 23.7324 95.8726 cv
23.5224 95.4976 22.9824 95.0176 22.1274 94.4176 cv
22.0974 94.4026 22.0374 94.3576 21.9474 94.2826 cv
21.8574 94.2076 21.7674 94.1476 21.7074 94.1176 cv
21.7074 94.0576 21.7824 94.0126 21.9024 94.0126 cv
23.6424 94.0126 li
23.6424 92.4976 li
24.1224 92.4976 li
24.1224 94.0126 li
28.4124 94.0126 li
28.8924 94.0126 29.2374 93.9526 29.4474 93.8326 cv
29.6574 93.7126 29.7624 93.5176 29.7624 93.2326 cv
29.7624 92.9326 29.5974 92.6326 29.2374 92.3326 cv
f
27.9324 86.0326 mo
28.0374 85.7926 li
29.7024 86.3926 30.5274 87.4426 30.5274 88.9276 cv
30.5274 89.8126 30.2274 90.5026 29.6124 91.0126 cv
29.0124 91.5226 28.1874 91.7776 27.1374 91.7776 cv
26.0724 91.7776 25.2024 91.4926 24.5124 90.9226 cv
23.8374 90.3526 23.4924 89.6026 23.4924 88.6726 cv
23.4924 87.7726 23.8374 87.0826 24.5274 86.5876 cv
24.9324 86.3026 25.5024 86.1376 26.2374 86.0776 cv
26.2374 90.6976 li
26.8674 90.6676 27.3474 90.6076 27.6774 90.5176 cv
28.0074 90.4276 28.3524 90.2626 28.6824 90.0076 cv
29.2374 89.5876 29.5074 89.0326 29.5074 88.3426 cv
29.5074 87.8626 29.3874 87.4426 29.1474 87.1126 cv
28.9074 86.7826 28.5024 86.4226 27.9324 86.0326 cv
25.7574 90.6676 mo
25.7574 87.6076 li
25.1274 87.6976 24.6924 87.8476 24.4224 88.0576 cv
24.1674 88.2676 24.0324 88.5976 24.0324 89.0776 cv
24.0324 89.4976 24.1824 89.8576 24.4824 90.1276 cv
24.7824 90.4126 25.2024 90.5926 25.7574 90.6676 cv
f
25.8774 83.1526 mo
26.8224 81.5926 li
27.1224 81.0976 27.4074 80.7526 27.6624 80.5576 cv
27.9324 80.3776 28.2624 80.2726 28.6674 80.2726 cv
29.1774 80.2726 29.6124 80.4826 29.9724 80.9026 cv
30.3474 81.3226 30.5274 81.8026 30.5274 82.3726 cv
30.5274 82.8526 30.4824 83.2126 30.3924 83.4676 cv
30.3174 83.7376 30.2724 83.9776 30.2724 84.1576 cv
30.2724 84.3376 30.3324 84.4576 30.4374 84.5176 cv
30.4374 84.7126 li
28.0974 84.7126 li
28.0974 84.4726 li
28.8324 84.3226 29.3724 84.0826 29.7024 83.7826 cv
30.0474 83.4826 30.2124 83.0776 30.2124 82.5676 cv
30.2124 82.2076 30.1074 81.9076 29.8974 81.6676 cv
29.6874 81.4426 29.4324 81.3226 29.1024 81.3226 cv
28.6524 81.3226 28.2774 81.5926 27.9774 82.1176 cv
27.5274 82.9276 li
26.8674 84.1276 26.1324 84.7276 25.3524 84.7276 cv
24.7824 84.7276 24.3324 84.5476 24.0024 84.1726 cv
23.6724 83.7976 23.5074 83.2876 23.5074 82.6576 cv
23.5074 82.2226 23.5674 81.8926 23.6724 81.6526 cv
23.7624 81.4726 23.7924 81.3376 23.7924 81.2326 cv
23.7924 81.1726 23.7474 81.0826 23.6424 80.9926 cv
23.6424 80.8276 li
25.6824 80.7526 li
25.6824 80.9776 li
25.0074 81.1576 24.5274 81.3676 24.2574 81.6226 cv
23.9874 81.8776 23.8374 82.2226 23.8374 82.6726 cv
23.8374 83.0176 23.9274 83.2876 24.0924 83.4976 cv
24.2724 83.7076 24.5274 83.7976 24.8574 83.7976 cv
25.0374 83.7976 25.2174 83.7526 25.4124 83.6326 cv
25.6074 83.5126 25.7574 83.3626 25.8774 83.1526 cv
f
29.2374 75.6675 mo
29.4024 75.4725 li
30.1524 75.9525 30.5274 76.5675 30.5274 77.2875 cv
30.5274 78.1725 29.8974 78.6075 28.6374 78.6075 cv
24.1224 78.6075 li
24.1224 79.4025 li
24.0174 79.4625 li
23.9424 79.4625 23.8524 79.3875 23.7324 79.2075 cv
23.5224 78.8325 22.9824 78.3525 22.1274 77.7525 cv
22.0974 77.7375 22.0374 77.6925 21.9474 77.6175 cv
21.8574 77.5425 21.7674 77.4825 21.7074 77.4525 cv
21.7074 77.3925 21.7824 77.3475 21.9024 77.3475 cv
23.6424 77.3475 li
23.6424 75.8325 li
24.1224 75.8325 li
24.1224 77.3475 li
28.4124 77.3475 li
28.8924 77.3475 29.2374 77.2875 29.4474 77.1675 cv
29.6574 77.0475 29.7624 76.8525 29.7624 76.5675 cv
29.7624 76.2675 29.5974 75.9675 29.2374 75.6675 cv
f
29.2374 67.7475 mo
29.4024 67.5525 li
30.1524 68.0325 30.5274 68.6475 30.5274 69.3675 cv
30.5274 70.2525 29.8974 70.6875 28.6374 70.6875 cv
24.1224 70.6875 li
24.1224 71.4825 li
24.0174 71.5425 li
23.9424 71.5425 23.8524 71.4675 23.7324 71.2875 cv
23.5224 70.9125 22.9824 70.4325 22.1274 69.8325 cv
22.0974 69.8175 22.0374 69.7725 21.9474 69.6975 cv
21.8574 69.6225 21.7674 69.5625 21.7074 69.5325 cv
21.7074 69.4725 21.7824 69.4275 21.9024 69.4275 cv
23.6424 69.4275 li
23.6424 67.9125 li
24.1224 67.9125 li
24.1224 69.4275 li
28.4124 69.4275 li
28.8924 69.4275 29.2374 69.3675 29.4474 69.2475 cv
29.6574 69.1275 29.7624 68.9325 29.7624 68.6475 cv
29.7624 68.3475 29.5974 68.0475 29.2374 67.7475 cv
f
20.9124 64.8675 mo
21.1374 64.8675 21.3174 64.9425 21.4674 65.0925 cv
21.6174 65.2425 21.6774 65.4375 21.6774 65.6475 cv
21.6774 65.8575 21.6174 66.0375 21.4674 66.1875 cv
21.3174 66.3375 21.1374 66.3975 20.9124 66.3975 cv
20.7024 66.3975 20.5224 66.3225 20.3724 66.1725 cv
20.2224 66.0225 20.1474 65.8425 20.1474 65.6325 cv
20.1474 65.4225 20.2224 65.2425 20.3724 65.0925 cv
20.5224 64.9425 20.7024 64.8675 20.9124 64.8675 cv
30.3924 63.7725 mo
30.3924 67.3275 li
30.1674 67.3275 li
30.1374 66.8175 30.0474 66.4875 29.8974 66.3525 cv
29.7474 66.2175 29.4024 66.1425 28.8324 66.1425 cv
25.4274 66.1425 li
25.0824 66.1425 24.8424 66.1875 24.6924 66.2475 cv
24.5574 66.3225 24.4824 66.4575 24.4824 66.6375 cv
24.4824 66.8775 24.5124 67.0875 24.5574 67.2675 cv
24.3174 67.2675 li
23.4924 64.9425 li
23.5524 64.8825 li
28.8174 64.8825 li
29.3874 64.8825 29.7324 64.8225 29.8824 64.7025 cv
30.0324 64.5825 30.1374 64.2675 30.1674 63.7725 cv
30.3924 63.7725 li
f
30.3924 51.7725 mo
30.3924 55.0425 li
30.1674 55.0425 li
30.1374 54.6225 30.0474 54.3675 29.9124 54.2475 cv
29.7774 54.1275 29.4924 54.0675 29.0424 54.0675 cv
25.9524 54.0675 li
25.3524 54.0675 24.9324 54.1575 24.6624 54.3375 cv
24.4074 54.5175 24.2724 54.8025 24.2724 55.2225 cv
24.2724 55.5825 24.3474 55.8825 24.4824 56.1225 cv
24.6324 56.3625 24.8574 56.6025 25.1874 56.8275 cv
28.9674 56.8275 li
29.4474 56.8275 29.7774 56.7675 29.9274 56.6175 cv
30.0774 56.4675 30.1674 56.1825 30.1674 55.7475 cv
30.3924 55.7475 li
30.3924 59.1075 li
30.1674 59.1075 li
30.1374 58.6725 30.0774 58.3875 29.9574 58.2675 cv
29.8374 58.1475 29.5524 58.0875 29.1024 58.0875 cv
25.9374 58.0875 li
24.8274 58.0875 24.2724 58.4175 24.2724 59.0625 cv
24.2724 59.3475 24.3474 59.6475 24.4674 59.9625 cv
24.5874 60.2775 24.7374 60.5025 24.9174 60.6525 cv
25.0674 60.7875 25.1574 60.8475 25.1724 60.8475 cv
29.3424 60.8475 li
29.6724 60.8475 29.8824 60.7875 29.9874 60.6375 cv
30.0924 60.5025 30.1524 60.2325 30.1674 59.8275 cv
30.3924 59.8275 li
30.3924 63.1575 li
30.1674 63.1575 li
30.1674 62.7375 30.0924 62.4675 29.9424 62.3175 cv
29.7924 62.1825 29.5074 62.1075 29.0724 62.1075 cv
25.3524 62.1075 li
24.9924 62.1075 24.7374 62.1525 24.5874 62.2275 cv
24.4374 62.3175 24.3624 62.4525 24.3624 62.6325 cv
24.3624 62.7825 24.3924 62.9475 24.4224 63.1125 cv
24.1674 63.1125 li
23.9874 62.4375 23.7624 61.7475 23.4924 61.0275 cv
23.5374 60.9075 li
24.6474 60.9075 li
24.6474 60.8775 li
24.1824 60.4275 23.8674 60.0375 23.7174 59.6925 cv
23.5674 59.3475 23.4924 58.9725 23.4924 58.5825 cv
23.4924 57.8025 23.9124 57.2625 24.7524 56.9925 cv
23.9124 56.2125 23.4924 55.4025 23.4924 54.5475 cv
23.4924 53.3925 24.3924 52.8075 26.1924 52.8075 cv
29.2374 52.8075 li
29.5674 52.8075 29.8074 52.7625 29.9274 52.6575 cv
30.0474 52.5675 30.1224 52.4025 30.1374 52.1625 cv
30.1674 51.7725 li
30.3924 51.7725 li
f
27.9324 45.6075 mo
28.0374 45.3675 li
29.7024 45.9675 30.5274 47.0175 30.5274 48.5025 cv
30.5274 49.3875 30.2274 50.0775 29.6124 50.5875 cv
29.0124 51.0975 28.1874 51.3525 27.1374 51.3525 cv
26.0724 51.3525 25.2024 51.0675 24.5124 50.4975 cv
23.8374 49.9275 23.4924 49.1775 23.4924 48.2475 cv
23.4924 47.3475 23.8374 46.6575 24.5274 46.1625 cv
24.9324 45.8775 25.5024 45.7125 26.2374 45.6525 cv
26.2374 50.2725 li
26.8674 50.2425 27.3474 50.1825 27.6774 50.0925 cv
28.0074 50.0025 28.3524 49.8375 28.6824 49.5825 cv
29.2374 49.1625 29.5074 48.6075 29.5074 47.9175 cv
29.5074 47.4375 29.3874 47.0175 29.1474 46.6875 cv
28.9074 46.3575 28.5024 45.9975 27.9324 45.6075 cv
25.7574 50.2425 mo
25.7574 47.1825 li
25.1274 47.2725 24.6924 47.4225 24.4224 47.6325 cv
24.1674 47.8425 24.0324 48.1725 24.0324 48.6525 cv
24.0324 49.0725 24.1824 49.4325 24.4824 49.7025 cv
24.7824 49.9875 25.2024 50.1675 25.7574 50.2425 cv
f
29.7474 42.3525 mo
29.9724 42.3525 30.1674 42.4425 30.3174 42.6075 cv
30.4674 42.7725 30.5424 42.9675 30.5424 43.1925 cv
30.5424 43.4325 30.4674 43.6275 30.3174 43.7775 cv
30.1674 43.9425 29.9724 44.0175 29.7324 44.0175 cv
29.5074 44.0175 29.3124 43.9425 29.1474 43.7775 cv
28.9824 43.6125 28.8924 43.4175 28.8924 43.1775 cv
28.8924 42.9675 28.9824 42.7725 29.1474 42.6075 cv
29.3274 42.4425 29.5224 42.3525 29.7474 42.3525 cv
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/restore_mysetup gx
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
